{
  "address": "0xF596546a917dCED4f186811e21FC7296c99c4e1C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployerV4",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextGlobalConfigLib",
          "type": "address"
        }
      ],
      "name": "GlobalConfigLibSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGlobalConfigLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "globalConfigLib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipientToValidate",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesAmountToValidate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_redeemContract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_redeemSelector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_redeemData",
          "type": "bytes"
        }
      ],
      "name": "isValidRedeemSharesCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "uuid_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextGlobalConfigLib",
          "type": "address"
        }
      ],
      "name": "setGlobalConfigLib",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x64202f0c333513275ce1c39fb199e82d74420fb7fe3bcc8f58e106ec34138573",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0xF596546a917dCED4f186811e21FC7296c99c4e1C",
    "transactionIndex": 0,
    "gasUsed": "464741",
    "logsBloom": "0x
    "blockHash": "0x29aa0f79f7523cff97b8be21d11554598f76b212c8ab29fd33720bbb20639413",
    "transactionHash": "0x64202f0c333513275ce1c39fb199e82d74420fb7fe3bcc8f58e106ec34138573",
    "logs": [],
    "blockNumber": 11761473,
    "cumulativeGasUsed": "464741",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f"
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployerV4\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextGlobalConfigLib\",\"type\":\"address\"}],\"name\":\"GlobalConfigLibSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGlobalConfigLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"globalConfigLib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipientToValidate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmountToValidate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_redeemContract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_redeemSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_redeemData\",\"type\":\"bytes\"}],\"name\":\"isValidRedeemSharesCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uuid_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextGlobalConfigLib\",\"type\":\"address\"}],\"name\":\"setGlobalConfigLib\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Only supports releases v4 and higher\",\"kind\":\"dev\",\"methods\":{\"getDispatcher()\":{\"returns\":{\"dispatcher_\":\"The `dispatcher` variable value\"}},\"getGlobalConfigLib()\":{\"returns\":{\"globalConfigLib_\":\"The address of the GlobalConfigLib target\"}},\"init(address)\":{\"details\":\"Serves as a pseudo-constructor\",\"params\":{\"_dispatcher\":\"The Dispatcher contract\"}},\"isValidRedeemSharesCall(address,address,uint256,address,bytes4,bytes)\":{\"details\":\"Use  NO_VALIDATION_ constants to skip optional validation of recipient and/or amount\",\"params\":{\"_recipientToValidate\":\"The intended recipient of the assets received from the redemption\",\"_redeemContract\":\"The contract to call\",\"_redeemData\":\"The encoded params to call\",\"_redeemSelector\":\"The selector to call\",\"_sharesAmountToValidate\":\"The intended amount of shares to redeem\",\"_vaultProxy\":\"The VaultProxy (shares token)\"},\"returns\":{\"isValid_\":\"True if valid\"}},\"proxiableUUID()\":{\"returns\":{\"uuid_\":\"The bytes32 hash representing the UUID\"}},\"setGlobalConfigLib(address)\":{\"details\":\"This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextGlobalConfigLib from being the same as the current GlobalConfigLib\",\"params\":{\"_nextGlobalConfigLib\":\"The address to set as the GlobalConfigLib\"}}},\"title\":\"GlobalConfigLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDispatcher()\":{\"notice\":\"Gets the `dispatcher` variable\"},\"getGlobalConfigLib()\":{\"notice\":\"Gets the GlobalConfigLib target for the GlobalConfigProxy\"},\"init(address)\":{\"notice\":\"Initializes the GlobalConfigProxy with core configuration\"},\"isValidRedeemSharesCall(address,address,uint256,address,bytes4,bytes)\":{\"notice\":\"Validates whether a call to redeem shares is valid for the shares version\"},\"proxiableUUID()\":{\"notice\":\"Returns a unique bytes32 hash for GlobalConfigLib instances\"},\"setGlobalConfigLib(address)\":{\"notice\":\"Sets the GlobalConfigLib target for the GlobalConfigProxy\"}},\"notice\":\"The proxiable library contract for GlobalConfigProxy\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/persistent/global-config/GlobalConfigLib.sol\":\"GlobalConfigLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/GlobalConfigLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./bases/GlobalConfigLibBase1.sol\\\";\\nimport \\\"./interfaces/IGlobalConfig1.sol\\\";\\nimport \\\"./interfaces/IGlobalConfigVaultAccessGetter.sol\\\";\\n\\n/// @title GlobalConfigLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The proxiable library contract for GlobalConfigProxy\\n/// @dev Only supports releases v4 and higher\\ncontract GlobalConfigLib is IGlobalConfig1, GlobalConfigLibBase1 {\\n    bytes4 private constant REDEEM_IN_KIND_V4 = 0x6af8e7eb;\\n    bytes4 private constant REDEEM_SPECIFIC_ASSETS_V4 = 0x3462fcc1;\\n\\n    address private immutable FUND_DEPLOYER_V4;\\n\\n    constructor(address _fundDeployerV4) public {\\n        FUND_DEPLOYER_V4 = _fundDeployerV4;\\n    }\\n\\n    /// @notice Validates whether a call to redeem shares is valid for the shares version\\n    /// @param _vaultProxy The VaultProxy (shares token)\\n    /// @param _recipientToValidate The intended recipient of the assets received from the redemption\\n    /// @param _sharesAmountToValidate The intended amount of shares to redeem\\n    /// @param _redeemContract The contract to call\\n    /// @param _redeemSelector The selector to call\\n    /// @param _redeemData The encoded params to call\\n    /// @return isValid_ True if valid\\n    /// @dev Use  NO_VALIDATION_ constants to skip optional validation of recipient and/or amount\\n    function isValidRedeemSharesCall(\\n        address _vaultProxy,\\n        address _recipientToValidate,\\n        uint256 _sharesAmountToValidate,\\n        address _redeemContract,\\n        bytes4 _redeemSelector,\\n        bytes calldata _redeemData\\n    ) external view override returns (bool isValid_) {\\n        // Get release for _vaultProxy\\n        address fundDeployer = IDispatcher(getDispatcher()).getFundDeployerForVaultProxy(\\n            _vaultProxy\\n        );\\n\\n        // Validate call data based on release\\n        if (fundDeployer == FUND_DEPLOYER_V4) {\\n            // Validate contract\\n            if (_redeemContract != IGlobalConfigVaultAccessGetter(_vaultProxy).getAccessor()) {\\n                return false;\\n            }\\n\\n            // Validate selector\\n            if (\\n                !(_redeemSelector == REDEEM_SPECIFIC_ASSETS_V4 ||\\n                    _redeemSelector == REDEEM_IN_KIND_V4)\\n            ) {\\n                return false;\\n            }\\n\\n            // Both functions have the same first two params so we can ignore the rest of _redeemData\\n            (address encodedRecipient, uint256 encodedSharesAmount) = abi.decode(\\n                _redeemData,\\n                (address, uint256)\\n            );\\n\\n            // Optionally validate recipient\\n            if (\\n                _recipientToValidate != NO_VALIDATION_DUMMY_ADDRESS &&\\n                _recipientToValidate != encodedRecipient\\n            ) {\\n                return false;\\n            }\\n\\n            // Optionally validate shares amount\\n            if (\\n                _sharesAmountToValidate != NO_VALIDATION_DUMMY_AMOUNT &&\\n                _sharesAmountToValidate != encodedSharesAmount\\n            ) {\\n                return false;\\n            }\\n\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x4797d64127eff8eff71f891e1581c2b21ab181ca74a874b074b9e114fe10f8c8\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/bases/GlobalConfigLibBase1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./GlobalConfigLibBaseCore.sol\\\";\\n\\n/// @title GlobalConfigLibBase1 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base implementation for GlobalConfigLib\\n/// @dev Each next base implementation inherits the previous base implementation,\\n/// e.g., `GlobalConfigLibBase2 is GlobalConfigLibBase1`\\n/// DO NOT EDIT CONTRACT.\\nabstract contract GlobalConfigLibBase1 is GlobalConfigLibBaseCore {\\n    address\\n        internal constant NO_VALIDATION_DUMMY_ADDRESS = 0x000000000000000000000000000000000000aaaa;\\n    // Don't use max, since a max value can be valid\\n    uint256 internal constant NO_VALIDATION_DUMMY_AMOUNT = type(uint256).max - 1;\\n}\\n\",\"keccak256\":\"0x97c7b342291da1a3d30687694edbf0015676fa7ada0b8886325877509b739075\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/bases/GlobalConfigLibBaseCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../utils/ProxiableGlobalConfigLib.sol\\\";\\n\\n/// @title GlobalConfigLibBaseCore Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The core implementation of GlobalConfigLib\\n/// @dev To be inherited by the first GlobalConfigLibBase implementation only.\\n/// DO NOT EDIT CONTRACT.\\nabstract contract GlobalConfigLibBaseCore is ProxiableGlobalConfigLib {\\n    event GlobalConfigLibSet(address nextGlobalConfigLib);\\n\\n    address internal dispatcher;\\n\\n    modifier onlyDispatcherOwner {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /// @notice Initializes the GlobalConfigProxy with core configuration\\n    /// @param _dispatcher The Dispatcher contract\\n    /// @dev Serves as a pseudo-constructor\\n    function init(address _dispatcher) external {\\n        require(getDispatcher() == address(0), \\\"init: Proxy already initialized\\\");\\n\\n        dispatcher = _dispatcher;\\n\\n        emit GlobalConfigLibSet(getGlobalConfigLib());\\n    }\\n\\n    /// @notice Sets the GlobalConfigLib target for the GlobalConfigProxy\\n    /// @param _nextGlobalConfigLib The address to set as the GlobalConfigLib\\n    /// @dev This function is absolutely critical. __updateCodeAddress() validates that the\\n    /// target is a valid Proxiable contract instance.\\n    /// Does not block _nextGlobalConfigLib from being the same as the current GlobalConfigLib\\n    function setGlobalConfigLib(address _nextGlobalConfigLib) external onlyDispatcherOwner {\\n        __updateCodeAddress(_nextGlobalConfigLib);\\n\\n        emit GlobalConfigLibSet(_nextGlobalConfigLib);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `dispatcher` variable\\n    /// @return dispatcher_ The `dispatcher` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return dispatcher;\\n    }\\n\\n    /// @notice Gets the GlobalConfigLib target for the GlobalConfigProxy\\n    /// @return globalConfigLib_ The address of the GlobalConfigLib target\\n    function getGlobalConfigLib() public view returns (address globalConfigLib_) {\\n        assembly {\\n            globalConfigLib_ := sload(EIP_1967_SLOT)\\n        }\\n\\n        return globalConfigLib_;\\n    }\\n}\\n\",\"keccak256\":\"0x289c0e5392e8aa01026c2f03ec28f9e17bb4356096dccac0e987ade3e6ff2be1\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/interfaces/IGlobalConfig1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGlobalConfig1 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Each interface should inherit the previous interface,\\n/// e.g., `IGlobalConfig2 is IGlobalConfig1`\\ninterface IGlobalConfig1 {\\n    function isValidRedeemSharesCall(\\n        address _vaultProxy,\\n        address _recipientToValidate,\\n        uint256 _sharesAmountToValidate,\\n        address _redeemContract,\\n        bytes4 _redeemSelector,\\n        bytes calldata _redeemData\\n    ) external view returns (bool isValid_);\\n}\\n\",\"keccak256\":\"0x7b643513fd8e1a3aadc476536785a925fb7c032c21e385e69e562abff531a646\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/interfaces/IGlobalConfigVaultAccessGetter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IGlobalConfigVaultAccessGetter Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Vault access getters related to VaultLib from v2 to present\\ninterface IGlobalConfigVaultAccessGetter {\\n    function getAccessor() external view returns (address);\\n}\\n\",\"keccak256\":\"0x497de1f259a8425e22c23e90fa8d04e3f06d99b5fd8c33e5daf86edaf34f2a6c\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/utils/GlobalConfigProxyConstants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title GlobalConfigProxyConstants Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Constant values used in GlobalConfig proxy-related contracts\\nabstract contract GlobalConfigProxyConstants {\\n    // `bytes32(keccak256('mln.proxiable.globalConfigLib'))`\\n    bytes32\\n        internal constant EIP_1822_PROXIABLE_UUID = 0xf25d88d51901d7fabc9924b03f4c2fe4300e6fe1aae4b5134c0a90b68cd8e81c;\\n    // `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`\\n    bytes32\\n        internal constant EIP_1967_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n}\\n\",\"keccak256\":\"0x3972ac12c916298b6d33d8cf82c8fcfa96fd808599364e7ca4eff8bce774bbce\",\"license\":\"GPL-3.0\"},\"contracts/persistent/global-config/utils/ProxiableGlobalConfigLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./GlobalConfigProxyConstants.sol\\\";\\n\\n/// @title ProxiableGlobalConfigLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract that defines the upgrade behavior for GlobalConfigLib instances\\n/// @dev The recommended implementation of the target of a proxy according to EIP-1822 and EIP-1967\\n/// See: https://eips.ethereum.org/EIPS/eip-1822\\n/// See: https://eips.ethereum.org/EIPS/eip-1967\\nabstract contract ProxiableGlobalConfigLib is GlobalConfigProxyConstants {\\n    /// @dev Updates the target of the proxy to be the contract at _nextGlobalConfigLib\\n    function __updateCodeAddress(address _nextGlobalConfigLib) internal {\\n        require(\\n            ProxiableGlobalConfigLib(_nextGlobalConfigLib).proxiableUUID() ==\\n                bytes32(EIP_1822_PROXIABLE_UUID),\\n            \\\"__updateCodeAddress: _nextGlobalConfigLib not compatible\\\"\\n        );\\n        assembly {\\n            sstore(EIP_1967_SLOT, _nextGlobalConfigLib)\\n        }\\n    }\\n\\n    /// @notice Returns a unique bytes32 hash for GlobalConfigLib instances\\n    /// @return uuid_ The bytes32 hash representing the UUID\\n    function proxiableUUID() public pure returns (bytes32 uuid_) {\\n        return EIP_1822_PROXIABLE_UUID;\\n    }\\n}\\n\",\"keccak256\":\"0x41386d6e4b676c73f461c12bef0bb01267a44b28bf8d8591269589c9a763daeb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516107d33803806107d38339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b031661076c61006760003980610420525061076c6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806319ab453c1461006757806343233f011461008f57806352d1902d146100b55780635d4755dc146100cf5780639528ee1614610188578063ebb3d589146101ac575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b03166101b4565b005b61008d600480360360208110156100a557600080fd5b50356001600160a01b031661027b565b6100bd610375565b60408051918252519081900360200190f35b610174600480360360c08110156100e557600080fd5b6001600160a01b0382358116926020810135821692604082013592606083013516916001600160e01b03196080820135169181019060c0810160a082013564010000000081111561013557600080fd5b82018360208201111561014757600080fd5b8035906020019184600183028401116401000000008311171561016957600080fd5b509092509050610399565b604080519115158252519081900360200190f35b6101906105b1565b604080516001600160a01b039092168252519081900360200190f35b6101906105d6565b60006101be6105d6565b6001600160a01b031614610219576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790557fce6de52b779ce41beea76a6e7a997211f0006af21ed2e2924caa5bdc92dac31861025d6105b1565b604080516001600160a01b039092168252519081900360200190a150565b6102836105d6565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bb57600080fd5b505afa1580156102cf573d6000803e3d6000fd5b505050506040513d60208110156102e557600080fd5b50516001600160a01b0316331461032d5760405162461bcd60e51b81526004018080602001828103825260308152602001806107076030913960400191505060405180910390fd5b610336816105e5565b604080516001600160a01b038316815290517fce6de52b779ce41beea76a6e7a997211f0006af21ed2e2924caa5bdc92dac3189181900360200190a150565b7ff25d88d51901d7fabc9924b03f4c2fe4300e6fe1aae4b5134c0a90b68cd8e81c90565b6000806103a46105d6565b6001600160a01b0316633d7c74f88a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d602081101561041a57600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690821614156105a057886001600160a01b0316635a53e3486040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d60208110156104b657600080fd5b50516001600160a01b038781169116146104d45760009150506105a6565b6001600160e01b03198516633462fcc160e01b148061050357506001600160e01b03198516636af8e7eb60e01b145b6105115760009150506105a6565b6000808585604081101561052457600080fd5b506001600160a01b0381358116935060209091013591508a1661aaaa148015906105605750816001600160a01b03168a6001600160a01b031614155b1561057157600093505050506105a6565b60011989148015906105835750808914155b1561059457600093505050506105a6565b600193505050506105a6565b60009150505b979650505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6000546001600160a01b031690565b7ff25d88d51901d7fabc9924b03f4c2fe4300e6fe1aae4b5134c0a90b68cd8e81c60001b816001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d602081101561066c57600080fd5b5051146106aa5760405162461bcd60e51b81526004018080602001828103825260388152602001806106cf6038913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe5f5f757064617465436f6465416464726573733a205f6e657874476c6f62616c436f6e6669674c6962206e6f7420636f6d70617469626c654f6e6c79207468652044697370617463686572206f776e65722063616e2063616c6c20746869732066756e6374696f6ea2646970667358221220fd1b41d778213e42de1a00c83f782661f7db32222f6e9fc354b73fb7b3ea991164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806319ab453c1461006757806343233f011461008f57806352d1902d146100b55780635d4755dc146100cf5780639528ee1614610188578063ebb3d589146101ac575b600080fd5b61008d6004803603602081101561007d57600080fd5b50356001600160a01b03166101b4565b005b61008d600480360360208110156100a557600080fd5b50356001600160a01b031661027b565b6100bd610375565b60408051918252519081900360200190f35b610174600480360360c08110156100e557600080fd5b6001600160a01b0382358116926020810135821692604082013592606083013516916001600160e01b03196080820135169181019060c0810160a082013564010000000081111561013557600080fd5b82018360208201111561014757600080fd5b8035906020019184600183028401116401000000008311171561016957600080fd5b509092509050610399565b604080519115158252519081900360200190f35b6101906105b1565b604080516001600160a01b039092168252519081900360200190f35b6101906105d6565b60006101be6105d6565b6001600160a01b031614610219576040805162461bcd60e51b815260206004820152601f60248201527f696e69743a2050726f787920616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b0383161790557fce6de52b779ce41beea76a6e7a997211f0006af21ed2e2924caa5bdc92dac31861025d6105b1565b604080516001600160a01b039092168252519081900360200190a150565b6102836105d6565b6001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156102bb57600080fd5b505afa1580156102cf573d6000803e3d6000fd5b505050506040513d60208110156102e557600080fd5b50516001600160a01b0316331461032d5760405162461bcd60e51b81526004018080602001828103825260308152602001806107076030913960400191505060405180910390fd5b610336816105e5565b604080516001600160a01b038316815290517fce6de52b779ce41beea76a6e7a997211f0006af21ed2e2924caa5bdc92dac3189181900360200190a150565b7ff25d88d51901d7fabc9924b03f4c2fe4300e6fe1aae4b5134c0a90b68cd8e81c90565b6000806103a46105d6565b6001600160a01b0316633d7c74f88a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156103f057600080fd5b505afa158015610404573d6000803e3d6000fd5b505050506040513d602081101561041a57600080fd5b505190507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811690821614156105a057886001600160a01b0316635a53e3486040518163ffffffff1660e01b815260040160206040518083038186803b15801561048c57600080fd5b505afa1580156104a0573d6000803e3d6000fd5b505050506040513d60208110156104b657600080fd5b50516001600160a01b038781169116146104d45760009150506105a6565b6001600160e01b03198516633462fcc160e01b148061050357506001600160e01b03198516636af8e7eb60e01b145b6105115760009150506105a6565b6000808585604081101561052457600080fd5b506001600160a01b0381358116935060209091013591508a1661aaaa148015906105605750816001600160a01b03168a6001600160a01b031614155b1561057157600093505050506105a6565b60011989148015906105835750808914155b1561059457600093505050506105a6565b600193505050506105a6565b60009150505b979650505050505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b6000546001600160a01b031690565b7ff25d88d51901d7fabc9924b03f4c2fe4300e6fe1aae4b5134c0a90b68cd8e81c60001b816001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561064257600080fd5b505afa158015610656573d6000803e3d6000fd5b505050506040513d602081101561066c57600080fd5b5051146106aa5760405162461bcd60e51b81526004018080602001828103825260388152602001806106cf6038913960400191505060405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5556fe5f5f757064617465436f6465416464726573733a205f6e657874476c6f62616c436f6e6669674c6962206e6f7420636f6d70617469626c654f6e6c79207468652044697370617463686572206f776e65722063616e2063616c6c20746869732066756e6374696f6ea2646970667358221220fd1b41d778213e42de1a00c83f782661f7db32222f6e9fc354b73fb7b3ea991164736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Only supports releases v4 and higher",
    "kind": "dev",
    "methods": {
      "getDispatcher()": {
        "returns": {
          "dispatcher_": "The `dispatcher` variable value"
        }
      },
      "getGlobalConfigLib()": {
        "returns": {
          "globalConfigLib_": "The address of the GlobalConfigLib target"
        }
      },
      "init(address)": {
        "details": "Serves as a pseudo-constructor",
        "params": {
          "_dispatcher": "The Dispatcher contract"
        }
      },
      "isValidRedeemSharesCall(address,address,uint256,address,bytes4,bytes)": {
        "details": "Use  NO_VALIDATION_ constants to skip optional validation of recipient and/or amount",
        "params": {
          "_recipientToValidate": "The intended recipient of the assets received from the redemption",
          "_redeemContract": "The contract to call",
          "_redeemData": "The encoded params to call",
          "_redeemSelector": "The selector to call",
          "_sharesAmountToValidate": "The intended amount of shares to redeem",
          "_vaultProxy": "The VaultProxy (shares token)"
        },
        "returns": {
          "isValid_": "True if valid"
        }
      },
      "proxiableUUID()": {
        "returns": {
          "uuid_": "The bytes32 hash representing the UUID"
        }
      },
      "setGlobalConfigLib(address)": {
        "details": "This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextGlobalConfigLib from being the same as the current GlobalConfigLib",
        "params": {
          "_nextGlobalConfigLib": "The address to set as the GlobalConfigLib"
        }
      }
    },
    "title": "GlobalConfigLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDispatcher()": {
        "notice": "Gets the `dispatcher` variable"
      },
      "getGlobalConfigLib()": {
        "notice": "Gets the GlobalConfigLib target for the GlobalConfigProxy"
      },
      "init(address)": {
        "notice": "Initializes the GlobalConfigProxy with core configuration"
      },
      "isValidRedeemSharesCall(address,address,uint256,address,bytes4,bytes)": {
        "notice": "Validates whether a call to redeem shares is valid for the shares version"
      },
      "proxiableUUID()": {
        "notice": "Returns a unique bytes32 hash for GlobalConfigLib instances"
      },
      "setGlobalConfigLib(address)": {
        "notice": "Sets the GlobalConfigLib target for the GlobalConfigProxy"
      }
    },
    "notice": "The proxiable library contract for GlobalConfigProxy",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6399,
        "contract": "contracts/persistent/global-config/GlobalConfigLib.sol:GlobalConfigLib",
        "label": "dispatcher",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}