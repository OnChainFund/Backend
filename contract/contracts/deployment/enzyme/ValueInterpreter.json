{
  "address": "0x2D9caF49489B8Be0E0eF9f01C2d190C3B2e42998",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainlinkStaleRateThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "DerivativeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        }
      ],
      "name": "DerivativeRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevEthUsdAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "EthUsdAggregatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ChainlinkPriceFeedMixin.RateAsset",
          "name": "rateAsset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "PrimitiveAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        }
      ],
      "name": "PrimitiveRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "STALE_RATE_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeeds",
          "type": "address[]"
        }
      ],
      "name": "addDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeedMixin.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "name": "addPrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcCanonicalAssetValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_baseAssets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcCanonicalAssetsTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getAggregatorForPrimitive",
      "outputs": [
        {
          "internalType": "address",
          "name": "aggregator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUsdAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "ethUsdAggregator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        }
      ],
      "name": "getPriceFeedForDerivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "priceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getRateAssetForPrimitive",
      "outputs": [
        {
          "internalType": "enum ChainlinkPriceFeedMixin.RateAsset",
          "name": "rateAsset_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaleRateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staleRateThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getUnitForPrimitive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedDerivativeAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedPrimitiveAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        }
      ],
      "name": "removeDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        }
      ],
      "name": "removePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "setEthUsdAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "staleRateThreshold",
          "type": "uint256"
        }
      ],
      "name": "setStaleRateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_priceFeeds",
          "type": "address[]"
        }
      ],
      "name": "updateDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeedMixin.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "name": "updatePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x029a3ce8c45a92e271b0263ad6debe4a8cadb45ea98414c2de5baa01c8984976",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0x2D9caF49489B8Be0E0eF9f01C2d190C3B2e42998",
    "transactionIndex": 0,
    "gasUsed": "2448431",
    "logsBloom": "0x
    "blockHash": "0x4ce80342b2b2f1664b5180aeaaea2c93672dd2ee5d21d6980cf4727321a7202a",
    "transactionHash": "0x029a3ce8c45a92e271b0263ad6debe4a8cadb45ea98414c2de5baa01c8984976",
    "logs": [],
    "blockNumber": 11761500,
    "cumulativeGasUsed": "2448431",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f",
    "0x6cEeB8fec16F7276F57ACF70C14ecA6008d3DDD4",
    90000
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainlinkStaleRateThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"DerivativeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"DerivativeRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEthUsdAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"PrimitiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"PrimitiveRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"STALE_RATE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"}],\"name\":\"addDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"name\":\"addPrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcCanonicalAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_baseAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcCanonicalAssetsTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getAggregatorForPrimitive\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"aggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdAggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"}],\"name\":\"getPriceFeedForDerivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getRateAssetForPrimitive\",\"outputs\":[{\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset\",\"name\":\"rateAsset_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getUnitForPrimitive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedDerivativeAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedPrimitiveAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"}],\"name\":\"removeDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"setEthUsdAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"setStaleRateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeeds\",\"type\":\"address[]\"}],\"name\":\"updateDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeedMixin.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"name\":\"updatePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addDerivatives(address[],address[])\":{\"params\":{\"_derivatives\":\"The derivatives to add\",\"_priceFeeds\":\"The ordered price feeds corresponding to the list of _derivatives\"}},\"addPrimitives(address[],address[],uint8[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to add\",\"_rateAssets\":\"The ordered rate assets corresponding to the list of _primitives\"}},\"calcCanonicalAssetValue(address,uint256,address)\":{\"details\":\"Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state. See also __calcPrimitiveToDerivativeValue() for important notes regarding a derivative _quoteAsset.\",\"params\":{\"_amount\":\"The amount of the _baseAsset to convert\",\"_baseAsset\":\"The asset from which to convert\",\"_quoteAsset\":\"The asset to which to convert\"},\"returns\":{\"value_\":\"The equivalent quantity in the _quoteAsset\"}},\"calcCanonicalAssetsTotalValue(address[],uint256[],address)\":{\"details\":\"Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state. Does not handle a derivative quote asset.\",\"params\":{\"_amounts\":\"The amounts of the _baseAssets to convert\",\"_baseAssets\":\"The assets to convert\",\"_quoteAsset\":\"The asset to which to convert\"},\"returns\":{\"value_\":\"The sum value of _baseAssets, denominated in the _quoteAsset\"}},\"getAggregatorForPrimitive(address)\":{\"params\":{\"_primitive\":\"The primitive asset for which to get the aggregator value\"},\"returns\":{\"aggregator_\":\"The aggregator address\"}},\"getEthUsdAggregator()\":{\"returns\":{\"ethUsdAggregator_\":\"The `ethUsdAggregator` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getPriceFeedForDerivative(address)\":{\"returns\":{\"priceFeed_\":\"The price feed contract address\"}},\"getRateAssetForPrimitive(address)\":{\"details\":\"This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit\",\"returns\":{\"rateAsset_\":\"The rateAsset variable value\"}},\"getStaleRateThreshold()\":{\"returns\":{\"staleRateThreshold_\":\"The `STALE_RATE_THRESHOLD` value\"}},\"getUnitForPrimitive(address)\":{\"returns\":{\"unit_\":\"The unit variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is a supported asset\"}},\"isSupportedDerivativeAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is a supported derivative\"}},\"isSupportedPrimitiveAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is a supported primitive\"}},\"removeDerivatives(address[])\":{\"params\":{\"_derivatives\":\"The derivatives to remove\"}},\"removePrimitives(address[])\":{\"params\":{\"_primitives\":\"The primitives to remove\"}},\"setEthUsdAggregator(address)\":{\"params\":{\"_nextEthUsdAggregator\":\"The `ehUsdAggregator` value to set\"}},\"updateDerivatives(address[],address[])\":{\"params\":{\"_derivatives\":\"The derivatives to update\",\"_priceFeeds\":\"The ordered price feeds corresponding to the list of _derivatives\"}},\"updatePrimitives(address[],address[],uint8[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to update\",\"_rateAssets\":\"The ordered rate assets corresponding to the list of _primitives\"}}},\"title\":\"ValueInterpreter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDerivatives(address[],address[])\":{\"notice\":\"Adds a list of derivatives with the given price feed values\"},\"addPrimitives(address[],address[],uint8[])\":{\"notice\":\"Adds a list of primitives with the given aggregator and rateAsset values\"},\"calcCanonicalAssetValue(address,uint256,address)\":{\"notice\":\"Calculates the value of a given amount of one asset in terms of another asset\"},\"calcCanonicalAssetsTotalValue(address[],uint256[],address)\":{\"notice\":\"Calculates the total value of given amounts of assets in a single quote asset\"},\"getAggregatorForPrimitive(address)\":{\"notice\":\"Gets the aggregator for a primitive\"},\"getEthUsdAggregator()\":{\"notice\":\"Gets the `ethUsdAggregator` variable value\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getPriceFeedForDerivative(address)\":{\"notice\":\"Gets the registered price feed for a given derivative\"},\"getRateAssetForPrimitive(address)\":{\"notice\":\"Gets the rateAsset variable value for a primitive\"},\"getStaleRateThreshold()\":{\"notice\":\"Gets the `STALE_RATE_THRESHOLD` variable value\"},\"getUnitForPrimitive(address)\":{\"notice\":\"Gets the unit variable value for a primitive\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable value\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks whether an asset is a supported asset\"},\"isSupportedDerivativeAsset(address)\":{\"notice\":\"Checks whether an asset is a supported derivative\"},\"isSupportedPrimitiveAsset(address)\":{\"notice\":\"Checks whether an asset is a supported primitive\"},\"removeDerivatives(address[])\":{\"notice\":\"Removes a list of derivatives\"},\"removePrimitives(address[])\":{\"notice\":\"Removes a list of primitives from the feed\"},\"setEthUsdAggregator(address)\":{\"notice\":\"Sets the `ehUsdAggregator` variable value\"},\"updateDerivatives(address[],address[])\":{\"notice\":\"Updates a list of derivatives with the given price feed values\"},\"updatePrimitives(address[],address[],uint8[])\":{\"notice\":\"Updates a list of primitives with the given aggregator and rateAsset values\"}},\"notice\":\"Interprets price feeds to provide covert value between asset pairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol\":\"ValueInterpreter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b901b81b3a4ef3d30ef9b4a1fa7fdd6526dfacd66e9971d1f988c2b63334314\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/AggregatedDerivativePriceFeedMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IDerivativePriceFeed.sol\\\";\\n\\n/// @title AggregatedDerivativePriceFeedMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Aggregates multiple derivative price feeds (e.g., Compound, Chai) and dispatches\\n/// rate requests to the appropriate feed\\nabstract contract AggregatedDerivativePriceFeedMixin {\\n    event DerivativeAdded(address indexed derivative, address priceFeed);\\n\\n    event DerivativeRemoved(address indexed derivative);\\n\\n    mapping(address => address) private derivativeToPriceFeed;\\n\\n    /// @notice Gets the rates for 1 unit of the derivative to its underlying assets\\n    /// @param _derivative The derivative for which to get the rates\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The rates for the _derivative to the underlyings_\\n    function __calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        internal\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        address derivativePriceFeed = getPriceFeedForDerivative(_derivative);\\n        require(\\n            derivativePriceFeed != address(0),\\n            \\\"calcUnderlyingValues: _derivative is not supported\\\"\\n        );\\n\\n        return\\n            IDerivativePriceFeed(derivativePriceFeed).calcUnderlyingValues(\\n                _derivative,\\n                _derivativeAmount\\n            );\\n    }\\n\\n    //////////////////////////\\n    // DERIVATIVES REGISTRY //\\n    //////////////////////////\\n\\n    /// @notice Adds a list of derivatives with the given price feed values\\n    /// @param _derivatives The derivatives to add\\n    /// @param _priceFeeds The ordered price feeds corresponding to the list of _derivatives\\n    function __addDerivatives(address[] memory _derivatives, address[] memory _priceFeeds)\\n        internal\\n    {\\n        require(\\n            _derivatives.length == _priceFeeds.length,\\n            \\\"__addDerivatives: Unequal _derivatives and _priceFeeds array lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _derivatives.length; i++) {\\n            require(\\n                getPriceFeedForDerivative(_derivatives[i]) == address(0),\\n                \\\"__addDerivatives: Already added\\\"\\n            );\\n\\n            __validateDerivativePriceFeed(_derivatives[i], _priceFeeds[i]);\\n\\n            derivativeToPriceFeed[_derivatives[i]] = _priceFeeds[i];\\n\\n            emit DerivativeAdded(_derivatives[i], _priceFeeds[i]);\\n        }\\n    }\\n\\n    /// @notice Removes a list of derivatives\\n    /// @param _derivatives The derivatives to remove\\n    function __removeDerivatives(address[] memory _derivatives) internal {\\n        for (uint256 i = 0; i < _derivatives.length; i++) {\\n            require(\\n                getPriceFeedForDerivative(_derivatives[i]) != address(0),\\n                \\\"removeDerivatives: Derivative not yet added\\\"\\n            );\\n\\n            delete derivativeToPriceFeed[_derivatives[i]];\\n\\n            emit DerivativeRemoved(_derivatives[i]);\\n        }\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to validate a derivative price feed\\n    function __validateDerivativePriceFeed(address _derivative, address _priceFeed) private view {\\n        require(\\n            IDerivativePriceFeed(_priceFeed).isSupportedAsset(_derivative),\\n            \\\"__validateDerivativePriceFeed: Unsupported derivative\\\"\\n        );\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the registered price feed for a given derivative\\n    /// @return priceFeed_ The price feed contract address\\n    function getPriceFeedForDerivative(address _derivative)\\n        public\\n        view\\n        returns (address priceFeed_)\\n    {\\n        return derivativeToPriceFeed[_derivative];\\n    }\\n}\\n\",\"keccak256\":\"0x85d2ac39834dae7feb04f0e37317a38b8abeb0f950692fbc9d29078c52cd8d52\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeedMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../interfaces/IChainlinkAggregator.sol\\\";\\n\\n/// @title ChainlinkPriceFeedMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A price feed that uses Chainlink oracles as price sources\\nabstract contract ChainlinkPriceFeedMixin {\\n    using SafeMath for uint256;\\n\\n    event EthUsdAggregatorSet(address prevEthUsdAggregator, address nextEthUsdAggregator);\\n\\n    event PrimitiveAdded(\\n        address indexed primitive,\\n        address aggregator,\\n        RateAsset rateAsset,\\n        uint256 unit\\n    );\\n\\n    event PrimitiveRemoved(address indexed primitive);\\n\\n    enum RateAsset {ETH, USD}\\n\\n    struct AggregatorInfo {\\n        address aggregator;\\n        RateAsset rateAsset;\\n    }\\n\\n    uint256 private constant ETH_UNIT = 10**18;\\n\\n    uint256 public STALE_RATE_THRESHOLD;\\n\\n    //uint256 private immutable STALE_RATE_THRESHOLD;\\n    address private immutable WETH_TOKEN;\\n\\n    address private ethUsdAggregator;\\n    mapping(address => AggregatorInfo) private primitiveToAggregatorInfo;\\n    mapping(address => uint256) private primitiveToUnit;\\n\\n    constructor(address _wethToken, uint256 _staleRateThreshold) public {\\n        STALE_RATE_THRESHOLD = _staleRateThreshold;\\n        WETH_TOKEN = _wethToken;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\\n    /// @param _baseAsset The base asset\\n    /// @param _baseAssetAmount The base asset amount to convert\\n    /// @param _quoteAsset The quote asset\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\n    function __calcCanonicalValue(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        address _quoteAsset\\n    ) internal view returns (uint256 quoteAssetAmount_) {\\n        // Case where _baseAsset == _quoteAsset is handled by ValueInterpreter\\n\\n        int256 baseAssetRate = __getLatestRateData(_baseAsset);\\n        require(baseAssetRate > 0, \\\"__calcCanonicalValue: Invalid base asset rate\\\");\\n\\n        int256 quoteAssetRate = __getLatestRateData(_quoteAsset);\\n        require(quoteAssetRate > 0, \\\"__calcCanonicalValue: Invalid quote asset rate\\\");\\n\\n        return\\n            __calcConversionAmount(\\n                _baseAsset,\\n                _baseAssetAmount,\\n                uint256(baseAssetRate),\\n                _quoteAsset,\\n                uint256(quoteAssetRate)\\n            );\\n    }\\n\\n    /// @dev Helper to set the `ethUsdAggregator` value\\n    function __setEthUsdAggregator(address _nextEthUsdAggregator) internal {\\n        address prevEthUsdAggregator = getEthUsdAggregator();\\n        require(\\n            _nextEthUsdAggregator != prevEthUsdAggregator,\\n            \\\"__setEthUsdAggregator: Value already set\\\"\\n        );\\n\\n        __validateAggregator(_nextEthUsdAggregator);\\n\\n        ethUsdAggregator = _nextEthUsdAggregator;\\n\\n        emit EthUsdAggregatorSet(prevEthUsdAggregator, _nextEthUsdAggregator);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to convert an amount from a _baseAsset to a _quoteAsset\\n    function __calcConversionAmount(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetRate,\\n        address _quoteAsset,\\n        uint256 _quoteAssetRate\\n    ) private view returns (uint256 quoteAssetAmount_) {\\n        RateAsset baseAssetRateAsset = getRateAssetForPrimitive(_baseAsset);\\n        RateAsset quoteAssetRateAsset = getRateAssetForPrimitive(_quoteAsset);\\n        uint256 baseAssetUnit = getUnitForPrimitive(_baseAsset);\\n        uint256 quoteAssetUnit = getUnitForPrimitive(_quoteAsset);\\n\\n        // If rates are both in ETH or both in USD\\n        if (baseAssetRateAsset == quoteAssetRateAsset) {\\n            return\\n                __calcConversionAmountSameRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate\\n                );\\n        }\\n\\n        (, int256 ethPerUsdRate, , uint256 ethPerUsdRateLastUpdatedAt, ) = IChainlinkAggregator(\\n            getEthUsdAggregator()\\n        )\\n            .latestRoundData();\\n        require(ethPerUsdRate > 0, \\\"__calcConversionAmount: Bad ethUsd rate\\\");\\n        __validateRateIsNotStale(ethPerUsdRateLastUpdatedAt);\\n\\n        // If _baseAsset's rate is in ETH and _quoteAsset's rate is in USD\\n        if (baseAssetRateAsset == RateAsset.ETH) {\\n            return\\n                __calcConversionAmountEthRateAssetToUsdRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate,\\n                    uint256(ethPerUsdRate)\\n                );\\n        }\\n\\n        // If _baseAsset's rate is in USD and _quoteAsset's rate is in ETH\\n        return\\n            __calcConversionAmountUsdRateAssetToEthRateAsset(\\n                _baseAssetAmount,\\n                baseAssetUnit,\\n                _baseAssetRate,\\n                quoteAssetUnit,\\n                _quoteAssetRate,\\n                uint256(ethPerUsdRate)\\n            );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has an ETH rate and the quote asset has a USD rate\\n    function __calcConversionAmountEthRateAssetToUsdRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow.\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_ethPerUsdRate).div(\\n            ETH_UNIT\\n        );\\n\\n        return intermediateStep.mul(_quoteAssetUnit).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to convert amounts where base and quote assets both have ETH rates or both have USD rates\\n    function __calcConversionAmountSameRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        return\\n            _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n                _baseAssetUnit.mul(_quoteAssetRate)\\n            );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has a USD rate and the quote asset has an ETH rate\\n    function __calcConversionAmountUsdRateAssetToEthRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n            _ethPerUsdRate\\n        );\\n\\n        return intermediateStep.mul(ETH_UNIT).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to get the latest rate for a given primitive\\n    function __getLatestRateData(address _primitive) private view returns (int256 rate_) {\\n        if (_primitive == getWethToken()) {\\n            return int256(ETH_UNIT);\\n        }\\n\\n        address aggregator = getAggregatorForPrimitive(_primitive);\\n        require(aggregator != address(0), \\\"__getLatestRateData: Primitive does not exist\\\");\\n\\n        uint256 rateUpdatedAt;\\n        (, rate_, , rateUpdatedAt, ) = IChainlinkAggregator(aggregator).latestRoundData();\\n        __validateRateIsNotStale(rateUpdatedAt);\\n\\n        return rate_;\\n    }\\n\\n    /// @dev Helper to validate that a rate is not from a round considered to be stale\\n    function __validateRateIsNotStale(uint256 _latestUpdatedAt) private view {\\n        require(\\n            _latestUpdatedAt >= block.timestamp.sub(getStaleRateThreshold()),\\n            \\\"__validateRateIsNotStale: Stale rate detected\\\"\\n        );\\n    }\\n\\n    /////////////////////////\\n    // PRIMITIVES REGISTRY //\\n    /////////////////////////\\n\\n    /// @notice Adds a list of primitives with the given aggregator and rateAsset values\\n    /// @param _primitives The primitives to add\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\n    function __addPrimitives(\\n        address[] calldata _primitives,\\n        address[] calldata _aggregators,\\n        RateAsset[] calldata _rateAssets\\n    ) internal {\\n        require(\\n            _primitives.length == _aggregators.length,\\n            \\\"__addPrimitives: Unequal _primitives and _aggregators array lengths\\\"\\n        );\\n        require(\\n            _primitives.length == _rateAssets.length,\\n            \\\"__addPrimitives: Unequal _primitives and _rateAssets array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            require(\\n                getAggregatorForPrimitive(_primitives[i]) == address(0),\\n                \\\"__addPrimitives: Value already set\\\"\\n            );\\n\\n            __validateAggregator(_aggregators[i]);\\n\\n            primitiveToAggregatorInfo[_primitives[i]] = AggregatorInfo({\\n                aggregator: _aggregators[i],\\n                rateAsset: _rateAssets[i]\\n            });\\n\\n            // Store the amount that makes up 1 unit given the asset's decimals\\n            uint256 unit = 10**uint256(ERC20(_primitives[i]).decimals());\\n            primitiveToUnit[_primitives[i]] = unit;\\n\\n            emit PrimitiveAdded(_primitives[i], _aggregators[i], _rateAssets[i], unit);\\n        }\\n    }\\n\\n    /// @notice Removes a list of primitives from the feed\\n    /// @param _primitives The primitives to remove\\n    function __removePrimitives(address[] calldata _primitives) internal {\\n        for (uint256 i; i < _primitives.length; i++) {\\n            require(\\n                getAggregatorForPrimitive(_primitives[i]) != address(0),\\n                \\\"__removePrimitives: Primitive not yet added\\\"\\n            );\\n\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\n            delete primitiveToUnit[_primitives[i]];\\n\\n            emit PrimitiveRemoved(_primitives[i]);\\n        }\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to validate an aggregator by checking its return values for the expected interface\\n    function __validateAggregator(address _aggregator) private view {\\n        (, int256 answer, , uint256 updatedAt, ) = IChainlinkAggregator(_aggregator)\\n            .latestRoundData();\\n        require(answer > 0, \\\"__validateAggregator: No rate detected\\\");\\n        __validateRateIsNotStale(updatedAt);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the aggregator for a primitive\\n    /// @param _primitive The primitive asset for which to get the aggregator value\\n    /// @return aggregator_ The aggregator address\\n    function getAggregatorForPrimitive(address _primitive)\\n        public\\n        view\\n        returns (address aggregator_)\\n    {\\n        return primitiveToAggregatorInfo[_primitive].aggregator;\\n    }\\n\\n    /// @notice Gets the `ethUsdAggregator` variable value\\n    /// @return ethUsdAggregator_ The `ethUsdAggregator` variable value\\n    function getEthUsdAggregator() public view returns (address ethUsdAggregator_) {\\n        return ethUsdAggregator;\\n    }\\n\\n    /// @notice Gets the rateAsset variable value for a primitive\\n    /// @return rateAsset_ The rateAsset variable value\\n    /// @dev This isn't strictly necessary as WETH_TOKEN will be undefined and thus\\n    /// the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the\\n    /// behavior more explicit\\n    function getRateAssetForPrimitive(address _primitive)\\n        public\\n        view\\n        returns (RateAsset rateAsset_)\\n    {\\n        if (_primitive == getWethToken()) {\\n            return RateAsset.ETH;\\n        }\\n\\n        return primitiveToAggregatorInfo[_primitive].rateAsset;\\n    }\\n\\n    /// @notice Gets the `STALE_RATE_THRESHOLD` variable value\\n    /// @return staleRateThreshold_ The `STALE_RATE_THRESHOLD` value\\n    function getStaleRateThreshold() public view returns (uint256 staleRateThreshold_) {\\n        return STALE_RATE_THRESHOLD;\\n    }\\n\\n    /// @notice Gets the unit variable value for a primitive\\n    /// @return unit_ The unit variable value\\n    function getUnitForPrimitive(address _primitive) public view returns (uint256 unit_) {\\n        if (_primitive == getWethToken()) {\\n            return ETH_UNIT;\\n        }\\n\\n        return primitiveToUnit[_primitive];\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable value\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() public view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0xbaccd58677fa6ac04251e2f12a6f632b6b845d0963fcdd4603b4cd53dd772841\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n\\n    function isSupportedDerivativeAsset(address) external view returns (bool);\\n\\n    function isSupportedPrimitiveAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6838a22b0357f3c5f437c1e54b8f63c7df42b41e3b25d56c5017eb75a857a794\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../../utils/MathHelpers.sol\\\";\\nimport \\\"../price-feeds/derivatives/AggregatedDerivativePriceFeedMixin.sol\\\";\\nimport \\\"../price-feeds/derivatives/IDerivativePriceFeed.sol\\\";\\nimport \\\"../price-feeds/primitives/ChainlinkPriceFeedMixin.sol\\\";\\nimport \\\"./IValueInterpreter.sol\\\";\\n\\n/// @title ValueInterpreter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interprets price feeds to provide covert value between asset pairs\\ncontract ValueInterpreter is\\n    IValueInterpreter,\\n    FundDeployerOwnerMixin,\\n    AggregatedDerivativePriceFeedMixin,\\n    ChainlinkPriceFeedMixin,\\n    MathHelpers\\n{\\n    using SafeMath for uint256;\\n\\n    // Used to only tolerate a max rounding discrepancy of 0.01%\\n    // when converting values via an inverse rate\\n    uint256 private constant MIN_INVERSE_RATE_AMOUNT = 10000;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _wethToken,\\n        uint256 _chainlinkStaleRateThreshold\\n    )\\n        public\\n        FundDeployerOwnerMixin(_fundDeployer)\\n        ChainlinkPriceFeedMixin(_wethToken, _chainlinkStaleRateThreshold)\\n    {}\\n\\n    // self add\\n\\n    function setStaleRateThreshold(uint256 staleRateThreshold) public {\\n        STALE_RATE_THRESHOLD = staleRateThreshold;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the total value of given amounts of assets in a single quote asset\\n    /// @param _baseAssets The assets to convert\\n    /// @param _amounts The amounts of the _baseAssets to convert\\n    /// @param _quoteAsset The asset to which to convert\\n    /// @return value_ The sum value of _baseAssets, denominated in the _quoteAsset\\n    /// @dev Does not alter protocol state,\\n    /// but not a view because calls to price feeds can potentially update third party state.\\n    /// Does not handle a derivative quote asset.\\n    function calcCanonicalAssetsTotalValue(\\n        address[] memory _baseAssets,\\n        uint256[] memory _amounts,\\n        address _quoteAsset\\n    ) external override returns (uint256 value_) {\\n        require(\\n            _baseAssets.length == _amounts.length,\\n            \\\"calcCanonicalAssetsTotalValue: Arrays unequal lengths\\\"\\n        );\\n        require(\\n            isSupportedPrimitiveAsset(_quoteAsset),\\n            \\\"calcCanonicalAssetsTotalValue: Unsupported _quoteAsset\\\"\\n        );\\n\\n        for (uint256 i; i < _baseAssets.length; i++) {\\n            uint256 assetValue = __calcAssetValue(_baseAssets[i], _amounts[i], _quoteAsset);\\n            value_ = value_.add(assetValue);\\n        }\\n\\n        return value_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Calculates the value of a given amount of one asset in terms of another asset\\n    /// @param _baseAsset The asset from which to convert\\n    /// @param _amount The amount of the _baseAsset to convert\\n    /// @param _quoteAsset The asset to which to convert\\n    /// @return value_ The equivalent quantity in the _quoteAsset\\n    /// @dev Does not alter protocol state,\\n    /// but not a view because calls to price feeds can potentially update third party state.\\n    /// See also __calcPrimitiveToDerivativeValue() for important notes regarding a derivative _quoteAsset.\\n    function calcCanonicalAssetValue(\\n        address _baseAsset,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) external override returns (uint256 value_) {\\n        if (_baseAsset == _quoteAsset || _amount == 0) {\\n            return _amount;\\n        }\\n\\n        if (isSupportedPrimitiveAsset(_quoteAsset)) {\\n            return __calcAssetValue(_baseAsset, _amount, _quoteAsset);\\n        } else if (\\n            isSupportedDerivativeAsset(_quoteAsset) && isSupportedPrimitiveAsset(_baseAsset)\\n        ) {\\n            return __calcPrimitiveToDerivativeValue(_baseAsset, _amount, _quoteAsset);\\n        }\\n\\n        revert(\\\"calcCanonicalAssetValue: Unsupported conversion\\\");\\n    }\\n\\n    /// @notice Checks whether an asset is a supported asset\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported asset\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\n        return isSupportedPrimitiveAsset(_asset) || isSupportedDerivativeAsset(_asset);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to differentially calculate an asset value\\n    /// based on if it is a primitive or derivative asset.\\n    function __calcAssetValue(\\n        address _baseAsset,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) private returns (uint256 value_) {\\n        if (_baseAsset == _quoteAsset || _amount == 0) {\\n            return _amount;\\n        }\\n\\n        // Handle case that asset is a primitive\\n        if (isSupportedPrimitiveAsset(_baseAsset)) {\\n            return __calcCanonicalValue(_baseAsset, _amount, _quoteAsset);\\n        }\\n\\n        // Handle case that asset is a derivative\\n        address derivativePriceFeed = getPriceFeedForDerivative(_baseAsset);\\n        if (derivativePriceFeed != address(0)) {\\n            return __calcDerivativeValue(derivativePriceFeed, _baseAsset, _amount, _quoteAsset);\\n        }\\n\\n        revert(\\\"__calcAssetValue: Unsupported _baseAsset\\\");\\n    }\\n\\n    /// @dev Helper to calculate the value of a derivative in an arbitrary asset.\\n    /// Handles multiple underlying assets (e.g., Uniswap and Balancer pool tokens).\\n    /// Handles underlying assets that are also derivatives (e.g., a cDAI-ETH LP)\\n    function __calcDerivativeValue(\\n        address _derivativePriceFeed,\\n        address _derivative,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) private returns (uint256 value_) {\\n        (address[] memory underlyings, uint256[] memory underlyingAmounts) = IDerivativePriceFeed(\\n            _derivativePriceFeed\\n        )\\n            .calcUnderlyingValues(_derivative, _amount);\\n\\n        require(underlyings.length > 0, \\\"__calcDerivativeValue: No underlyings\\\");\\n        require(\\n            underlyings.length == underlyingAmounts.length,\\n            \\\"__calcDerivativeValue: Arrays unequal lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            uint256 underlyingValue = __calcAssetValue(\\n                underlyings[i],\\n                underlyingAmounts[i],\\n                _quoteAsset\\n            );\\n\\n            value_ = value_.add(underlyingValue);\\n        }\\n    }\\n\\n    /// @dev Helper to calculate the value of a primitive base asset in a derivative quote asset.\\n    /// Assumes that the _primitiveBaseAsset and _derivativeQuoteAsset have been validated as supported.\\n    /// Callers of this function should be aware of the following points, and take precautions as-needed,\\n    /// such as prohibiting a derivative quote asset:\\n    /// - The returned value will be slightly less the actual canonical value due to the conversion formula's\\n    /// handling of the intermediate inverse rate (see comments below).\\n    /// - If the assets involved have an extreme rate and/or have a low ERC20.decimals() value,\\n    /// the inverse rate might not be considered \\\"sufficient\\\", and will revert.\\n    function __calcPrimitiveToDerivativeValue(\\n        address _primitiveBaseAsset,\\n        uint256 _primitiveBaseAssetAmount,\\n        address _derivativeQuoteAsset\\n    ) private returns (uint256 value_) {\\n        uint256 derivativeUnit = 10**uint256(ERC20(_derivativeQuoteAsset).decimals());\\n\\n        address derivativePriceFeed = getPriceFeedForDerivative(_derivativeQuoteAsset);\\n        uint256 primitiveAmountForDerivativeUnit = __calcDerivativeValue(\\n            derivativePriceFeed,\\n            _derivativeQuoteAsset,\\n            derivativeUnit,\\n            _primitiveBaseAsset\\n        );\\n        // Only tolerate a max rounding discrepancy\\n        require(\\n            primitiveAmountForDerivativeUnit > MIN_INVERSE_RATE_AMOUNT,\\n            \\\"__calcPrimitiveToDerivativeValue: Insufficient rate\\\"\\n        );\\n\\n        // Adds `1` to primitiveAmountForDerivativeUnit so that the final return value is\\n        // slightly less than the actual value, which is congruent with how all other\\n        // asset conversions are floored in the protocol.\\n        return\\n            __calcRelativeQuantity(\\n                primitiveAmountForDerivativeUnit.add(1),\\n                derivativeUnit,\\n                _primitiveBaseAssetAmount\\n            );\\n    }\\n\\n    ////////////////////////////\\n    // PRIMITIVES (CHAINLINK) //\\n    ////////////////////////////\\n\\n    /// @notice Adds a list of primitives with the given aggregator and rateAsset values\\n    /// @param _primitives The primitives to add\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\n    function addPrimitives(\\n        address[] calldata _primitives,\\n        address[] calldata _aggregators,\\n        RateAsset[] calldata _rateAssets\\n    ) external onlyFundDeployerOwner {\\n        __addPrimitives(_primitives, _aggregators, _rateAssets);\\n    }\\n\\n    /// @notice Removes a list of primitives from the feed\\n    /// @param _primitives The primitives to remove\\n    function removePrimitives(address[] calldata _primitives) external onlyFundDeployerOwner {\\n        __removePrimitives(_primitives);\\n    }\\n\\n    /// @notice Sets the `ehUsdAggregator` variable value\\n    /// @param _nextEthUsdAggregator The `ehUsdAggregator` value to set\\n    function setEthUsdAggregator(address _nextEthUsdAggregator) external onlyFundDeployerOwner {\\n        __setEthUsdAggregator(_nextEthUsdAggregator);\\n    }\\n\\n    /// @notice Updates a list of primitives with the given aggregator and rateAsset values\\n    /// @param _primitives The primitives to update\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\n    function updatePrimitives(\\n        address[] calldata _primitives,\\n        address[] calldata _aggregators,\\n        RateAsset[] calldata _rateAssets\\n    ) external onlyFundDeployerOwner {\\n        __removePrimitives(_primitives);\\n        __addPrimitives(_primitives, _aggregators, _rateAssets);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Checks whether an asset is a supported primitive\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported primitive\\n    function isSupportedPrimitiveAsset(address _asset)\\n        public\\n        view\\n        override\\n        returns (bool isSupported_)\\n    {\\n        return _asset == getWethToken() || getAggregatorForPrimitive(_asset) != address(0);\\n    }\\n\\n    ////////////////////////////////////\\n    // DERIVATIVE PRICE FEED REGISTRY //\\n    ////////////////////////////////////\\n\\n    /// @notice Adds a list of derivatives with the given price feed values\\n    /// @param _derivatives The derivatives to add\\n    /// @param _priceFeeds The ordered price feeds corresponding to the list of _derivatives\\n    function addDerivatives(address[] calldata _derivatives, address[] calldata _priceFeeds)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        __addDerivatives(_derivatives, _priceFeeds);\\n    }\\n\\n    /// @notice Removes a list of derivatives\\n    /// @param _derivatives The derivatives to remove\\n    function removeDerivatives(address[] calldata _derivatives) external onlyFundDeployerOwner {\\n        __removeDerivatives(_derivatives);\\n    }\\n\\n    /// @notice Updates a list of derivatives with the given price feed values\\n    /// @param _derivatives The derivatives to update\\n    /// @param _priceFeeds The ordered price feeds corresponding to the list of _derivatives\\n    function updateDerivatives(address[] calldata _derivatives, address[] calldata _priceFeeds)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        __removeDerivatives(_derivatives);\\n        __addDerivatives(_derivatives, _priceFeeds);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Checks whether an asset is a supported derivative\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported derivative\\n    function isSupportedDerivativeAsset(address _asset)\\n        public\\n        view\\n        override\\n        returns (bool isSupported_)\\n    {\\n        return getPriceFeedForDerivative(_asset) != address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x3fbf3660176fa801e32f3496e02375ebbf481e0f1b286966934e10e0e5250deb\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IChainlinkAggregator Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IChainlinkAggregator {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80,\\n            int256,\\n            uint256,\\n            uint256,\\n            uint80\\n        );\\n}\\n\",\"keccak256\":\"0x8104db68d4edc00c86b29b366f4397cdbe7bd95bb9dc90f54140af4bae963788\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xd415583828581051080d575f058643f4975d7048fda0d1765122b260d9d14934\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/MathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title MathHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Helper functions for common math operations\\nabstract contract MathHelpers {\\n    using SafeMath for uint256;\\n\\n    /// @dev Calculates a proportional value relative to a known ratio.\\n    /// Caller is responsible as-necessary for:\\n    /// 1. validating _quantity1 to be non-zero\\n    /// 2. validating relativeQuantity2_ to be non-zero\\n    function __calcRelativeQuantity(\\n        uint256 _quantity1,\\n        uint256 _quantity2,\\n        uint256 _relativeQuantity1\\n    ) internal pure returns (uint256 relativeQuantity2_) {\\n        return _relativeQuantity1.mul(_quantity2).div(_quantity1);\\n    }\\n}\\n\",\"keccak256\":\"0xd17dd091fac148c7e428e026fec32b5af659764d5248ab0641f849b12a5add9d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002c0e38038062002c0e833981016040819052620000349162000079565b6001600160601b0319606093841b8116608052600191909155911b1660a05262000107565b80516200006681620000e2565b92915050565b80516200006681620000fc565b6000806000606084860312156200008f57600080fd5b60006200009d868662000059565b9350506020620000b08682870162000059565b9250506040620000c3868287016200006c565b9150509250925092565b60006001600160a01b03821662000066565b90565b620000ed81620000cd565b8114620000f957600080fd5b50565b620000ed81620000df565b60805160601c60a05160601c612ad862000136600039806103bf52508061056b52806106795250612ad86000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806397c0ac87116100c3578063b55433df1161007c578063b55433df14610290578063c496f8e814610298578063cf0399c8146102ab578063e106264f146102be578063e2dd0978146102d1578063e35e318e146102e45761014d565b806397c0ac87146102345780639be918e61461023c578063a98acadc1461024f578063ae6f52ad14610262578063b3d3af3b14610275578063b54fbdaa146102885761014d565b806368e81c6d1161011557806368e81c6d146101d85780636d3b9410146101eb57806374626f87146101fe578063787f256814610206578063893d20e8146102195780638f72b136146102215761014d565b806309157f951461015257806339cbb63c146101675780634c252f911461017a5780634c67e1061461019857806364b01dc1146101b8575b600080fd5b610165610160366004611e3f565b610304565b005b610165610175366004611c31565b610309565b6101826103bd565b60405161018f9190612775565b60405180910390f35b6101ab6101a6366004611ba3565b6103e1565b60405161018f91906129ad565b6101cb6101c6366004611b67565b610475565b60405161018f91906127e1565b6101826101e6366004611b67565b610494565b6101656101f9366004611c9f565b6104b2565b61018261050a565b6101ab610214366004611b67565b610519565b610182610567565b61016561022f366004611bf0565b6105ff565b610182610677565b6101cb61024a366004611b67565b61069b565b61016561025d366004611b67565b6106bb565b6101ab610270366004611da4565b6106ff565b610165610283366004611c31565b6107a5565b6101ab610819565b6101ab61081f565b6101cb6102a6366004611b67565b610825565b6101656102b9366004611c9f565b610854565b6101656102cc366004611bf0565b61088c565b6101826102df366004611b67565b6108ce565b6102f76102f2366004611b67565b6108ec565b60405161018f91906127ef565b600155565b610311610567565b6001600160a01b0316336001600160a01b03161461034a5760405162461bcd60e51b81526004016103419061282d565b60405180910390fd5b6103b78484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061093d92505050565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000816001600160a01b0316846001600160a01b03161480610401575082155b1561040d57508161046e565b61041682610825565b1561042d57610426848484610aca565b905061046e565b61043682610475565b8015610446575061044684610825565b1561045657610426848484610b57565b60405162461bcd60e51b81526004016103419061284d565b9392505050565b60008061048183610494565b6001600160a01b0316141590505b919050565b6001600160a01b039081166000908152602081905260409020541690565b6104ba610567565b6001600160a01b0316336001600160a01b0316146104ea5760405162461bcd60e51b81526004016103419061282d565b6104f48686610c31565b610502868686868686610d7d565b505050505050565b6002546001600160a01b031690565b60006105236103bd565b6001600160a01b0316826001600160a01b0316141561054b5750670de0b6b3a764000061048f565b506001600160a01b031660009081526004602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190611b85565b905090565b610607610567565b6001600160a01b0316336001600160a01b0316146106375760405162461bcd60e51b81526004016103419061282d565b6106738282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506110a292505050565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006106a682610825565b806106b557506106b582610475565b92915050565b6106c3610567565b6001600160a01b0316336001600160a01b0316146106f35760405162461bcd60e51b81526004016103419061282d565b6106fc8161118d565b50565b600082518451146107225760405162461bcd60e51b8152600401610341906128bd565b61072b82610825565b6107475760405162461bcd60e51b81526004016103419061280d565b60005b845181101561079d57600061078686838151811061076457fe5b602002602001015186848151811061077857fe5b602002602001015186610aca565b9050610792838261122d565b92505060010161074a565b509392505050565b6107ad610567565b6001600160a01b0316336001600160a01b0316146107dd5760405162461bcd60e51b81526004016103419061282d565b61034a8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506110a292505050565b60015490565b60015481565b600061082f6103bd565b6001600160a01b0316826001600160a01b031614806106b557506000610481836108ce565b61085c610567565b6001600160a01b0316336001600160a01b0316146104f45760405162461bcd60e51b81526004016103419061282d565b610894610567565b6001600160a01b0316336001600160a01b0316146108c45760405162461bcd60e51b81526004016103419061282d565b6106738282610c31565b6001600160a01b039081166000908152600360205260409020541690565b60006108f66103bd565b6001600160a01b0316826001600160a01b031614156109175750600061048f565b506001600160a01b0316600090815260036020526040902054600160a01b900460ff1690565b805182511461095e5760405162461bcd60e51b81526004016103419061297d565b60005b8251811015610ac55760006001600160a01b031661099184838151811061098457fe5b6020026020010151610494565b6001600160a01b0316146109b75760405162461bcd60e51b81526004016103419061290d565b6109e78382815181106109c657fe5b60200260200101518383815181106109da57fe5b6020026020010151611252565b8181815181106109f357fe5b6020026020010151600080858481518110610a0a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828181518110610a6257fe5b60200260200101516001600160a01b03167faa4ae250fb435bb4b31ed0b95822bc179fc6c5dd0c727c3ffe08d444025efd98838381518110610aa057fe5b6020026020010151604051610ab59190612775565b60405180910390a2600101610961565b505050565b6000816001600160a01b0316846001600160a01b03161480610aea575082155b15610af657508161046e565b610aff84610825565b15610b0f576104268484846112ea565b6000610b1a85610494565b90506001600160a01b03811615610b3f57610b378186868661135c565b91505061046e565b60405162461bcd60e51b81526004016103419061296d565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190611ed2565b60ff16600a0a90506000610bde84610494565b90506000610bee8286858a61135c565b90506127108111610c115760405162461bcd60e51b81526004016103419061298d565b610c26610c1f82600161122d565b848861148c565b979650505050505050565b60005b81811015610ac5576000610c62848484818110610c4d57fe5b90506020020160208101906102df9190611b67565b6001600160a01b03161415610c895760405162461bcd60e51b81526004016103419061292d565b60036000848484818110610c9957fe5b9050602002016020810190610cae9190611b67565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600490848484818110610ce657fe5b9050602002016020810190610cfb9190611b67565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d2b57fe5b9050602002016020810190610d409190611b67565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c34565b848314610d9c5760405162461bcd60e51b81526004016103419061295d565b848114610dbb5760405162461bcd60e51b8152600401610341906128ad565b60005b85811015611099576000610dd7888884818110610c4d57fe5b6001600160a01b031614610dfd5760405162461bcd60e51b81526004016103419061299d565b610e26858583818110610e0c57fe5b9050602002016020810190610e219190611b67565b6114aa565b6040518060400160405280868684818110610e3d57fe5b9050602002016020810190610e529190611b67565b6001600160a01b03168152602001848484818110610e6c57fe5b9050602002016020810190610e819190611e21565b6001811115610e8c57fe5b905260036000898985818110610e9e57fe5b9050602002016020810190610eb39190611b67565b6001600160a01b0390811682526020808301939093526040909101600020835181546001600160a01b031916921691909117808255918301519091829060ff60a01b1916600160a01b836001811115610f0857fe5b02179055509050506000878783818110610f1e57fe5b9050602002016020810190610f339190611b67565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190611ed2565b60ff16600a0a905080600460008a8a86818110610fbc57fe5b9050602002016020810190610fd19190611b67565b6001600160a01b03168152602081019190915260400160002055878783818110610ff757fe5b905060200201602081019061100c9190611b67565b6001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c0287878581811061104257fe5b90506020020160208101906110579190611b67565b86868681811061106357fe5b90506020020160208101906110789190611e21565b846040516110889392919061279e565b60405180910390a250600101610dbe565b50505050505050565b60005b81518110156106735760006001600160a01b03166110c883838151811061098457fe5b6001600160a01b031614156110ef5760405162461bcd60e51b8152600401610341906128cd565b6000808383815181106110fe57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b03021916905581818151811061114857fe5b60200260200101516001600160a01b03167fc15eb25d807b570f4567baf6e97c7b26d58a7d0512dc85e8db15375a056b860460405160405180910390a26001016110a5565b600061119761050a565b9050806001600160a01b0316826001600160a01b031614156111cb5760405162461bcd60e51b8152600401610341906127fd565b6111d4826114aa565b600280546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc94461906112219083908590612783565b60405180910390a15050565b60008282018381101561046e5760405162461bcd60e51b81526004016103419061283d565b604051634df48c7360e11b81526001600160a01b03821690639be918e69061127e908590600401612775565b60206040518083038186803b15801561129657600080fd5b505afa1580156112aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ce9190611e03565b6106735760405162461bcd60e51b81526004016103419061294d565b6000806112f68561154e565b9050600081136113185760405162461bcd60e51b8152600401610341906128ed565b60006113238461154e565b9050600081136113455760405162461bcd60e51b81526004016103419061291d565b6113528686848785611641565b9695505050505050565b6000606080866001600160a01b031663727212f687876040518363ffffffff1660e01b815260040161138f9291906127c6565b600060405180830381600087803b1580156113a957600080fd5b505af11580156113bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e59190810190611d3d565b91509150600082511161140a5760405162461bcd60e51b8152600401610341906128dd565b805182511461142b5760405162461bcd60e51b81526004016103419061286d565b60005b825181101561148157600061146a84838151811061144857fe5b602002602001015184848151811061145c57fe5b602002602001015188610aca565b9050611476858261122d565b94505060010161142e565b505050949350505050565b60006114a28461149c84866117a6565b906117e0565b949350505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114e657600080fd5b505afa1580156114fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151e9190611e5d565b50935050925050600082136115455760405162461bcd60e51b81526004016103419061293d565b610ac581611812565b60006115586103bd565b6001600160a01b0316826001600160a01b031614156115805750670de0b6b3a764000061048f565b600061158b836108ce565b90506001600160a01b0381166115b35760405162461bcd60e51b81526004016103419061281d565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190611e5d565b5091955090925061163a9150829050611812565b5050919050565b60008061164d876108ec565b9050600061165a856108ec565b9050600061166789610519565b9050600061167487610519565b905082600181111561168257fe5b84600181111561168e57fe5b14156116ac576116a189838a848a611843565b94505050505061179d565b6000806116b761050a565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190611e5d565b509350509250506000821361174e5760405162461bcd60e51b81526004016103419061288d565b61175781611812565b600086600181111561176557fe5b1415611786576117798b858c868c87611866565b965050505050505061179d565b6117948b858c868c876118a1565b96505050505050505b95945050505050565b6000826117b5575060006106b5565b828202828482816117c257fe5b041461046e5760405162461bcd60e51b8152600401610341906128fd565b60008082116118015760405162461bcd60e51b81526004016103419061287d565b81838161180a57fe5b049392505050565b61182461181d610819565b42906118d0565b8110156106fc5760405162461bcd60e51b81526004016103419061289d565b600061135261185286846117a6565b61149c856118608a896117a6565b906117a6565b600080611883670de0b6b3a764000061149c856118608c8b6117a6565b90506118958461149c8981858a6117a6565b98975050505050505050565b6000806118b68361149c876118608c8b6117a6565b90506118958461149c898185670de0b6b3a76400006117a6565b6000828211156118f25760405162461bcd60e51b81526004016103419061285d565b50900390565b80356106b581612a5d565b80516106b581612a5d565b60008083601f84011261192057600080fd5b5081356001600160401b0381111561193757600080fd5b60208301915083602082028301111561194f57600080fd5b9250929050565b600082601f83011261196757600080fd5b813561197a611975826129e1565b6129bb565b9150818183526020840193506020810190508385602084028201111561199f57600080fd5b60005b838110156119cb57816119b588826118f8565b84525060209283019291909101906001016119a2565b5050505092915050565b600082601f8301126119e657600080fd5b81516119f4611975826129e1565b91508181835260208401935060208101905083856020840282011115611a1957600080fd5b60005b838110156119cb5781611a2f8882611903565b8452506020928301929190910190600101611a1c565b600082601f830112611a5657600080fd5b8135611a64611975826129e1565b91508181835260208401935060208101905083856020840282011115611a8957600080fd5b60005b838110156119cb5781611a9f8882611b46565b8452506020928301929190910190600101611a8c565b600082601f830112611ac657600080fd5b8151611ad4611975826129e1565b91508181835260208401935060208101905083856020840282011115611af957600080fd5b60005b838110156119cb5781611b0f8882611b3b565b8452506020928301929190910190600101611afc565b80516106b581612a71565b80356106b581612a7a565b80516106b581612a87565b80356106b581612a87565b80516106b581612a99565b80516106b581612a90565b600060208284031215611b7957600080fd5b60006114a284846118f8565b600060208284031215611b9757600080fd5b60006114a28484611903565b600080600060608486031215611bb857600080fd5b6000611bc486866118f8565b9350506020611bd586828701611b46565b9250506040611be6868287016118f8565b9150509250925092565b60008060208385031215611c0357600080fd5b82356001600160401b03811115611c1957600080fd5b611c258582860161190e565b92509250509250929050565b60008060008060408587031215611c4757600080fd5b84356001600160401b03811115611c5d57600080fd5b611c698782880161190e565b945094505060208501356001600160401b03811115611c8757600080fd5b611c938782880161190e565b95989497509550505050565b60008060008060008060608789031215611cb857600080fd5b86356001600160401b03811115611cce57600080fd5b611cda89828a0161190e565b965096505060208701356001600160401b03811115611cf857600080fd5b611d0489828a0161190e565b945094505060408701356001600160401b03811115611d2257600080fd5b611d2e89828a0161190e565b92509250509295509295509295565b60008060408385031215611d5057600080fd5b82516001600160401b03811115611d6657600080fd5b611d72858286016119d5565b92505060208301516001600160401b03811115611d8e57600080fd5b611d9a85828601611ab5565b9150509250929050565b600080600060608486031215611db957600080fd5b83356001600160401b03811115611dcf57600080fd5b611ddb86828701611956565b93505060208401356001600160401b03811115611df757600080fd5b611bd586828701611a45565b600060208284031215611e1557600080fd5b60006114a28484611b25565b600060208284031215611e3357600080fd5b60006114a28484611b30565b600060208284031215611e5157600080fd5b60006114a28484611b46565b600080600080600060a08688031215611e7557600080fd5b6000611e818888611b51565b9550506020611e9288828901611b3b565b9450506040611ea388828901611b3b565b9350506060611eb488828901611b3b565b9250506080611ec588828901611b51565b9150509295509295909350565b600060208284031215611ee457600080fd5b60006114a28484611b5c565b611ef981612a0a565b82525050565b611ef981612a15565b611ef981612a48565b6000611f1e602883612a01565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b6000611f68603683612a01565b7f63616c6343616e6f6e6963616c417373657473546f74616c56616c75653a20558152751b9cdd5c1c1bdc9d19590817dc5d5bdd19505cdcd95d60521b602082015260400192915050565b6000611fc0602d83612a01565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b600061200f604983612a01565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000612080601b83612a01565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120b9602f83612a01565b7f63616c6343616e6f6e6963616c417373657456616c75653a20556e737570706f81526e393a32b21031b7b73b32b939b4b7b760891b602082015260400192915050565b600061210a601e83612a01565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000612143602d83612a01565b7f5f5f63616c634465726976617469766556616c75653a2041727261797320756e81526c657175616c206c656e6774687360981b602082015260400192915050565b6000612192601a83612a01565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b60006121cb602783612a01565b7f5f5f63616c63436f6e76657273696f6e416d6f756e743a2042616420657468558152667364207261746560c81b602082015260400192915050565b6000612214602d83612a01565b7f5f5f76616c69646174655261746549734e6f745374616c653a205374616c652081526c1c985d194819195d1958dd1959609a1b602082015260400192915050565b6000612263604283612a01565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b60006122cd603583612a01565b7f63616c6343616e6f6e6963616c417373657473546f74616c56616c75653a2041815274727261797320756e657175616c206c656e6774687360581b602082015260400192915050565b6000612324602b83612a01565b7f72656d6f766544657269766174697665733a2044657269766174697665206e6f81526a1d081e595d08185919195960aa1b602082015260400192915050565b6000612371602583612a01565b7f5f5f63616c634465726976617469766556616c75653a204e6f20756e6465726c81526479696e677360d81b602082015260400192915050565b60006123b8602d83612a01565b7f5f5f63616c6343616e6f6e6963616c56616c75653a20496e76616c696420626181526c7365206173736574207261746560981b602082015260400192915050565b6000612407602183612a01565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061244a601f83612a01565b7f5f5f61646444657269766174697665733a20416c726561647920616464656400815260200192915050565b6000612483602e83612a01565b7f5f5f63616c6343616e6f6e6963616c56616c75653a20496e76616c696420717581526d6f7465206173736574207261746560901b602082015260400192915050565b60006124d3602b83612a01565b7f5f5f72656d6f76655072696d6974697665733a205072696d6974697665206e6f81526a1d081e595d08185919195960aa1b602082015260400192915050565b6000612520602683612a01565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000612568603583612a01565b7f5f5f76616c6964617465446572697661746976655072696365466565643a20558152746e737570706f72746564206465726976617469766560581b602082015260400192915050565b60006125bf604383612a01565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b600061262a602883612a01565b7f5f5f63616c63417373657456616c75653a20556e737570706f72746564205f62815267185cd9505cdcd95d60c21b602082015260400192915050565b6000612674604483612a01565b7f5f5f61646444657269766174697665733a20556e657175616c205f646572697681527f61746976657320616e64205f70726963654665656473206172726179206c656e6020820152636774687360e01b604082015260600192915050565b60006126e0603383612a01565b7f5f5f63616c635072696d6974697665546f4465726976617469766556616c75658152723a20496e73756666696369656e74207261746560681b602082015260400192915050565b6000612735602283612a01565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b611ef981612a24565b602081016106b58284611ef0565b604081016127918285611ef0565b61046e6020830184611ef0565b606081016127ac8286611ef0565b6127b96020830185611f08565b6114a2604083018461276c565b604081016127d48285611ef0565b61046e602083018461276c565b602081016106b58284611eff565b602081016106b58284611f08565b602080825281016106b581611f11565b602080825281016106b581611f5b565b602080825281016106b581611fb3565b602080825281016106b581612002565b602080825281016106b581612073565b602080825281016106b5816120ac565b602080825281016106b5816120fd565b602080825281016106b581612136565b602080825281016106b581612185565b602080825281016106b5816121be565b602080825281016106b581612207565b602080825281016106b581612256565b602080825281016106b5816122c0565b602080825281016106b581612317565b602080825281016106b581612364565b602080825281016106b5816123ab565b602080825281016106b5816123fa565b602080825281016106b58161243d565b602080825281016106b581612476565b602080825281016106b5816124c6565b602080825281016106b581612513565b602080825281016106b58161255b565b602080825281016106b5816125b2565b602080825281016106b58161261d565b602080825281016106b581612667565b602080825281016106b5816126d3565b602080825281016106b581612728565b602081016106b5828461276c565b6040518181016001600160401b03811182821017156129d957600080fd5b604052919050565b60006001600160401b038211156129f757600080fd5b5060209081020190565b90815260200190565b60006106b582612a27565b151590565b8061048f81612a53565b90565b6001600160a01b031690565b60ff1690565b69ffffffffffffffffffff1690565b60006106b582612a1a565b600281106106fc57fe5b612a6681612a0a565b81146106fc57600080fd5b612a6681612a15565b600281106106fc57600080fd5b612a6681612a24565b612a6681612a33565b612a6681612a3956fea26469706673582212209146e77184153fe6dbe57927095e86e7c9f0b9b483b9ac619af411f8ef74afbf64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806397c0ac87116100c3578063b55433df1161007c578063b55433df14610290578063c496f8e814610298578063cf0399c8146102ab578063e106264f146102be578063e2dd0978146102d1578063e35e318e146102e45761014d565b806397c0ac87146102345780639be918e61461023c578063a98acadc1461024f578063ae6f52ad14610262578063b3d3af3b14610275578063b54fbdaa146102885761014d565b806368e81c6d1161011557806368e81c6d146101d85780636d3b9410146101eb57806374626f87146101fe578063787f256814610206578063893d20e8146102195780638f72b136146102215761014d565b806309157f951461015257806339cbb63c146101675780634c252f911461017a5780634c67e1061461019857806364b01dc1146101b8575b600080fd5b610165610160366004611e3f565b610304565b005b610165610175366004611c31565b610309565b6101826103bd565b60405161018f9190612775565b60405180910390f35b6101ab6101a6366004611ba3565b6103e1565b60405161018f91906129ad565b6101cb6101c6366004611b67565b610475565b60405161018f91906127e1565b6101826101e6366004611b67565b610494565b6101656101f9366004611c9f565b6104b2565b61018261050a565b6101ab610214366004611b67565b610519565b610182610567565b61016561022f366004611bf0565b6105ff565b610182610677565b6101cb61024a366004611b67565b61069b565b61016561025d366004611b67565b6106bb565b6101ab610270366004611da4565b6106ff565b610165610283366004611c31565b6107a5565b6101ab610819565b6101ab61081f565b6101cb6102a6366004611b67565b610825565b6101656102b9366004611c9f565b610854565b6101656102cc366004611bf0565b61088c565b6101826102df366004611b67565b6108ce565b6102f76102f2366004611b67565b6108ec565b60405161018f91906127ef565b600155565b610311610567565b6001600160a01b0316336001600160a01b03161461034a5760405162461bcd60e51b81526004016103419061282d565b60405180910390fd5b6103b78484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080880282810182019093528782529093508792508691829185019084908082843760009201919091525061093d92505050565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000816001600160a01b0316846001600160a01b03161480610401575082155b1561040d57508161046e565b61041682610825565b1561042d57610426848484610aca565b905061046e565b61043682610475565b8015610446575061044684610825565b1561045657610426848484610b57565b60405162461bcd60e51b81526004016103419061284d565b9392505050565b60008061048183610494565b6001600160a01b0316141590505b919050565b6001600160a01b039081166000908152602081905260409020541690565b6104ba610567565b6001600160a01b0316336001600160a01b0316146104ea5760405162461bcd60e51b81526004016103419061282d565b6104f48686610c31565b610502868686868686610d7d565b505050505050565b6002546001600160a01b031690565b60006105236103bd565b6001600160a01b0316826001600160a01b0316141561054b5750670de0b6b3a764000061048f565b506001600160a01b031660009081526004602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190611b85565b905090565b610607610567565b6001600160a01b0316336001600160a01b0316146106375760405162461bcd60e51b81526004016103419061282d565b6106738282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506110a292505050565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006106a682610825565b806106b557506106b582610475565b92915050565b6106c3610567565b6001600160a01b0316336001600160a01b0316146106f35760405162461bcd60e51b81526004016103419061282d565b6106fc8161118d565b50565b600082518451146107225760405162461bcd60e51b8152600401610341906128bd565b61072b82610825565b6107475760405162461bcd60e51b81526004016103419061280d565b60005b845181101561079d57600061078686838151811061076457fe5b602002602001015186848151811061077857fe5b602002602001015186610aca565b9050610792838261122d565b92505060010161074a565b509392505050565b6107ad610567565b6001600160a01b0316336001600160a01b0316146107dd5760405162461bcd60e51b81526004016103419061282d565b61034a8484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506110a292505050565b60015490565b60015481565b600061082f6103bd565b6001600160a01b0316826001600160a01b031614806106b557506000610481836108ce565b61085c610567565b6001600160a01b0316336001600160a01b0316146104f45760405162461bcd60e51b81526004016103419061282d565b610894610567565b6001600160a01b0316336001600160a01b0316146108c45760405162461bcd60e51b81526004016103419061282d565b6106738282610c31565b6001600160a01b039081166000908152600360205260409020541690565b60006108f66103bd565b6001600160a01b0316826001600160a01b031614156109175750600061048f565b506001600160a01b0316600090815260036020526040902054600160a01b900460ff1690565b805182511461095e5760405162461bcd60e51b81526004016103419061297d565b60005b8251811015610ac55760006001600160a01b031661099184838151811061098457fe5b6020026020010151610494565b6001600160a01b0316146109b75760405162461bcd60e51b81526004016103419061290d565b6109e78382815181106109c657fe5b60200260200101518383815181106109da57fe5b6020026020010151611252565b8181815181106109f357fe5b6020026020010151600080858481518110610a0a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550828181518110610a6257fe5b60200260200101516001600160a01b03167faa4ae250fb435bb4b31ed0b95822bc179fc6c5dd0c727c3ffe08d444025efd98838381518110610aa057fe5b6020026020010151604051610ab59190612775565b60405180910390a2600101610961565b505050565b6000816001600160a01b0316846001600160a01b03161480610aea575082155b15610af657508161046e565b610aff84610825565b15610b0f576104268484846112ea565b6000610b1a85610494565b90506001600160a01b03811615610b3f57610b378186868661135c565b91505061046e565b60405162461bcd60e51b81526004016103419061296d565b600080826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9357600080fd5b505afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb9190611ed2565b60ff16600a0a90506000610bde84610494565b90506000610bee8286858a61135c565b90506127108111610c115760405162461bcd60e51b81526004016103419061298d565b610c26610c1f82600161122d565b848861148c565b979650505050505050565b60005b81811015610ac5576000610c62848484818110610c4d57fe5b90506020020160208101906102df9190611b67565b6001600160a01b03161415610c895760405162461bcd60e51b81526004016103419061292d565b60036000848484818110610c9957fe5b9050602002016020810190610cae9190611b67565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600490848484818110610ce657fe5b9050602002016020810190610cfb9190611b67565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d2b57fe5b9050602002016020810190610d409190611b67565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c34565b848314610d9c5760405162461bcd60e51b81526004016103419061295d565b848114610dbb5760405162461bcd60e51b8152600401610341906128ad565b60005b85811015611099576000610dd7888884818110610c4d57fe5b6001600160a01b031614610dfd5760405162461bcd60e51b81526004016103419061299d565b610e26858583818110610e0c57fe5b9050602002016020810190610e219190611b67565b6114aa565b6040518060400160405280868684818110610e3d57fe5b9050602002016020810190610e529190611b67565b6001600160a01b03168152602001848484818110610e6c57fe5b9050602002016020810190610e819190611e21565b6001811115610e8c57fe5b905260036000898985818110610e9e57fe5b9050602002016020810190610eb39190611b67565b6001600160a01b0390811682526020808301939093526040909101600020835181546001600160a01b031916921691909117808255918301519091829060ff60a01b1916600160a01b836001811115610f0857fe5b02179055509050506000878783818110610f1e57fe5b9050602002016020810190610f339190611b67565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6b57600080fd5b505afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190611ed2565b60ff16600a0a905080600460008a8a86818110610fbc57fe5b9050602002016020810190610fd19190611b67565b6001600160a01b03168152602081019190915260400160002055878783818110610ff757fe5b905060200201602081019061100c9190611b67565b6001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c0287878581811061104257fe5b90506020020160208101906110579190611b67565b86868681811061106357fe5b90506020020160208101906110789190611e21565b846040516110889392919061279e565b60405180910390a250600101610dbe565b50505050505050565b60005b81518110156106735760006001600160a01b03166110c883838151811061098457fe5b6001600160a01b031614156110ef5760405162461bcd60e51b8152600401610341906128cd565b6000808383815181106110fe57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b03021916905581818151811061114857fe5b60200260200101516001600160a01b03167fc15eb25d807b570f4567baf6e97c7b26d58a7d0512dc85e8db15375a056b860460405160405180910390a26001016110a5565b600061119761050a565b9050806001600160a01b0316826001600160a01b031614156111cb5760405162461bcd60e51b8152600401610341906127fd565b6111d4826114aa565b600280546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc94461906112219083908590612783565b60405180910390a15050565b60008282018381101561046e5760405162461bcd60e51b81526004016103419061283d565b604051634df48c7360e11b81526001600160a01b03821690639be918e69061127e908590600401612775565b60206040518083038186803b15801561129657600080fd5b505afa1580156112aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ce9190611e03565b6106735760405162461bcd60e51b81526004016103419061294d565b6000806112f68561154e565b9050600081136113185760405162461bcd60e51b8152600401610341906128ed565b60006113238461154e565b9050600081136113455760405162461bcd60e51b81526004016103419061291d565b6113528686848785611641565b9695505050505050565b6000606080866001600160a01b031663727212f687876040518363ffffffff1660e01b815260040161138f9291906127c6565b600060405180830381600087803b1580156113a957600080fd5b505af11580156113bd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e59190810190611d3d565b91509150600082511161140a5760405162461bcd60e51b8152600401610341906128dd565b805182511461142b5760405162461bcd60e51b81526004016103419061286d565b60005b825181101561148157600061146a84838151811061144857fe5b602002602001015184848151811061145c57fe5b602002602001015188610aca565b9050611476858261122d565b94505060010161142e565b505050949350505050565b60006114a28461149c84866117a6565b906117e0565b949350505050565b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114e657600080fd5b505afa1580156114fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151e9190611e5d565b50935050925050600082136115455760405162461bcd60e51b81526004016103419061293d565b610ac581611812565b60006115586103bd565b6001600160a01b0316826001600160a01b031614156115805750670de0b6b3a764000061048f565b600061158b836108ce565b90506001600160a01b0381166115b35760405162461bcd60e51b81526004016103419061281d565b6000816001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156115ee57600080fd5b505afa158015611602573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116269190611e5d565b5091955090925061163a9150829050611812565b5050919050565b60008061164d876108ec565b9050600061165a856108ec565b9050600061166789610519565b9050600061167487610519565b905082600181111561168257fe5b84600181111561168e57fe5b14156116ac576116a189838a848a611843565b94505050505061179d565b6000806116b761050a565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156116ef57600080fd5b505afa158015611703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117279190611e5d565b509350509250506000821361174e5760405162461bcd60e51b81526004016103419061288d565b61175781611812565b600086600181111561176557fe5b1415611786576117798b858c868c87611866565b965050505050505061179d565b6117948b858c868c876118a1565b96505050505050505b95945050505050565b6000826117b5575060006106b5565b828202828482816117c257fe5b041461046e5760405162461bcd60e51b8152600401610341906128fd565b60008082116118015760405162461bcd60e51b81526004016103419061287d565b81838161180a57fe5b049392505050565b61182461181d610819565b42906118d0565b8110156106fc5760405162461bcd60e51b81526004016103419061289d565b600061135261185286846117a6565b61149c856118608a896117a6565b906117a6565b600080611883670de0b6b3a764000061149c856118608c8b6117a6565b90506118958461149c8981858a6117a6565b98975050505050505050565b6000806118b68361149c876118608c8b6117a6565b90506118958461149c898185670de0b6b3a76400006117a6565b6000828211156118f25760405162461bcd60e51b81526004016103419061285d565b50900390565b80356106b581612a5d565b80516106b581612a5d565b60008083601f84011261192057600080fd5b5081356001600160401b0381111561193757600080fd5b60208301915083602082028301111561194f57600080fd5b9250929050565b600082601f83011261196757600080fd5b813561197a611975826129e1565b6129bb565b9150818183526020840193506020810190508385602084028201111561199f57600080fd5b60005b838110156119cb57816119b588826118f8565b84525060209283019291909101906001016119a2565b5050505092915050565b600082601f8301126119e657600080fd5b81516119f4611975826129e1565b91508181835260208401935060208101905083856020840282011115611a1957600080fd5b60005b838110156119cb5781611a2f8882611903565b8452506020928301929190910190600101611a1c565b600082601f830112611a5657600080fd5b8135611a64611975826129e1565b91508181835260208401935060208101905083856020840282011115611a8957600080fd5b60005b838110156119cb5781611a9f8882611b46565b8452506020928301929190910190600101611a8c565b600082601f830112611ac657600080fd5b8151611ad4611975826129e1565b91508181835260208401935060208101905083856020840282011115611af957600080fd5b60005b838110156119cb5781611b0f8882611b3b565b8452506020928301929190910190600101611afc565b80516106b581612a71565b80356106b581612a7a565b80516106b581612a87565b80356106b581612a87565b80516106b581612a99565b80516106b581612a90565b600060208284031215611b7957600080fd5b60006114a284846118f8565b600060208284031215611b9757600080fd5b60006114a28484611903565b600080600060608486031215611bb857600080fd5b6000611bc486866118f8565b9350506020611bd586828701611b46565b9250506040611be6868287016118f8565b9150509250925092565b60008060208385031215611c0357600080fd5b82356001600160401b03811115611c1957600080fd5b611c258582860161190e565b92509250509250929050565b60008060008060408587031215611c4757600080fd5b84356001600160401b03811115611c5d57600080fd5b611c698782880161190e565b945094505060208501356001600160401b03811115611c8757600080fd5b611c938782880161190e565b95989497509550505050565b60008060008060008060608789031215611cb857600080fd5b86356001600160401b03811115611cce57600080fd5b611cda89828a0161190e565b965096505060208701356001600160401b03811115611cf857600080fd5b611d0489828a0161190e565b945094505060408701356001600160401b03811115611d2257600080fd5b611d2e89828a0161190e565b92509250509295509295509295565b60008060408385031215611d5057600080fd5b82516001600160401b03811115611d6657600080fd5b611d72858286016119d5565b92505060208301516001600160401b03811115611d8e57600080fd5b611d9a85828601611ab5565b9150509250929050565b600080600060608486031215611db957600080fd5b83356001600160401b03811115611dcf57600080fd5b611ddb86828701611956565b93505060208401356001600160401b03811115611df757600080fd5b611bd586828701611a45565b600060208284031215611e1557600080fd5b60006114a28484611b25565b600060208284031215611e3357600080fd5b60006114a28484611b30565b600060208284031215611e5157600080fd5b60006114a28484611b46565b600080600080600060a08688031215611e7557600080fd5b6000611e818888611b51565b9550506020611e9288828901611b3b565b9450506040611ea388828901611b3b565b9350506060611eb488828901611b3b565b9250506080611ec588828901611b51565b9150509295509295909350565b600060208284031215611ee457600080fd5b60006114a28484611b5c565b611ef981612a0a565b82525050565b611ef981612a15565b611ef981612a48565b6000611f1e602883612a01565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b6000611f68603683612a01565b7f63616c6343616e6f6e6963616c417373657473546f74616c56616c75653a20558152751b9cdd5c1c1bdc9d19590817dc5d5bdd19505cdcd95d60521b602082015260400192915050565b6000611fc0602d83612a01565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b600061200f604983612a01565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000612080601b83612a01565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006120b9602f83612a01565b7f63616c6343616e6f6e6963616c417373657456616c75653a20556e737570706f81526e393a32b21031b7b73b32b939b4b7b760891b602082015260400192915050565b600061210a601e83612a01565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000612143602d83612a01565b7f5f5f63616c634465726976617469766556616c75653a2041727261797320756e81526c657175616c206c656e6774687360981b602082015260400192915050565b6000612192601a83612a01565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b60006121cb602783612a01565b7f5f5f63616c63436f6e76657273696f6e416d6f756e743a2042616420657468558152667364207261746560c81b602082015260400192915050565b6000612214602d83612a01565b7f5f5f76616c69646174655261746549734e6f745374616c653a205374616c652081526c1c985d194819195d1958dd1959609a1b602082015260400192915050565b6000612263604283612a01565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b60006122cd603583612a01565b7f63616c6343616e6f6e6963616c417373657473546f74616c56616c75653a2041815274727261797320756e657175616c206c656e6774687360581b602082015260400192915050565b6000612324602b83612a01565b7f72656d6f766544657269766174697665733a2044657269766174697665206e6f81526a1d081e595d08185919195960aa1b602082015260400192915050565b6000612371602583612a01565b7f5f5f63616c634465726976617469766556616c75653a204e6f20756e6465726c81526479696e677360d81b602082015260400192915050565b60006123b8602d83612a01565b7f5f5f63616c6343616e6f6e6963616c56616c75653a20496e76616c696420626181526c7365206173736574207261746560981b602082015260400192915050565b6000612407602183612a01565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b600061244a601f83612a01565b7f5f5f61646444657269766174697665733a20416c726561647920616464656400815260200192915050565b6000612483602e83612a01565b7f5f5f63616c6343616e6f6e6963616c56616c75653a20496e76616c696420717581526d6f7465206173736574207261746560901b602082015260400192915050565b60006124d3602b83612a01565b7f5f5f72656d6f76655072696d6974697665733a205072696d6974697665206e6f81526a1d081e595d08185919195960aa1b602082015260400192915050565b6000612520602683612a01565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000612568603583612a01565b7f5f5f76616c6964617465446572697661746976655072696365466565643a20558152746e737570706f72746564206465726976617469766560581b602082015260400192915050565b60006125bf604383612a01565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b600061262a602883612a01565b7f5f5f63616c63417373657456616c75653a20556e737570706f72746564205f62815267185cd9505cdcd95d60c21b602082015260400192915050565b6000612674604483612a01565b7f5f5f61646444657269766174697665733a20556e657175616c205f646572697681527f61746976657320616e64205f70726963654665656473206172726179206c656e6020820152636774687360e01b604082015260600192915050565b60006126e0603383612a01565b7f5f5f63616c635072696d6974697665546f4465726976617469766556616c75658152723a20496e73756666696369656e74207261746560681b602082015260400192915050565b6000612735602283612a01565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b611ef981612a24565b602081016106b58284611ef0565b604081016127918285611ef0565b61046e6020830184611ef0565b606081016127ac8286611ef0565b6127b96020830185611f08565b6114a2604083018461276c565b604081016127d48285611ef0565b61046e602083018461276c565b602081016106b58284611eff565b602081016106b58284611f08565b602080825281016106b581611f11565b602080825281016106b581611f5b565b602080825281016106b581611fb3565b602080825281016106b581612002565b602080825281016106b581612073565b602080825281016106b5816120ac565b602080825281016106b5816120fd565b602080825281016106b581612136565b602080825281016106b581612185565b602080825281016106b5816121be565b602080825281016106b581612207565b602080825281016106b581612256565b602080825281016106b5816122c0565b602080825281016106b581612317565b602080825281016106b581612364565b602080825281016106b5816123ab565b602080825281016106b5816123fa565b602080825281016106b58161243d565b602080825281016106b581612476565b602080825281016106b5816124c6565b602080825281016106b581612513565b602080825281016106b58161255b565b602080825281016106b5816125b2565b602080825281016106b58161261d565b602080825281016106b581612667565b602080825281016106b5816126d3565b602080825281016106b581612728565b602081016106b5828461276c565b6040518181016001600160401b03811182821017156129d957600080fd5b604052919050565b60006001600160401b038211156129f757600080fd5b5060209081020190565b90815260200190565b60006106b582612a27565b151590565b8061048f81612a53565b90565b6001600160a01b031690565b60ff1690565b69ffffffffffffffffffff1690565b60006106b582612a1a565b600281106106fc57fe5b612a6681612a0a565b81146106fc57600080fd5b612a6681612a15565b600281106106fc57600080fd5b612a6681612a24565b612a6681612a33565b612a6681612a3956fea26469706673582212209146e77184153fe6dbe57927095e86e7c9f0b9b483b9ac619af411f8ef74afbf64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addDerivatives(address[],address[])": {
        "params": {
          "_derivatives": "The derivatives to add",
          "_priceFeeds": "The ordered price feeds corresponding to the list of _derivatives"
        }
      },
      "addPrimitives(address[],address[],uint8[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to add",
          "_rateAssets": "The ordered rate assets corresponding to the list of _primitives"
        }
      },
      "calcCanonicalAssetValue(address,uint256,address)": {
        "details": "Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state. See also __calcPrimitiveToDerivativeValue() for important notes regarding a derivative _quoteAsset.",
        "params": {
          "_amount": "The amount of the _baseAsset to convert",
          "_baseAsset": "The asset from which to convert",
          "_quoteAsset": "The asset to which to convert"
        },
        "returns": {
          "value_": "The equivalent quantity in the _quoteAsset"
        }
      },
      "calcCanonicalAssetsTotalValue(address[],uint256[],address)": {
        "details": "Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state. Does not handle a derivative quote asset.",
        "params": {
          "_amounts": "The amounts of the _baseAssets to convert",
          "_baseAssets": "The assets to convert",
          "_quoteAsset": "The asset to which to convert"
        },
        "returns": {
          "value_": "The sum value of _baseAssets, denominated in the _quoteAsset"
        }
      },
      "getAggregatorForPrimitive(address)": {
        "params": {
          "_primitive": "The primitive asset for which to get the aggregator value"
        },
        "returns": {
          "aggregator_": "The aggregator address"
        }
      },
      "getEthUsdAggregator()": {
        "returns": {
          "ethUsdAggregator_": "The `ethUsdAggregator` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getPriceFeedForDerivative(address)": {
        "returns": {
          "priceFeed_": "The price feed contract address"
        }
      },
      "getRateAssetForPrimitive(address)": {
        "details": "This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit",
        "returns": {
          "rateAsset_": "The rateAsset variable value"
        }
      },
      "getStaleRateThreshold()": {
        "returns": {
          "staleRateThreshold_": "The `STALE_RATE_THRESHOLD` value"
        }
      },
      "getUnitForPrimitive(address)": {
        "returns": {
          "unit_": "The unit variable value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is a supported asset"
        }
      },
      "isSupportedDerivativeAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is a supported derivative"
        }
      },
      "isSupportedPrimitiveAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is a supported primitive"
        }
      },
      "removeDerivatives(address[])": {
        "params": {
          "_derivatives": "The derivatives to remove"
        }
      },
      "removePrimitives(address[])": {
        "params": {
          "_primitives": "The primitives to remove"
        }
      },
      "setEthUsdAggregator(address)": {
        "params": {
          "_nextEthUsdAggregator": "The `ehUsdAggregator` value to set"
        }
      },
      "updateDerivatives(address[],address[])": {
        "params": {
          "_derivatives": "The derivatives to update",
          "_priceFeeds": "The ordered price feeds corresponding to the list of _derivatives"
        }
      },
      "updatePrimitives(address[],address[],uint8[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to update",
          "_rateAssets": "The ordered rate assets corresponding to the list of _primitives"
        }
      }
    },
    "title": "ValueInterpreter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDerivatives(address[],address[])": {
        "notice": "Adds a list of derivatives with the given price feed values"
      },
      "addPrimitives(address[],address[],uint8[])": {
        "notice": "Adds a list of primitives with the given aggregator and rateAsset values"
      },
      "calcCanonicalAssetValue(address,uint256,address)": {
        "notice": "Calculates the value of a given amount of one asset in terms of another asset"
      },
      "calcCanonicalAssetsTotalValue(address[],uint256[],address)": {
        "notice": "Calculates the total value of given amounts of assets in a single quote asset"
      },
      "getAggregatorForPrimitive(address)": {
        "notice": "Gets the aggregator for a primitive"
      },
      "getEthUsdAggregator()": {
        "notice": "Gets the `ethUsdAggregator` variable value"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getPriceFeedForDerivative(address)": {
        "notice": "Gets the registered price feed for a given derivative"
      },
      "getRateAssetForPrimitive(address)": {
        "notice": "Gets the rateAsset variable value for a primitive"
      },
      "getStaleRateThreshold()": {
        "notice": "Gets the `STALE_RATE_THRESHOLD` variable value"
      },
      "getUnitForPrimitive(address)": {
        "notice": "Gets the unit variable value for a primitive"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable value"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks whether an asset is a supported asset"
      },
      "isSupportedDerivativeAsset(address)": {
        "notice": "Checks whether an asset is a supported derivative"
      },
      "isSupportedPrimitiveAsset(address)": {
        "notice": "Checks whether an asset is a supported primitive"
      },
      "removeDerivatives(address[])": {
        "notice": "Removes a list of derivatives"
      },
      "removePrimitives(address[])": {
        "notice": "Removes a list of primitives from the feed"
      },
      "setEthUsdAggregator(address)": {
        "notice": "Sets the `ehUsdAggregator` variable value"
      },
      "updateDerivatives(address[],address[])": {
        "notice": "Updates a list of derivatives with the given price feed values"
      },
      "updatePrimitives(address[],address[],uint8[])": {
        "notice": "Updates a list of primitives with the given aggregator and rateAsset values"
      }
    },
    "notice": "Interprets price feeds to provide covert value between asset pairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 43159,
        "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
        "label": "derivativeToPriceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 46724,
        "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
        "label": "STALE_RATE_THRESHOLD",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 46728,
        "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
        "label": "ethUsdAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 46732,
        "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
        "label": "primitiveToAggregatorInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(AggregatorInfo)46717_storage)"
      },
      {
        "astId": 46736,
        "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
        "label": "primitiveToUnit",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(RateAsset)46712": {
        "encoding": "inplace",
        "label": "enum ChainlinkPriceFeedMixin.RateAsset",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AggregatorInfo)46717_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainlinkPriceFeedMixin.AggregatorInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AggregatorInfo)46717_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AggregatorInfo)46717_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkPriceFeedMixin.AggregatorInfo",
        "members": [
          {
            "astId": 46714,
            "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
            "label": "aggregator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 46716,
            "contract": "contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol:ValueInterpreter",
            "label": "rateAsset",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RateAsset)46712"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}