{
  "address": "0x382a93d8A1714F5972cDbC918350370A20Ac34F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "settingsData",
          "type": "bytes"
        }
      ],
      "name": "FeeEnabledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "FeeSettledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "SharesOutstandingPaidForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "ValidatedVaultProxySetForFund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getEnabledFeesForFund",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "enabledFees_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "getFeeSharesOutstandingForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesOutstanding_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getVaultProxyForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "invokeHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_configData",
          "type": "bytes"
        }
      ],
      "name": "setConfigForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98ea01d5d80e69a643d3ce5696ff2e2f6e7b9316c551a9687cfda5934aa4fd31",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0x382a93d8A1714F5972cDbC918350370A20Ac34F3",
    "transactionIndex": 0,
    "gasUsed": "1668088",
    "logsBloom": "0x
    "blockHash": "0x2c41d9dde594112b1cb256bd4f9ffeeb6caf1cd431888ea51412729da628f224",
    "transactionHash": "0x98ea01d5d80e69a643d3ce5696ff2e2f6e7b9316c551a9687cfda5934aa4fd31",
    "logs": [],
    "blockNumber": 11761497,
    "cumulativeGasUsed": "1668088",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f"
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"settingsData\",\"type\":\"bytes\"}],\"name\":\"FeeEnabledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"FeeSettledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"SharesOutstandingPaidForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"ValidatedVaultProxySetForFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getEnabledFeesForFund\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enabledFees_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"getFeeSharesOutstandingForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOutstanding_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getVaultProxyForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"invokeHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"}],\"name\":\"setConfigForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Any arbitrary fee is allowed by default, so all participants must be aware of their fund's configuration, especially whether they use official fees only. Fees can only be added upon fund setup, migration, or reconfiguration.\",\"kind\":\"dev\",\"methods\":{\"deactivateForFund()\":{\"details\":\"There will be no fees if the caller is not a valid ComptrollerProxy\"},\"getEnabledFeesForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"enabledFees_\":\"An array of enabled fee addresses\"}},\"getFeeSharesOutstandingForFund(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_fee\":\"The fee address\"},\"returns\":{\"sharesOutstanding_\":\"The amount of shares outstanding\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getVaultProxyForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"vaultProxy_\":\"The VaultProxy of the fund\"}},\"invokeHook(uint8,bytes,uint256)\":{\"params\":{\"_gav\":\"The GAV for a fund if known in the invocating code, otherwise 0\",\"_hook\":\"The FeeHook to invoke\",\"_settlementData\":\"The encoded settlement parameters specific to the FeeHook\"}},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"details\":\"This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.\",\"params\":{\"_actionId\":\"An ID representing the desired action\",\"_callArgs\":\"Encoded arguments specific to the _actionId\"}},\"setConfigForFund(address,address,bytes)\":{\"details\":\"The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.\",\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_configData\":\"Encoded config data\",\"_vaultProxy\":\"The VaultProxy of the fund\"}}},\"title\":\"FeeManager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(bool)\":{\"notice\":\"Activate already-configured fees for use in the calling fund\"},\"deactivateForFund()\":{\"notice\":\"Deactivate fees for a fund\"},\"getEnabledFeesForFund(address)\":{\"notice\":\"Get a list of enabled fees for a given fund\"},\"getFeeSharesOutstandingForFund(address,address)\":{\"notice\":\"Get the amount of shares outstanding for a particular fee for a fund\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getVaultProxyForFund(address)\":{\"notice\":\"Gets the verified VaultProxy for a given ComptrollerProxy\"},\"invokeHook(uint8,bytes,uint256)\":{\"notice\":\"Allows all fees for a particular FeeHook to implement settle() and update() logic\"},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"notice\":\"Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\"},\"setConfigForFund(address,address,bytes)\":{\"notice\":\"Enable and configure fees for use in the calling fund\"}},\"notice\":\"Manages fees for funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c047551a9bab8cb84299c4cf17d0435f1d4d0791ecc1d03e0d55cb3450baad6\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\",\"keccak256\":\"0xe31f063493e6e3a4434eaa5629c0a706b8fa0569aff3f4ef9d62e27a1928cfa0\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b901b81b3a4ef3d30ef9b4a1fa7fdd6526dfacd66e9971d1f988c2b63334314\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav() external returns (uint256);\\n\\n    function calcGrossShareValue() external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\",\"keccak256\":\"0x51d4a60ba37b5f9198ef1328e08ff45efe0dee76bc067d71ed98f3a221c3636f\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function setSymbol(string calldata) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x988fb29885af5cd96ad8d9f9a8be4689bcbfbcde564bc0b799beb0d1406215ec\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x59aaa2ddd32c24271bd4a57e9e1f3426570a78cd56d6d11e63786f36c916e94b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\nimport \\\"../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../utils/ExtensionBase.sol\\\";\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\nimport \\\"./IFee.sol\\\";\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title FeeManager Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Manages fees for funds\\n/// @dev Any arbitrary fee is allowed by default, so all participants must be aware of\\n/// their fund's configuration, especially whether they use official fees only.\\n/// Fees can only be added upon fund setup, migration, or reconfiguration.\\ncontract FeeManager is IFeeManager, ExtensionBase, PermissionedVaultActionMixin {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n\\n    event FeeEnabledForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        bytes settingsData\\n    );\\n\\n    event FeeSettledForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        SettlementType indexed settlementType,\\n        address payer,\\n        address payee,\\n        uint256 sharesDue\\n    );\\n\\n    event SharesOutstandingPaidForFund(\\n        address indexed comptrollerProxy,\\n        address indexed fee,\\n        address indexed payee,\\n        uint256 sharesDue\\n    );\\n\\n    mapping(address => address[]) private comptrollerProxyToFees;\\n    mapping(address => mapping(address => uint256))\\n        private comptrollerProxyToFeeToSharesOutstanding;\\n\\n    constructor(address _fundDeployer) public ExtensionBase(_fundDeployer) {}\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Activate already-configured fees for use in the calling fund\\n    function activateForFund(bool) external override {\\n        address comptrollerProxy = msg.sender;\\n        address vaultProxy = getVaultProxyForFund(comptrollerProxy);\\n\\n        address[] memory enabledFees = getEnabledFeesForFund(comptrollerProxy);\\n        for (uint256 i; i < enabledFees.length; i++) {\\n            IFee(enabledFees[i]).activateForFund(comptrollerProxy, vaultProxy);\\n        }\\n    }\\n\\n    /// @notice Deactivate fees for a fund\\n    /// @dev There will be no fees if the caller is not a valid ComptrollerProxy\\n    function deactivateForFund() external override {\\n        address comptrollerProxy = msg.sender;\\n        address vaultProxy = getVaultProxyForFund(comptrollerProxy);\\n\\n        // Force payout of remaining shares outstanding\\n        address[] memory fees = getEnabledFeesForFund(comptrollerProxy);\\n        for (uint256 i; i < fees.length; i++) {\\n            __payoutSharesOutstanding(comptrollerProxy, vaultProxy, fees[i]);\\n        }\\n    }\\n\\n    /// @notice Allows all fees for a particular FeeHook to implement settle() and update() logic\\n    /// @param _hook The FeeHook to invoke\\n    /// @param _settlementData The encoded settlement parameters specific to the FeeHook\\n    /// @param _gav The GAV for a fund if known in the invocating code, otherwise 0\\n    function invokeHook(\\n        FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external override {\\n        __invokeHook(msg.sender, _hook, _settlementData, _gav, true);\\n    }\\n\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\n    /// @param _actionId An ID representing the desired action\\n    /// @param _callArgs Encoded arguments specific to the _actionId\\n    /// @dev This is the only way to call a function on this contract that updates VaultProxy state.\\n    /// For both of these actions, any caller is allowed, so we don't use the caller param.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override {\\n        if (_actionId == 0) {\\n            // Settle and update all continuous fees\\n            __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, true);\\n        } else if (_actionId == 1) {\\n            __payoutSharesOutstandingForFees(msg.sender, _callArgs);\\n        } else {\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\n        }\\n    }\\n\\n    /// @notice Enable and configure fees for use in the calling fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    /// @param _configData Encoded config data\\n    /// @dev The order of `fees` determines the order in which fees of the same FeeHook will be applied.\\n    /// It is recommended to run ManagementFee before PerformanceFee in order to achieve precise\\n    /// PerformanceFee calcs.\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external override onlyFundDeployer {\\n        __setValidatedVaultProxy(_comptrollerProxy, _vaultProxy);\\n\\n        (address[] memory fees, bytes[] memory settingsData) = abi.decode(\\n            _configData,\\n            (address[], bytes[])\\n        );\\n\\n        // Sanity checks\\n        require(\\n            fees.length == settingsData.length,\\n            \\\"setConfigForFund: fees and settingsData array lengths unequal\\\"\\n        );\\n        require(fees.isUniqueSet(), \\\"setConfigForFund: fees cannot include duplicates\\\");\\n\\n        // Enable each fee with settings\\n        for (uint256 i; i < fees.length; i++) {\\n            // Set fund config on fee\\n            IFee(fees[i]).addFundSettings(_comptrollerProxy, settingsData[i]);\\n\\n            // Enable fee for fund\\n            comptrollerProxyToFees[_comptrollerProxy].push(fees[i]);\\n\\n            emit FeeEnabledForFund(_comptrollerProxy, fees[i], settingsData[i]);\\n        }\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to get the canonical value of GAV if not yet set and required by fee\\n    function __getGavAsNecessary(address _comptrollerProxy, uint256 _gavOrZero)\\n        private\\n        returns (uint256 gav_)\\n    {\\n        if (_gavOrZero == 0) {\\n            return IComptroller(_comptrollerProxy).calcGav();\\n        } else {\\n            return _gavOrZero;\\n        }\\n    }\\n\\n    /// @dev Helper to run settle() on all enabled fees for a fund that implement a given hook, and then to\\n    /// optionally run update() on the same fees. This order allows fees an opportunity to update\\n    /// their local state after all VaultProxy state transitions (i.e., minting, burning,\\n    /// transferring shares) have finished. To optimize for the expensive operation of calculating\\n    /// GAV, once one fee requires GAV, we recycle that `gav` value for subsequent fees.\\n    /// Assumes that _gav is either 0 or has already been validated.\\n    function __invokeHook(\\n        address _comptrollerProxy,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero,\\n        bool _updateFees\\n    ) private {\\n        address[] memory fees = getEnabledFeesForFund(_comptrollerProxy);\\n        if (fees.length == 0) {\\n            return;\\n        }\\n\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\n\\n        // This check isn't strictly necessary, but its cost is insignificant,\\n        // and helps to preserve data integrity.\\n        require(vaultProxy != address(0), \\\"__invokeHook: Fund is not active\\\");\\n\\n        // First, allow all fees to implement settle()\\n        uint256 gav = __settleFees(\\n            _comptrollerProxy,\\n            vaultProxy,\\n            fees,\\n            _hook,\\n            _settlementData,\\n            _gavOrZero\\n        );\\n\\n        // Second, allow fees to implement update()\\n        // This function does not allow any further altering of VaultProxy state\\n        // (i.e., burning, minting, or transferring shares)\\n        if (_updateFees) {\\n            __updateFees(_comptrollerProxy, vaultProxy, fees, _hook, _settlementData, gav);\\n        }\\n    }\\n\\n    /// @dev Helper to get the end recipient for a given fee and fund\\n    function __parseFeeRecipientForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _fee\\n    ) private view returns (address recipient_) {\\n        recipient_ = IFee(_fee).getRecipientForFund(_comptrollerProxy);\\n        if (recipient_ == address(0)) {\\n            recipient_ = IVault(_vaultProxy).getOwner();\\n        }\\n\\n        return recipient_;\\n    }\\n\\n    /// @dev Helper to payout the shares outstanding for the specified fees.\\n    /// Does not call settle() on fees.\\n    /// Only callable via ComptrollerProxy.callOnExtension().\\n    function __payoutSharesOutstandingForFees(address _comptrollerProxy, bytes memory _callArgs)\\n        private\\n    {\\n        address[] memory fees = abi.decode(_callArgs, (address[]));\\n        address vaultProxy = getVaultProxyForFund(msg.sender);\\n\\n        for (uint256 i; i < fees.length; i++) {\\n            if (IFee(fees[i]).payout(_comptrollerProxy, vaultProxy)) {\\n                __payoutSharesOutstanding(_comptrollerProxy, vaultProxy, fees[i]);\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to payout shares outstanding for a given fee.\\n    /// Assumes the fee is payout-able.\\n    function __payoutSharesOutstanding(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _fee\\n    ) private {\\n        uint256 sharesOutstanding = getFeeSharesOutstandingForFund(_comptrollerProxy, _fee);\\n        if (sharesOutstanding == 0) {\\n            return;\\n        }\\n\\n        delete comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee];\\n\\n        address payee = __parseFeeRecipientForFund(_comptrollerProxy, _vaultProxy, _fee);\\n\\n        __transferShares(_comptrollerProxy, _vaultProxy, payee, sharesOutstanding);\\n\\n        emit SharesOutstandingPaidForFund(_comptrollerProxy, _fee, payee, sharesOutstanding);\\n    }\\n\\n    /// @dev Helper to settle a fee\\n    function __settleFee(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _fee,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gav\\n    ) private {\\n        (SettlementType settlementType, address payer, uint256 sharesDue) = IFee(_fee).settle(\\n            _comptrollerProxy,\\n            _vaultProxy,\\n            _hook,\\n            _settlementData,\\n            _gav\\n        );\\n        if (settlementType == SettlementType.None) {\\n            return;\\n        }\\n\\n        address payee;\\n        if (settlementType == SettlementType.Direct) {\\n            payee = __parseFeeRecipientForFund(_comptrollerProxy, _vaultProxy, _fee);\\n            __transferShares(_comptrollerProxy, payer, payee, sharesDue);\\n        } else if (settlementType == SettlementType.Mint) {\\n            payee = __parseFeeRecipientForFund(_comptrollerProxy, _vaultProxy, _fee);\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\n        } else if (settlementType == SettlementType.Burn) {\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\n        } else if (settlementType == SettlementType.MintSharesOutstanding) {\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\n                .add(sharesDue);\\n\\n            payee = _vaultProxy;\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\n        } else if (settlementType == SettlementType.BurnSharesOutstanding) {\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\n                .sub(sharesDue);\\n\\n            payer = _vaultProxy;\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\n        } else {\\n            revert(\\\"__settleFee: Invalid SettlementType\\\");\\n        }\\n\\n        emit FeeSettledForFund(_comptrollerProxy, _fee, settlementType, payer, payee, sharesDue);\\n    }\\n\\n    /// @dev Helper to settle fees that implement a given fee hook\\n    function __settleFees(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address[] memory _fees,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero\\n    ) private returns (uint256 gav_) {\\n        gav_ = _gavOrZero;\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            (bool settles, bool usesGav) = IFee(_fees[i]).settlesOnHook(_hook);\\n            if (!settles) {\\n                continue;\\n            }\\n\\n            if (usesGav) {\\n                gav_ = __getGavAsNecessary(_comptrollerProxy, gav_);\\n            }\\n\\n            __settleFee(_comptrollerProxy, _vaultProxy, _fees[i], _hook, _settlementData, gav_);\\n        }\\n\\n        return gav_;\\n    }\\n\\n    /// @dev Helper to update fees that implement a given fee hook\\n    function __updateFees(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address[] memory _fees,\\n        FeeHook _hook,\\n        bytes memory _settlementData,\\n        uint256 _gavOrZero\\n    ) private {\\n        uint256 gav = _gavOrZero;\\n\\n        for (uint256 i; i < _fees.length; i++) {\\n            (bool updates, bool usesGav) = IFee(_fees[i]).updatesOnHook(_hook);\\n            if (!updates) {\\n                continue;\\n            }\\n\\n            if (usesGav) {\\n                gav = __getGavAsNecessary(_comptrollerProxy, gav);\\n            }\\n\\n            IFee(_fees[i]).update(_comptrollerProxy, _vaultProxy, _hook, _settlementData, gav);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Get a list of enabled fees for a given fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return enabledFees_ An array of enabled fee addresses\\n    function getEnabledFeesForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (address[] memory enabledFees_)\\n    {\\n        return comptrollerProxyToFees[_comptrollerProxy];\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Get the amount of shares outstanding for a particular fee for a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _fee The fee address\\n    /// @return sharesOutstanding_ The amount of shares outstanding\\n    function getFeeSharesOutstandingForFund(address _comptrollerProxy, address _fee)\\n        public\\n        view\\n        returns (uint256 sharesOutstanding_)\\n    {\\n        return comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee];\\n    }\\n}\\n\",\"keccak256\":\"0x642e7eb586e3433184241de72fd1b40ec9f7e1ec69b9957e608f8ea8472ccacd\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title Fee Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all fees\\ninterface IFee {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\n\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\n        external\\n        returns (bool isPayable_);\\n\\n    function getRecipientForFund(address _comptrollerProxy)\\n        external\\n        view\\n        returns (address recipient_);\\n\\n    function settle(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    )\\n        external\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        );\\n\\n    function settlesOnHook(IFeeManager.FeeHook _hook)\\n        external\\n        view\\n        returns (bool settles_, bool usesGav_);\\n\\n    function update(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external;\\n\\n    function updatesOnHook(IFeeManager.FeeHook _hook)\\n        external\\n        view\\n        returns (bool updates_, bool usesGav_);\\n}\\n\",\"keccak256\":\"0x38e3f324c67f3205e38197165586ea82ca226069902f34214bcde76cf905fcff\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {Continuous, PreBuyShares, PostBuyShares, PreRedeemShares}\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa0cfee013a2a0f8891ee558dec4568dd6e76e3f033a214cbe5e74e93e8f68fd2\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\n\\n/// @title ExtensionBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base class for an extension\\nabstract contract ExtensionBase is IExtension, FundDeployerOwnerMixin {\\n    event ValidatedVaultProxySetForFund(\\n        address indexed comptrollerProxy,\\n        address indexed vaultProxy\\n    );\\n\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\n\\n    modifier onlyFundDeployer() {\\n        require(msg.sender == getFundDeployer(), \\\"Only the FundDeployer can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\n\\n    /// @notice Allows extension to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overridden.\\n    function activateForFund(bool) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\n    /// @dev Unimplemented by default, may be overridden.\\n    function deactivateForFund() external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\n    /// and dispatches the appropriate action\\n    /// @dev Unimplemented by default, may be overridden.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\n    }\\n\\n    /// @notice Allows extension to run logic during fund configuration\\n    /// @dev Unimplemented by default, may be overridden.\\n    function setConfigForFund(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override {\\n        return;\\n    }\\n\\n    /// @dev Helper to store the validated ComptrollerProxy-VaultProxy relation\\n    function __setValidatedVaultProxy(address _comptrollerProxy, address _vaultProxy) internal {\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = _vaultProxy;\\n\\n        emit ValidatedVaultProxySetForFund(_comptrollerProxy, _vaultProxy);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return vaultProxy_ The VaultProxy of the fund\\n    function getVaultProxyForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (address vaultProxy_)\\n    {\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0xae68767766f6459bd2cd9dbd39df74f2c2f68f2150885bbce410e4091c807bb1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\n\\n/// @title PermissionedVaultActionMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\nabstract contract PermissionedVaultActionMixin {\\n    /// @notice Adds an external position to active external positions\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The external position to be added\\n    function __addExternalPosition(address _comptrollerProxy, address _externalPosition) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Adds a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to add\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset for which to grant an allowance\\n    /// @param _target The spender of the allowance\\n    /// @param _amount The amount of the allowance\\n    function __approveAssetSpender(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.ApproveAssetSpender,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n\\n    /// @notice Burns fund shares for a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account for which to burn shares\\n    /// @param _amount The amount of shares to burn\\n    function __burnShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.BurnShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Executes a callOnExternalPosition\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _data The encoded data for the call\\n    function __callOnExternalPosition(address _comptrollerProxy, bytes memory _data) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.CallOnExternalPosition,\\n            _data\\n        );\\n    }\\n\\n    /// @notice Mints fund shares to a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account to which to mint shares\\n    /// @param _amount The amount of shares to mint\\n    function __mintShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.MintShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Removes an external position from the vaultProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The ExternalPosition to remove\\n    function __removeExternalPosition(address _comptrollerProxy, address _externalPosition)\\n        internal\\n    {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Removes a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to remove\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Transfers fund shares from one account to another\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _from The account from which to transfer shares\\n    /// @param _to The account to which to transfer shares\\n    /// @param _amount The amount of shares to transfer\\n    function __transferShares(\\n        address _comptrollerProxy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.TransferShares,\\n            abi.encode(_from, _to, _amount)\\n        );\\n    }\\n\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to withdraw\\n    /// @param _target The account to which to withdraw the asset\\n    /// @param _amount The amount of asset to withdraw\\n    function __withdrawAssetTo(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.WithdrawAssetTo,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x77ddb9299d9c5f1538c20ae1543c20ef73db11ad7d9a9b817d26969ab233bb57\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    /// @dev Helper to verify if a storage array contains a particular value\\n    function storageArrayContains(address[] storage _self, address _target)\\n        internal\\n        view\\n        returns (bool doesContain_)\\n    {\\n        uint256 arrLength = _self.length;\\n        for (uint256 i; i < arrLength; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0xd76e220cc754d7c939e54c18d4060f843ca798bccaf9a9dbbd428e38d0f0960f\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xd415583828581051080d575f058643f4975d7048fda0d1765122b260d9d14934\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e0238038062001e0283398101604081905262000034916200005d565b60601b6001600160601b031916608052620000b2565b8051620000578162000098565b92915050565b6000602082840312156200007057600080fd5b60006200007e84846200004a565b949350505050565b60006001600160a01b03821662000057565b620000a38162000086565b8114620000af57600080fd5b50565b60805160601c611d2d620000d56000398061032352806103b95250611d2d6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806397c0ac871161006657806397c0ac871461010f578063a9f3b42f14610117578063aa051c2c14610137578063bd8e959a14610157578063f067cc111461015f5761009e565b80631bee801e146100a357806346790346146100b85780637759c164146100e157806380d57063146100f4578063893d20e814610107575b600080fd5b6100b66100b13660046114e0565b610172565b005b6100cb6100c63660046113fa565b61020b565b6040516100d891906119f1565b60405180910390f35b6100b66100ef366004611613565b61022c565b6100b66101023660046115a7565b610272565b6100cb61031f565b6100cb6103b7565b61012a6101253660046113fa565b6103db565b6040516100d89190611ac6565b61014a61014536600461143e565b610451565b6040516100d89190611b84565b6100b661047e565b6100b661016d366004611478565b6104cb565b8261019b5761019633600060405180602001604052806000815250600060016106dd565b610205565b82600114156101e4576101963383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075d92505050565b60405162461bcd60e51b81526004016101fc90611b14565b60405180910390fd5b50505050565b6001600160a01b03808216600090815260208190526040902054165b919050565b610205338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250600191506106dd9050565b33600061027e8261020b565b9050606061028b836103db565b905060005b8151811015610318578181815181106102a557fe5b60200260200101516001600160a01b0316633146d05885856040518363ffffffff1660e01b81526004016102da9291906119ff565b600060405180830381600087803b1580156102f457600080fd5b505af1158015610308573d6000803e3d6000fd5b5050600190920191506102909050565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561037a57600080fd5b505afa15801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190611420565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526001602090815260409182902080548351818402810184019094528084526060939283018282801561044557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610427575b50505050509050919050565b6001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b33600061048a8261020b565b90506060610497836103db565b905060005b8151811015610205576104c384848484815181106104b657fe5b602002602001015161083f565b60010161049c565b6104d36103b7565b6001600160a01b0316336001600160a01b0316146105035760405162461bcd60e51b81526004016101fc90611b54565b61050d84846108f8565b60608061051c83850185611548565b9150915080518251146105415760405162461bcd60e51b81526004016101fc90611b34565b61054a8261094f565b6105665760405162461bcd60e51b81526004016101fc90611b44565b60005b82518110156106d45782818151811061057e57fe5b60200260200101516001600160a01b0316630f5f6b4f888484815181106105a157fe5b60200260200101516040518363ffffffff1660e01b81526004016105c6929190611a8b565b600060405180830381600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b505050506001600160a01b0387166000908152600160205260409020835184908390811061061e57fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055825183908290811061066757fe5b60200260200101516001600160a01b0316876001600160a01b03167f62b7814f137868e44c7a83c2b0a340fc5dacef8f3e748867d0f5f879fc0ef6da8484815181106106af57fe5b60200260200101516040516106c49190611ad7565b60405180910390a3600101610569565b50505050505050565b60606106e8866103db565b90508051600014156106fa5750610318565b60006107058761020b565b90506001600160a01b03811661072d5760405162461bcd60e51b81526004016101fc90611b74565b600061073d8883858a8a8a6109e3565b90508315610753576107538883858a8a86610adc565b5050505050505050565b6060818060200190518101906107739190611513565b905060006107803361020b565b905060005b82518110156103185782818151811061079a57fe5b60200260200101516001600160a01b031663b78b481386846040518363ffffffff1660e01b81526004016107cf9291906119ff565b602060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906115c5565b156108375761083785838584815181106104b657fe5b600101610785565b600061084b8483610451565b90508061085857506108f3565b6001600160a01b038085166000908152600260209081526040808320938616835292905290812081905561088d858585610c21565b905061089b85858385610d2b565b806001600160a01b0316836001600160a01b0316866001600160a01b03167f4e6eff738a7af3dbd4288f753eb551833c09a82d6c3dfaf07a23c3fcc82a3522856040516108e89190611b84565b60405180910390a450505b505050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517f8852dcaa71340ea616a65ffac013450dfb238607481fb9d78346c667fe256c139190a35050565b6000600182511161096257506001610227565b815160005b818110156109d957600181015b828110156109d05784818151811061098857fe5b60200260200101516001600160a01b03168583815181106109a557fe5b60200260200101516001600160a01b031614156109c85760009350505050610227565b600101610974565b50600101610967565b5060019392505050565b8060005b8551811015610ad0576000808783815181106109ff57fe5b60200260200101516001600160a01b031663320f0ddd886040518263ffffffff1660e01b8152600401610a329190611ae8565b604080518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8191906115e3565b9150915081610a91575050610ac8565b8015610aa457610aa18a85610dab565b93505b610ac58a8a8a8681518110610ab557fe5b60200260200101518a8a89610e33565b50505b6001016109e7565b505b9695505050505050565b8060005b855181101561075357600080878381518110610af857fe5b60200260200101516001600160a01b031663e337a91f886040518263ffffffff1660e01b8152600401610b2b9190611ae8565b604080518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a91906115e3565b9150915081610b8a575050610c19565b8015610b9d57610b9a8a85610dab565b93505b878381518110610ba957fe5b60200260200101516001600160a01b031663233faf5f8b8b8a8a896040518663ffffffff1660e01b8152600401610be4959493929190611a1a565b600060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b5050505050505b600101610ae0565b60405163189e02cf60e21b81526000906001600160a01b038316906362780b3c90610c509087906004016119f1565b60206040518083038186803b158015610c6857600080fd5b505afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611420565b90506001600160a01b038116610d2457826001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611420565b90505b9392505050565b836001600160a01b03166310acd06d6003858585604051602001610d5193929190611a63565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610d7d929190611af6565b600060405180830381600087803b158015610d9757600080fd5b505af1158015610753573d6000803e3d6000fd5b600081610e2c57826001600160a01b03166356cff99f6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2591906116ca565b9050610478565b5080610478565b6000806000866001600160a01b03166341892d7e8a8a8989896040518663ffffffff1660e01b8152600401610e6c959493929190611a1a565b606060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe919061167d565b919450925090506000836005811115610ed357fe5b1415610ee1575050506110c7565b60006001846005811115610ef157fe5b1415610f1557610f028a8a8a610c21565b9050610f108a848385610d2b565b611067565b6002846005811115610f2357fe5b1415610f4157610f348a8a8a610c21565b9050610f108a82846110cf565b6003846005811115610f4f57fe5b1415610f6057610f108a848461114d565b6004846005811115610f6e57fe5b1415610fd7576001600160a01b03808b166000908152600260209081526040808320938c1683529290522054610fa49083611171565b6001600160a01b03808c166000908152600260209081526040808320938d16835292905220555087610f108a82846110cf565b6005846005811115610fe557fe5b141561104f576001600160a01b03808b166000908152600260209081526040808320938c168352929052205461101b9083611196565b6001600160a01b03808c166000908152600260209081526040808320938d1683529290522055889250610f108a848461114d565b60405162461bcd60e51b81526004016101fc90611b64565b83600581111561107357fe5b886001600160a01b03168b6001600160a01b03167fef7da7c40d1fc52df907f6fed0e539680d5fb491c3b8f94db234a360dafe1d628685876040516110ba93929190611a63565b60405180910390a4505050505b505050505050565b826001600160a01b03166310acd06d600284846040516020016110f3929190611aab565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161111f929190611af6565b600060405180830381600087803b15801561113957600080fd5b505af11580156106d4573d6000803e3d6000fd5b826001600160a01b03166310acd06d600184846040516020016110f3929190611aab565b600082820183811015610d245760405162461bcd60e51b81526004016101fc90611b04565b6000828211156111b85760405162461bcd60e51b81526004016101fc90611b24565b50900390565b803561047881611cb7565b805161047881611cb7565b600082601f8301126111e557600080fd5b81356111f86111f382611bb9565b611b92565b9150818183526020840193506020810190508385602084028201111561121d57600080fd5b60005b83811015611249578161123388826111be565b8452506020928301929190910190600101611220565b5050505092915050565b600082601f83011261126457600080fd5b81516112726111f382611bb9565b9150818183526020840193506020810190508385602084028201111561129757600080fd5b60005b8381101561124957816112ad88826111c9565b845250602092830192919091019060010161129a565b600082601f8301126112d457600080fd5b81356112e26111f382611bb9565b81815260209384019390925082018360005b83811015611249578135860161130a888261137f565b84525060209283019291909101906001016112f4565b803561047881611ccb565b805161047881611ccb565b60008083601f84011261134857600080fd5b50813567ffffffffffffffff81111561136057600080fd5b60208301915083600182028301111561137857600080fd5b9250929050565b600082601f83011261139057600080fd5b813561139e6111f382611bda565b915080825260208301602083018583830111156113ba57600080fd5b6113c5838284611c5e565b50505092915050565b803561047881611cd4565b805161047881611ce1565b803561047881611cee565b805161047881611cee565b60006020828403121561140c57600080fd5b600061141884846111be565b949350505050565b60006020828403121561143257600080fd5b600061141884846111c9565b6000806040838503121561145157600080fd5b600061145d85856111be565b925050602061146e858286016111be565b9150509250929050565b6000806000806060858703121561148e57600080fd5b600061149a87876111be565b94505060206114ab878288016111be565b935050604085013567ffffffffffffffff8111156114c857600080fd5b6114d487828801611336565b95989497509550505050565b600080600080606085870312156114f657600080fd5b600061150287876111be565b94505060206114ab878288016113e4565b60006020828403121561152557600080fd5b815167ffffffffffffffff81111561153c57600080fd5b61141884828501611253565b6000806040838503121561155b57600080fd5b823567ffffffffffffffff81111561157257600080fd5b61157e858286016111d4565b925050602083013567ffffffffffffffff81111561159b57600080fd5b61146e858286016112c3565b6000602082840312156115b957600080fd5b60006114188484611320565b6000602082840312156115d757600080fd5b6000611418848461132b565b600080604083850312156115f657600080fd5b6000611602858561132b565b925050602061146e8582860161132b565b6000806000806060858703121561162957600080fd5b600061163587876113ce565b945050602085013567ffffffffffffffff81111561165257600080fd5b61165e87828801611336565b93509350506040611671878288016113e4565b91505092959194509250565b60008060006060848603121561169257600080fd5b600061169e86866113d9565b93505060206116af868287016111c9565b92505060406116c0868287016113ef565b9150509250925092565b6000602082840312156116dc57600080fd5b600061141884846113ef565b60006116f483836116fc565b505060200190565b61170581611c15565b82525050565b600061171682611c08565b6117208185611c0c565b935061172b83611c02565b8060005b8381101561175957815161174388826116e8565b975061174e83611c02565b92505060010161172f565b509495945050505050565b600061176f82611c08565b6117798185611c0c565b9350611789818560208601611c6a565b61179281611c96565b9093019392505050565b61170581611c48565b61170581611c53565b60006117bb601b83611c0c565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006117f4602d83611c0c565b7f7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e766181526c1b1a590817d858dd1a5bdb9259609a1b602082015260400192915050565b6000611843601e83611c0c565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600061187c603d83611c0c565b7f736574436f6e666967466f7246756e643a206665657320616e6420736574746981527f6e677344617461206172726179206c656e6774687320756e657175616c000000602082015260400192915050565b60006118db603083611c0c565b7f736574436f6e666967466f7246756e643a20666565732063616e6e6f7420696e81526f636c756465206475706c69636174657360801b602082015260400192915050565b600061192d602883611c0c565b7f4f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520748152671a1a5cc818d85b1b60c21b602082015260400192915050565b6000611977602383611c0c565b7f5f5f736574746c654665653a20496e76616c696420536574746c656d656e745481526279706560e81b602082015260400192915050565b60006119bc602083611c0c565b7f5f5f696e766f6b65486f6f6b3a2046756e64206973206e6f7420616374697665815260200192915050565b61170581611c45565b6020810161047882846116fc565b60408101611a0d82856116fc565b610d2460208301846116fc565b60a08101611a2882886116fc565b611a3560208301876116fc565b611a42604083018661179c565b8181036060830152611a548185611764565b9050610ad260808301846119e8565b60608101611a7182866116fc565b611a7e60208301856116fc565b61141860408301846119e8565b60408101611a9982856116fc565b8181036020830152610d218184611764565b60408101611ab982856116fc565b610d2460208301846119e8565b60208082528101610d24818461170b565b60208082528101610d248184611764565b60208101610478828461179c565b60408101611a9982856117a5565b60208082528101610478816117ae565b60208082528101610478816117e7565b6020808252810161047881611836565b602080825281016104788161186f565b60208082528101610478816118ce565b6020808252810161047881611920565b602080825281016104788161196a565b60208082528101610478816119af565b6020810161047882846119e8565b60405181810167ffffffffffffffff81118282101715611bb157600080fd5b604052919050565b600067ffffffffffffffff821115611bd057600080fd5b5060209081020190565b600067ffffffffffffffff821115611bf157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061047882611c39565b151590565b8061022781611ca0565b8061022781611cad565b6001600160a01b031690565b90565b600061047882611c25565b600061047882611c2f565b82818337506000910152565b60005b83811015611c85578181015183820152602001611c6d565b838111156102055750506000910152565b601f01601f191690565b60048110611caa57fe5b50565b600b8110611caa57fe5b611cc081611c15565b8114611caa57600080fd5b611cc081611c20565b60048110611caa57600080fd5b60068110611caa57600080fd5b611cc081611c4556fea2646970667358221220a1eab7dcd4b6993cee4d5eac610b36661e99606c905fd3588c06ea9179dcad3464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806397c0ac871161006657806397c0ac871461010f578063a9f3b42f14610117578063aa051c2c14610137578063bd8e959a14610157578063f067cc111461015f5761009e565b80631bee801e146100a357806346790346146100b85780637759c164146100e157806380d57063146100f4578063893d20e814610107575b600080fd5b6100b66100b13660046114e0565b610172565b005b6100cb6100c63660046113fa565b61020b565b6040516100d891906119f1565b60405180910390f35b6100b66100ef366004611613565b61022c565b6100b66101023660046115a7565b610272565b6100cb61031f565b6100cb6103b7565b61012a6101253660046113fa565b6103db565b6040516100d89190611ac6565b61014a61014536600461143e565b610451565b6040516100d89190611b84565b6100b661047e565b6100b661016d366004611478565b6104cb565b8261019b5761019633600060405180602001604052806000815250600060016106dd565b610205565b82600114156101e4576101963383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061075d92505050565b60405162461bcd60e51b81526004016101fc90611b14565b60405180910390fd5b50505050565b6001600160a01b03808216600090815260208190526040902054165b919050565b610205338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250879250600191506106dd9050565b33600061027e8261020b565b9050606061028b836103db565b905060005b8151811015610318578181815181106102a557fe5b60200260200101516001600160a01b0316633146d05885856040518363ffffffff1660e01b81526004016102da9291906119ff565b600060405180830381600087803b1580156102f457600080fd5b505af1158015610308573d6000803e3d6000fd5b5050600190920191506102909050565b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561037a57600080fd5b505afa15801561038e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b29190611420565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526001602090815260409182902080548351818402810184019094528084526060939283018282801561044557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610427575b50505050509050919050565b6001600160a01b038083166000908152600260209081526040808320938516835292905220545b92915050565b33600061048a8261020b565b90506060610497836103db565b905060005b8151811015610205576104c384848484815181106104b657fe5b602002602001015161083f565b60010161049c565b6104d36103b7565b6001600160a01b0316336001600160a01b0316146105035760405162461bcd60e51b81526004016101fc90611b54565b61050d84846108f8565b60608061051c83850185611548565b9150915080518251146105415760405162461bcd60e51b81526004016101fc90611b34565b61054a8261094f565b6105665760405162461bcd60e51b81526004016101fc90611b44565b60005b82518110156106d45782818151811061057e57fe5b60200260200101516001600160a01b0316630f5f6b4f888484815181106105a157fe5b60200260200101516040518363ffffffff1660e01b81526004016105c6929190611a8b565b600060405180830381600087803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b505050506001600160a01b0387166000908152600160205260409020835184908390811061061e57fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055825183908290811061066757fe5b60200260200101516001600160a01b0316876001600160a01b03167f62b7814f137868e44c7a83c2b0a340fc5dacef8f3e748867d0f5f879fc0ef6da8484815181106106af57fe5b60200260200101516040516106c49190611ad7565b60405180910390a3600101610569565b50505050505050565b60606106e8866103db565b90508051600014156106fa5750610318565b60006107058761020b565b90506001600160a01b03811661072d5760405162461bcd60e51b81526004016101fc90611b74565b600061073d8883858a8a8a6109e3565b90508315610753576107538883858a8a86610adc565b5050505050505050565b6060818060200190518101906107739190611513565b905060006107803361020b565b905060005b82518110156103185782818151811061079a57fe5b60200260200101516001600160a01b031663b78b481386846040518363ffffffff1660e01b81526004016107cf9291906119ff565b602060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082191906115c5565b156108375761083785838584815181106104b657fe5b600101610785565b600061084b8483610451565b90508061085857506108f3565b6001600160a01b038085166000908152600260209081526040808320938616835292905290812081905561088d858585610c21565b905061089b85858385610d2b565b806001600160a01b0316836001600160a01b0316866001600160a01b03167f4e6eff738a7af3dbd4288f753eb551833c09a82d6c3dfaf07a23c3fcc82a3522856040516108e89190611b84565b60405180910390a450505b505050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517f8852dcaa71340ea616a65ffac013450dfb238607481fb9d78346c667fe256c139190a35050565b6000600182511161096257506001610227565b815160005b818110156109d957600181015b828110156109d05784818151811061098857fe5b60200260200101516001600160a01b03168583815181106109a557fe5b60200260200101516001600160a01b031614156109c85760009350505050610227565b600101610974565b50600101610967565b5060019392505050565b8060005b8551811015610ad0576000808783815181106109ff57fe5b60200260200101516001600160a01b031663320f0ddd886040518263ffffffff1660e01b8152600401610a329190611ae8565b604080518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8191906115e3565b9150915081610a91575050610ac8565b8015610aa457610aa18a85610dab565b93505b610ac58a8a8a8681518110610ab557fe5b60200260200101518a8a89610e33565b50505b6001016109e7565b505b9695505050505050565b8060005b855181101561075357600080878381518110610af857fe5b60200260200101516001600160a01b031663e337a91f886040518263ffffffff1660e01b8152600401610b2b9190611ae8565b604080518083038186803b158015610b4257600080fd5b505afa158015610b56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7a91906115e3565b9150915081610b8a575050610c19565b8015610b9d57610b9a8a85610dab565b93505b878381518110610ba957fe5b60200260200101516001600160a01b031663233faf5f8b8b8a8a896040518663ffffffff1660e01b8152600401610be4959493929190611a1a565b600060405180830381600087803b158015610bfe57600080fd5b505af1158015610c12573d6000803e3d6000fd5b5050505050505b600101610ae0565b60405163189e02cf60e21b81526000906001600160a01b038316906362780b3c90610c509087906004016119f1565b60206040518083038186803b158015610c6857600080fd5b505afa158015610c7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca09190611420565b90506001600160a01b038116610d2457826001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610ce957600080fd5b505afa158015610cfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d219190611420565b90505b9392505050565b836001600160a01b03166310acd06d6003858585604051602001610d5193929190611a63565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610d7d929190611af6565b600060405180830381600087803b158015610d9757600080fd5b505af1158015610753573d6000803e3d6000fd5b600081610e2c57826001600160a01b03166356cff99f6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2591906116ca565b9050610478565b5080610478565b6000806000866001600160a01b03166341892d7e8a8a8989896040518663ffffffff1660e01b8152600401610e6c959493929190611a1a565b606060405180830381600087803b158015610e8657600080fd5b505af1158015610e9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebe919061167d565b919450925090506000836005811115610ed357fe5b1415610ee1575050506110c7565b60006001846005811115610ef157fe5b1415610f1557610f028a8a8a610c21565b9050610f108a848385610d2b565b611067565b6002846005811115610f2357fe5b1415610f4157610f348a8a8a610c21565b9050610f108a82846110cf565b6003846005811115610f4f57fe5b1415610f6057610f108a848461114d565b6004846005811115610f6e57fe5b1415610fd7576001600160a01b03808b166000908152600260209081526040808320938c1683529290522054610fa49083611171565b6001600160a01b03808c166000908152600260209081526040808320938d16835292905220555087610f108a82846110cf565b6005846005811115610fe557fe5b141561104f576001600160a01b03808b166000908152600260209081526040808320938c168352929052205461101b9083611196565b6001600160a01b03808c166000908152600260209081526040808320938d1683529290522055889250610f108a848461114d565b60405162461bcd60e51b81526004016101fc90611b64565b83600581111561107357fe5b886001600160a01b03168b6001600160a01b03167fef7da7c40d1fc52df907f6fed0e539680d5fb491c3b8f94db234a360dafe1d628685876040516110ba93929190611a63565b60405180910390a4505050505b505050505050565b826001600160a01b03166310acd06d600284846040516020016110f3929190611aab565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161111f929190611af6565b600060405180830381600087803b15801561113957600080fd5b505af11580156106d4573d6000803e3d6000fd5b826001600160a01b03166310acd06d600184846040516020016110f3929190611aab565b600082820183811015610d245760405162461bcd60e51b81526004016101fc90611b04565b6000828211156111b85760405162461bcd60e51b81526004016101fc90611b24565b50900390565b803561047881611cb7565b805161047881611cb7565b600082601f8301126111e557600080fd5b81356111f86111f382611bb9565b611b92565b9150818183526020840193506020810190508385602084028201111561121d57600080fd5b60005b83811015611249578161123388826111be565b8452506020928301929190910190600101611220565b5050505092915050565b600082601f83011261126457600080fd5b81516112726111f382611bb9565b9150818183526020840193506020810190508385602084028201111561129757600080fd5b60005b8381101561124957816112ad88826111c9565b845250602092830192919091019060010161129a565b600082601f8301126112d457600080fd5b81356112e26111f382611bb9565b81815260209384019390925082018360005b83811015611249578135860161130a888261137f565b84525060209283019291909101906001016112f4565b803561047881611ccb565b805161047881611ccb565b60008083601f84011261134857600080fd5b50813567ffffffffffffffff81111561136057600080fd5b60208301915083600182028301111561137857600080fd5b9250929050565b600082601f83011261139057600080fd5b813561139e6111f382611bda565b915080825260208301602083018583830111156113ba57600080fd5b6113c5838284611c5e565b50505092915050565b803561047881611cd4565b805161047881611ce1565b803561047881611cee565b805161047881611cee565b60006020828403121561140c57600080fd5b600061141884846111be565b949350505050565b60006020828403121561143257600080fd5b600061141884846111c9565b6000806040838503121561145157600080fd5b600061145d85856111be565b925050602061146e858286016111be565b9150509250929050565b6000806000806060858703121561148e57600080fd5b600061149a87876111be565b94505060206114ab878288016111be565b935050604085013567ffffffffffffffff8111156114c857600080fd5b6114d487828801611336565b95989497509550505050565b600080600080606085870312156114f657600080fd5b600061150287876111be565b94505060206114ab878288016113e4565b60006020828403121561152557600080fd5b815167ffffffffffffffff81111561153c57600080fd5b61141884828501611253565b6000806040838503121561155b57600080fd5b823567ffffffffffffffff81111561157257600080fd5b61157e858286016111d4565b925050602083013567ffffffffffffffff81111561159b57600080fd5b61146e858286016112c3565b6000602082840312156115b957600080fd5b60006114188484611320565b6000602082840312156115d757600080fd5b6000611418848461132b565b600080604083850312156115f657600080fd5b6000611602858561132b565b925050602061146e8582860161132b565b6000806000806060858703121561162957600080fd5b600061163587876113ce565b945050602085013567ffffffffffffffff81111561165257600080fd5b61165e87828801611336565b93509350506040611671878288016113e4565b91505092959194509250565b60008060006060848603121561169257600080fd5b600061169e86866113d9565b93505060206116af868287016111c9565b92505060406116c0868287016113ef565b9150509250925092565b6000602082840312156116dc57600080fd5b600061141884846113ef565b60006116f483836116fc565b505060200190565b61170581611c15565b82525050565b600061171682611c08565b6117208185611c0c565b935061172b83611c02565b8060005b8381101561175957815161174388826116e8565b975061174e83611c02565b92505060010161172f565b509495945050505050565b600061176f82611c08565b6117798185611c0c565b9350611789818560208601611c6a565b61179281611c96565b9093019392505050565b61170581611c48565b61170581611c53565b60006117bb601b83611c0c565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006117f4602d83611c0c565b7f7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e766181526c1b1a590817d858dd1a5bdb9259609a1b602082015260400192915050565b6000611843601e83611c0c565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600061187c603d83611c0c565b7f736574436f6e666967466f7246756e643a206665657320616e6420736574746981527f6e677344617461206172726179206c656e6774687320756e657175616c000000602082015260400192915050565b60006118db603083611c0c565b7f736574436f6e666967466f7246756e643a20666565732063616e6e6f7420696e81526f636c756465206475706c69636174657360801b602082015260400192915050565b600061192d602883611c0c565b7f4f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520748152671a1a5cc818d85b1b60c21b602082015260400192915050565b6000611977602383611c0c565b7f5f5f736574746c654665653a20496e76616c696420536574746c656d656e745481526279706560e81b602082015260400192915050565b60006119bc602083611c0c565b7f5f5f696e766f6b65486f6f6b3a2046756e64206973206e6f7420616374697665815260200192915050565b61170581611c45565b6020810161047882846116fc565b60408101611a0d82856116fc565b610d2460208301846116fc565b60a08101611a2882886116fc565b611a3560208301876116fc565b611a42604083018661179c565b8181036060830152611a548185611764565b9050610ad260808301846119e8565b60608101611a7182866116fc565b611a7e60208301856116fc565b61141860408301846119e8565b60408101611a9982856116fc565b8181036020830152610d218184611764565b60408101611ab982856116fc565b610d2460208301846119e8565b60208082528101610d24818461170b565b60208082528101610d248184611764565b60208101610478828461179c565b60408101611a9982856117a5565b60208082528101610478816117ae565b60208082528101610478816117e7565b6020808252810161047881611836565b602080825281016104788161186f565b60208082528101610478816118ce565b6020808252810161047881611920565b602080825281016104788161196a565b60208082528101610478816119af565b6020810161047882846119e8565b60405181810167ffffffffffffffff81118282101715611bb157600080fd5b604052919050565b600067ffffffffffffffff821115611bd057600080fd5b5060209081020190565b600067ffffffffffffffff821115611bf157600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b600061047882611c39565b151590565b8061022781611ca0565b8061022781611cad565b6001600160a01b031690565b90565b600061047882611c25565b600061047882611c2f565b82818337506000910152565b60005b83811015611c85578181015183820152602001611c6d565b838111156102055750506000910152565b601f01601f191690565b60048110611caa57fe5b50565b600b8110611caa57fe5b611cc081611c15565b8114611caa57600080fd5b611cc081611c20565b60048110611caa57600080fd5b60068110611caa57600080fd5b611cc081611c4556fea2646970667358221220a1eab7dcd4b6993cee4d5eac610b36661e99606c905fd3588c06ea9179dcad3464736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Any arbitrary fee is allowed by default, so all participants must be aware of their fund's configuration, especially whether they use official fees only. Fees can only be added upon fund setup, migration, or reconfiguration.",
    "kind": "dev",
    "methods": {
      "deactivateForFund()": {
        "details": "There will be no fees if the caller is not a valid ComptrollerProxy"
      },
      "getEnabledFeesForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "enabledFees_": "An array of enabled fee addresses"
        }
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_fee": "The fee address"
        },
        "returns": {
          "sharesOutstanding_": "The amount of shares outstanding"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getVaultProxyForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "vaultProxy_": "The VaultProxy of the fund"
        }
      },
      "invokeHook(uint8,bytes,uint256)": {
        "params": {
          "_gav": "The GAV for a fund if known in the invocating code, otherwise 0",
          "_hook": "The FeeHook to invoke",
          "_settlementData": "The encoded settlement parameters specific to the FeeHook"
        }
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "details": "This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.",
        "params": {
          "_actionId": "An ID representing the desired action",
          "_callArgs": "Encoded arguments specific to the _actionId"
        }
      },
      "setConfigForFund(address,address,bytes)": {
        "details": "The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.",
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_configData": "Encoded config data",
          "_vaultProxy": "The VaultProxy of the fund"
        }
      }
    },
    "title": "FeeManager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(bool)": {
        "notice": "Activate already-configured fees for use in the calling fund"
      },
      "deactivateForFund()": {
        "notice": "Deactivate fees for a fund"
      },
      "getEnabledFeesForFund(address)": {
        "notice": "Get a list of enabled fees for a given fund"
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "notice": "Get the amount of shares outstanding for a particular fee for a fund"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getVaultProxyForFund(address)": {
        "notice": "Gets the verified VaultProxy for a given ComptrollerProxy"
      },
      "invokeHook(uint8,bytes,uint256)": {
        "notice": "Allows all fees for a particular FeeHook to implement settle() and update() logic"
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "notice": "Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy"
      },
      "setConfigForFund(address,address,bytes)": {
        "notice": "Enable and configure fees for use in the calling fund"
      }
    },
    "notice": "Manages fees for funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41927,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToVaultProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 23424,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 23430,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFeeToSharesOutstanding",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}