{
  "address": "0x41126FfF4b633df275804DD11778b9f0BB5F0987",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_externalPositionFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "externalPosition",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "actionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "actionArgs",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsToTransfer",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amountsToTransfer",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "assetsToReceive",
          "type": "address[]"
        }
      ],
      "name": "CallOnExternalPositionExecutedForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "externalPosition",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "externalPositionTypeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "ExternalPositionDeployedForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "typeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lib",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parser",
          "type": "address"
        }
      ],
      "name": "ExternalPositionTypeInfoUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "ValidatedVaultProxySetForFund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExternalPositionFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "externalPositionFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        }
      ],
      "name": "getExternalPositionLibForType",
      "outputs": [
        {
          "internalType": "address",
          "name": "lib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_typeId",
          "type": "uint256"
        }
      ],
      "name": "getExternalPositionParserForType",
      "outputs": [
        {
          "internalType": "address",
          "name": "parser_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getVaultProxyForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "setConfigForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_typeIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "_libs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_parsers",
          "type": "address[]"
        }
      ],
      "name": "updateExternalPositionTypesInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x986da76258284102a4ec813aef7821c16eed6ebda3cd838f8f06e90db09dcb25",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0x41126FfF4b633df275804DD11778b9f0BB5F0987",
    "transactionIndex": 0,
    "gasUsed": "2084011",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7a59b69a28df73200f91e783003f8ad6a35706ee0f7bca209b9e3aa82bb19671",
    "transactionHash": "0x986da76258284102a4ec813aef7821c16eed6ebda3cd838f8f06e90db09dcb25",
    "logs": [],
    "blockNumber": 11761493,
    "cumulativeGasUsed": "2084011",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f",
    "0x8FE02b7599D788c4826C04bA9A16e1c72CdfE00d",
    "0x92AF075CCf78588eE15999F4Cbb27f980eB8FEA6"
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalPositionFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"externalPosition\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"actionArgs\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsToTransfer\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amountsToTransfer\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetsToReceive\",\"type\":\"address[]\"}],\"name\":\"CallOnExternalPositionExecutedForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"externalPosition\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"externalPositionTypeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ExternalPositionDeployedForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lib\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parser\",\"type\":\"address\"}],\"name\":\"ExternalPositionTypeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"ValidatedVaultProxySetForFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExternalPositionFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"externalPositionFactory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"}],\"name\":\"getExternalPositionLibForType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_typeId\",\"type\":\"uint256\"}],\"name\":\"getExternalPositionParserForType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"parser_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getVaultProxyForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setConfigForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_typeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_libs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_parsers\",\"type\":\"address[]\"}],\"name\":\"updateExternalPositionTypesInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(bool)\":{\"details\":\"Unimplemented by default, may be overridden.\"},\"deactivateForFund()\":{\"details\":\"Unimplemented by default, may be overridden.\"},\"getExternalPositionFactory()\":{\"returns\":{\"externalPositionFactory_\":\"The `EXTERNAL_POSITION_FACTORY` variable value\"}},\"getExternalPositionLibForType(uint256)\":{\"params\":{\"_typeId\":\"The type for which to get the external position library\"},\"returns\":{\"lib_\":\"The external position library\"}},\"getExternalPositionParserForType(uint256)\":{\"params\":{\"_typeId\":\"The type for which to get the external position's parser\"},\"returns\":{\"parser_\":\"The external position parser\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"getVaultProxyForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"vaultProxy_\":\"The VaultProxy of the fund\"}},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"params\":{\"_actionId\":\"An ID representing the desired action\",\"_callArgs\":\"The encoded args for the action\",\"_caller\":\"The user who called for this action\"}},\"setConfigForFund(address,address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_vaultProxy\":\"The VaultProxy of the fund\"}},\"updateExternalPositionTypesInfo(uint256[],address[],address[])\":{\"params\":{\"_libs\":\"The libs\",\"_parsers\":\"The parsers\",\"_typeIds\":\"The external position type ids for which to set the libs and parsers\"}}},\"title\":\"ExternalPositionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(bool)\":{\"notice\":\"Allows extension to run logic during fund activation\"},\"deactivateForFund()\":{\"notice\":\"Allows extension to run logic during fund deactivation (destruct)\"},\"getExternalPositionFactory()\":{\"notice\":\"Gets the `EXTERNAL_POSITION_FACTORY` variable\"},\"getExternalPositionLibForType(uint256)\":{\"notice\":\"Gets the external position library contract for a given type\"},\"getExternalPositionParserForType(uint256)\":{\"notice\":\"Gets the external position parser contract for a given type\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable\"},\"getVaultProxyForFund(address)\":{\"notice\":\"Gets the verified VaultProxy for a given ComptrollerProxy\"},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"notice\":\"Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\"},\"setConfigForFund(address,address,bytes)\":{\"notice\":\"Enables the ExternalPositionManager to be used by a fund\"},\"updateExternalPositionTypesInfo(uint256[],address[],address[])\":{\"notice\":\"Updates the libs and parsers for a set of external position type ids\"}},\"notice\":\"Extension to handle external position actions for funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/external-position-manager/ExternalPositionManager.sol\":\"ExternalPositionManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/ExternalPositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../dispatcher/IDispatcher.sol\\\";\\nimport \\\"./ExternalPositionProxy.sol\\\";\\n\\n/// @title ExternalPositionFactory Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract factory for External Positions\\ncontract ExternalPositionFactory {\\n    event PositionDeployed(\\n        address indexed vaultProxy,\\n        uint256 indexed typeId,\\n        address indexed constructLib,\\n        bytes constructData\\n    );\\n\\n    event PositionDeployerAdded(address positionDeployer);\\n\\n    event PositionDeployerRemoved(address positionDeployer);\\n\\n    event PositionTypeAdded(uint256 typeId, string label);\\n\\n    event PositionTypeLabelUpdated(uint256 indexed typeId, string label);\\n\\n    address private immutable DISPATCHER;\\n\\n    uint256 private positionTypeCounter;\\n    mapping(uint256 => string) private positionTypeIdToLabel;\\n    mapping(address => bool) private accountToIsExternalPositionProxy;\\n    mapping(address => bool) private accountToIsPositionDeployer;\\n\\n    modifier onlyDispatcherOwner {\\n        require(\\n            msg.sender == IDispatcher(getDispatcher()).getOwner(),\\n            \\\"Only the Dispatcher owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _dispatcher) public {\\n        DISPATCHER = _dispatcher;\\n    }\\n\\n    /// @notice Creates a new external position proxy and adds it to the list of supported external positions\\n    /// @param _constructData Encoded data to be used on the ExternalPositionProxy constructor\\n    /// @param _vaultProxy The _vaultProxy owner of the external position\\n    /// @param _typeId The type of external position to be created\\n    /// @param _constructLib The external position lib contract that will be used on the constructor\\n    function deploy(\\n        address _vaultProxy,\\n        uint256 _typeId,\\n        address _constructLib,\\n        bytes memory _constructData\\n    ) external returns (address externalPositionProxy_) {\\n        require(\\n            isPositionDeployer(msg.sender),\\n            \\\"deploy: Only a position deployer can call this function\\\"\\n        );\\n\\n        externalPositionProxy_ = address(\\n            new ExternalPositionProxy(_vaultProxy, _typeId, _constructLib, _constructData)\\n        );\\n\\n        accountToIsExternalPositionProxy[externalPositionProxy_] = true;\\n\\n        emit PositionDeployed(_vaultProxy, _typeId, _constructLib, _constructData);\\n\\n        return externalPositionProxy_;\\n    }\\n\\n    ////////////////////\\n    // TYPES REGISTRY //\\n    ////////////////////\\n\\n    /// @notice Adds a set of new position types\\n    /// @param _labels Labels for each new position type\\n    function addNewPositionTypes(string[] calldata _labels) external onlyDispatcherOwner {\\n        for (uint256 i; i < _labels.length; i++) {\\n            uint256 typeId = getPositionTypeCounter();\\n            positionTypeCounter++;\\n\\n            positionTypeIdToLabel[typeId] = _labels[i];\\n\\n            emit PositionTypeAdded(typeId, _labels[i]);\\n        }\\n    }\\n\\n    /// @notice Updates a set of position type labels\\n    /// @param _typeIds The position type ids\\n    /// @param _labels The updated labels\\n    function updatePositionTypeLabels(uint256[] calldata _typeIds, string[] calldata _labels)\\n        external\\n        onlyDispatcherOwner\\n    {\\n        require(_typeIds.length == _labels.length, \\\"updatePositionTypeLabels: Unequal arrays\\\");\\n        for (uint256 i; i < _typeIds.length; i++) {\\n            positionTypeIdToLabel[_typeIds[i]] = _labels[i];\\n\\n            emit PositionTypeLabelUpdated(_typeIds[i], _labels[i]);\\n        }\\n    }\\n\\n    /////////////////////////////////\\n    // POSITION DEPLOYERS REGISTRY //\\n    /////////////////////////////////\\n\\n    /// @notice Adds a set of new position deployers\\n    /// @param _accounts Accounts to be added as position deployers\\n    function addPositionDeployers(address[] memory _accounts) external onlyDispatcherOwner {\\n        for (uint256 i; i < _accounts.length; i++) {\\n            require(\\n                !isPositionDeployer(_accounts[i]),\\n                \\\"addPositionDeployers: Account is already a position deployer\\\"\\n            );\\n\\n            accountToIsPositionDeployer[_accounts[i]] = true;\\n\\n            emit PositionDeployerAdded(_accounts[i]);\\n        }\\n    }\\n\\n    /// @notice Removes a set of existing position deployers\\n    /// @param _accounts Existing position deployers to be removed from their role\\n    function removePositionDeployers(address[] memory _accounts) external onlyDispatcherOwner {\\n        for (uint256 i; i < _accounts.length; i++) {\\n            require(\\n                isPositionDeployer(_accounts[i]),\\n                \\\"removePositionDeployers: Account is not a position deployer\\\"\\n            );\\n\\n            accountToIsPositionDeployer[_accounts[i]] = false;\\n\\n            emit PositionDeployerRemoved(_accounts[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Gets the label for a position type\\n    /// @param _typeId The position type id\\n    /// @return label_ The label\\n    function getLabelForPositionType(uint256 _typeId)\\n        external\\n        view\\n        returns (string memory label_)\\n    {\\n        return positionTypeIdToLabel[_typeId];\\n    }\\n\\n    /// @notice Checks if an account is an external position proxy\\n    /// @param _account The account to check\\n    /// @return isExternalPositionProxy_ True if the account is an externalPositionProxy\\n    function isExternalPositionProxy(address _account)\\n        external\\n        view\\n        returns (bool isExternalPositionProxy_)\\n    {\\n        return accountToIsExternalPositionProxy[_account];\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the `DISPATCHER` variable\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    function getDispatcher() public view returns (address dispatcher_) {\\n        return DISPATCHER;\\n    }\\n\\n    /// @notice Gets the `positionTypeCounter` variable\\n    /// @return positionTypeCounter_ The `positionTypeCounter` variable value\\n    function getPositionTypeCounter() public view returns (uint256 positionTypeCounter_) {\\n        return positionTypeCounter;\\n    }\\n\\n    /// @notice Checks if an account is a position deployer\\n    /// @param _account The account to check\\n    /// @return isPositionDeployer_ True if the account is a position deployer\\n    function isPositionDeployer(address _account) public view returns (bool isPositionDeployer_) {\\n        return accountToIsPositionDeployer[_account];\\n    }\\n}\\n\",\"keccak256\":\"0xb5a7e95aa1adef37005a1d29ec17594b15c2014766da71ae6ee36ab9c6c22508\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/ExternalPositionProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"./IExternalPosition.sol\\\";\\nimport \\\"./IExternalPositionProxy.sol\\\";\\n\\n/// @title ExternalPositionProxy Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A proxy for all external positions, modified from EIP-1822\\ncontract ExternalPositionProxy is IExternalPositionProxy {\\n    uint256 private immutable EXTERNAL_POSITION_TYPE;\\n    address private immutable VAULT_PROXY;\\n\\n    /// @dev Needed to receive ETH on external positions\\n    receive() external payable {}\\n\\n    constructor(\\n        address _vaultProxy,\\n        uint256 _typeId,\\n        address _constructLib,\\n        bytes memory _constructData\\n    ) public {\\n        VAULT_PROXY = _vaultProxy;\\n        EXTERNAL_POSITION_TYPE = _typeId;\\n\\n        (bool success, bytes memory returnData) = _constructLib.delegatecall(_constructData);\\n\\n        require(success, string(returnData));\\n    }\\n\\n    // solhint-disable-next-line no-complex-fallback\\n    fallback() external payable {\\n        address contractLogic = IExternalPositionVault(getVaultProxy())\\n            .getExternalPositionLibForType(getExternalPositionType());\\n        assembly {\\n            calldatacopy(0x0, 0x0, calldatasize())\\n            let success := delegatecall(\\n                sub(gas(), 10000),\\n                contractLogic,\\n                0x0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            let retSz := returndatasize()\\n            returndatacopy(0, 0, retSz)\\n            switch success\\n                case 0 {\\n                    revert(0, retSz)\\n                }\\n                default {\\n                    return(0, retSz)\\n                }\\n        }\\n    }\\n\\n    /// @notice Delegates call to IExternalPosition.receiveCallFromVault\\n    /// @param _data The bytes data variable to be decoded at the External Position\\n    function receiveCallFromVault(bytes calldata _data) external {\\n        require(\\n            msg.sender == getVaultProxy(),\\n            \\\"receiveCallFromVault: Only the vault can make this call\\\"\\n        );\\n        address contractLogic = IExternalPositionVault(getVaultProxy())\\n            .getExternalPositionLibForType(getExternalPositionType());\\n        (bool success, bytes memory returnData) = contractLogic.delegatecall(\\n            abi.encodeWithSelector(IExternalPosition.receiveCallFromVault.selector, _data)\\n        );\\n\\n        require(success, string(returnData));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `EXTERNAL_POSITION_TYPE` variable\\n    /// @return externalPositionType_ The `EXTERNAL_POSITION_TYPE` variable value\\n    function getExternalPositionType()\\n        public\\n        view\\n        override\\n        returns (uint256 externalPositionType_)\\n    {\\n        return EXTERNAL_POSITION_TYPE;\\n    }\\n\\n    /// @notice Gets the `VAULT_PROXY` variable\\n    /// @return vaultProxy_ The `VAULT_PROXY` variable value\\n    function getVaultProxy() public view override returns (address vaultProxy_) {\\n        return VAULT_PROXY;\\n    }\\n}\\n\",\"keccak256\":\"0xb7260d1564c6de43cd2a31f9f7d32deb7599fd68b57dad47e0daa787845549e1\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/IExternalPosition.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPosition Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IExternalPosition {\\n    function getDebtAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function getManagedAssets() external returns (address[] memory, uint256[] memory);\\n\\n    function init(bytes memory) external;\\n\\n    function receiveCallFromVault(bytes memory) external;\\n}\\n\",\"keccak256\":\"0x00e6ea9721e5fd1e72215e4c744306097d7f8b1a834cced5d65a17a924f750ad\",\"license\":\"GPL-3.0\"},\"contracts/persistent/external-positions/IExternalPositionProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    (c) Enzyme Council <council@enzyme.finance>\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionProxy interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An interface for publicly accessible functions on the ExternalPositionProxy\\ninterface IExternalPositionProxy {\\n    function getExternalPositionType() external view returns (uint256);\\n\\n    function getVaultProxy() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc74e623dbdc949df49e9cef31e0f958b17c715d89198dbbc1754d8f9c21e90de\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c047551a9bab8cb84299c4cf17d0435f1d4d0791ecc1d03e0d55cb3450baad6\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\",\"keccak256\":\"0xe31f063493e6e3a4434eaa5629c0a706b8fa0569aff3f4ef9d62e27a1928cfa0\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b901b81b3a4ef3d30ef9b4a1fa7fdd6526dfacd66e9971d1f988c2b63334314\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav() external returns (uint256);\\n\\n    function calcGrossShareValue() external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\",\"keccak256\":\"0x51d4a60ba37b5f9198ef1328e08ff45efe0dee76bc067d71ed98f3a221c3636f\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function setSymbol(string calldata) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x988fb29885af5cd96ad8d9f9a8be4689bcbfbcde564bc0b799beb0d1406215ec\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x59aaa2ddd32c24271bd4a57e9e1f3426570a78cd56d6d11e63786f36c916e94b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/ExternalPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n    \\n    (c) Enzyme Council <council@enzyme.finance>\\n    \\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../persistent/external-positions/ExternalPositionFactory.sol\\\";\\nimport \\\"../../../persistent/external-positions/IExternalPosition.sol\\\";\\nimport \\\"../../../persistent/external-positions/IExternalPositionProxy.sol\\\";\\nimport \\\"../policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../utils/ExtensionBase.sol\\\";\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\nimport \\\"./external-positions/IExternalPositionParser.sol\\\";\\nimport \\\"./IExternalPositionManager.sol\\\";\\n\\n/// @title ExternalPositionManager\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Extension to handle external position actions for funds\\ncontract ExternalPositionManager is\\n    IExternalPositionManager,\\n    ExtensionBase,\\n    PermissionedVaultActionMixin\\n{\\n    event CallOnExternalPositionExecutedForFund(\\n        address indexed caller,\\n        address indexed comptrollerProxy,\\n        address indexed externalPosition,\\n        uint256 actionId,\\n        bytes actionArgs,\\n        address[] assetsToTransfer,\\n        uint256[] amountsToTransfer,\\n        address[] assetsToReceive\\n    );\\n\\n    event ExternalPositionDeployedForFund(\\n        address indexed comptrollerProxy,\\n        address indexed vaultProxy,\\n        address externalPosition,\\n        uint256 indexed externalPositionTypeId,\\n        bytes data\\n    );\\n\\n    event ExternalPositionTypeInfoUpdated(uint256 indexed typeId, address lib, address parser);\\n\\n    address private immutable EXTERNAL_POSITION_FACTORY;\\n    address private immutable POLICY_MANAGER;\\n\\n    mapping(uint256 => ExternalPositionTypeInfo) private typeIdToTypeInfo;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _externalPositionFactory,\\n        address _policyManager\\n    ) public ExtensionBase(_fundDeployer) {\\n        EXTERNAL_POSITION_FACTORY = _externalPositionFactory;\\n        POLICY_MANAGER = _policyManager;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Enables the ExternalPositionManager to be used by a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata\\n    ) external override onlyFundDeployer {\\n        __setValidatedVaultProxy(_comptrollerProxy, _vaultProxy);\\n    }\\n\\n    ///////////////////////////////\\n    // CALL-ON-EXTENSION ACTIONS //\\n    ///////////////////////////////\\n\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\n    /// @param _caller The user who called for this action\\n    /// @param _actionId An ID representing the desired action\\n    /// @param _callArgs The encoded args for the action\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override {\\n        address comptrollerProxy = msg.sender;\\n\\n        // This validation comes at negligible cost but is not strictly necessary,\\n        // as all actions below call permissioned actions on the VaultProxy,\\n        // which will fail for an invalid ComptrollerProxy\\n        address vaultProxy = getVaultProxyForFund(comptrollerProxy);\\n        require(vaultProxy != address(0), \\\"receiveCallFromComptroller: Fund is not valid\\\");\\n\\n        require(\\n            IVault(vaultProxy).canManageAssets(_caller),\\n            \\\"receiveCallFromComptroller: Unauthorized\\\"\\n        );\\n\\n        // Dispatch the action\\n        if (_actionId == uint256(ExternalPositionManagerActions.CreateExternalPosition)) {\\n            __createExternalPosition(_caller, comptrollerProxy, vaultProxy, _callArgs);\\n        } else if (_actionId == uint256(ExternalPositionManagerActions.CallOnExternalPosition)) {\\n            (\\n                address externalPosition,\\n                uint256 actionId,\\n                bytes memory actionArgs\\n            ) = __decodeCallOnExternalPositionCallArgs(_callArgs);\\n            __executeCallOnExternalPosition(\\n                _caller,\\n                comptrollerProxy,\\n                externalPosition,\\n                actionId,\\n                actionArgs\\n            );\\n        } else if (_actionId == uint256(ExternalPositionManagerActions.RemoveExternalPosition)) {\\n            __executeRemoveExternalPosition(_caller, comptrollerProxy, _callArgs);\\n        } else if (\\n            _actionId == uint256(ExternalPositionManagerActions.ReactivateExternalPosition)\\n        ) {\\n            __reactivateExternalPosition(_caller, comptrollerProxy, vaultProxy, _callArgs);\\n        } else {\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\n        }\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Creates a new external position and links it to the _vaultProxy\\n    function __createExternalPosition(\\n        address _caller,\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        (\\n            uint256 typeId,\\n            bytes memory initializationData,\\n            bytes memory callOnExternalPositionCallArgs\\n        ) = abi.decode(_callArgs, (uint256, bytes, bytes));\\n\\n        address parser = getExternalPositionParserForType(typeId);\\n        require(parser != address(0), \\\"__createExternalPosition: Invalid typeId\\\");\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.CreateExternalPosition,\\n            abi.encode(_caller, typeId, initializationData)\\n        );\\n\\n        // Pass in _vaultProxy in case the external position requires it during init() or further operations\\n        bytes memory initArgs = IExternalPositionParser(parser).parseInitArgs(\\n            _vaultProxy,\\n            initializationData\\n        );\\n\\n        bytes memory constructData = abi.encodeWithSelector(\\n            IExternalPosition.init.selector,\\n            initArgs\\n        );\\n\\n        address externalPosition = ExternalPositionFactory(EXTERNAL_POSITION_FACTORY).deploy(\\n            _vaultProxy,\\n            typeId,\\n            getExternalPositionLibForType(typeId),\\n            constructData\\n        );\\n\\n        emit ExternalPositionDeployedForFund(\\n            _comptrollerProxy,\\n            _vaultProxy,\\n            externalPosition,\\n            typeId,\\n            initArgs\\n        );\\n\\n        __addExternalPosition(_comptrollerProxy, externalPosition);\\n\\n        // Execute a first action on the external position\\n        if (callOnExternalPositionCallArgs.length != 0) {\\n            // Ignores user-input externalPosition value\\n            (, uint256 actionId, bytes memory actionArgs) = __decodeCallOnExternalPositionCallArgs(\\n                callOnExternalPositionCallArgs\\n            );\\n            __executeCallOnExternalPosition(\\n                _caller,\\n                _comptrollerProxy,\\n                externalPosition,\\n                actionId,\\n                actionArgs\\n            );\\n        }\\n    }\\n\\n    /// @dev Helper to decode callOnExternalPosition args\\n    function __decodeCallOnExternalPositionCallArgs(bytes memory _callArgs)\\n        private\\n        pure\\n        returns (\\n            address externalPosition_,\\n            uint256 actionId_,\\n            bytes memory actionArgs_\\n        )\\n    {\\n        return abi.decode(_callArgs, (address, uint256, bytes));\\n    }\\n\\n    /// @dev Performs an action on a specific external position\\n    function __executeCallOnExternalPosition(\\n        address _caller,\\n        address _comptrollerProxy,\\n        address _externalPosition,\\n        uint256 _actionId,\\n        bytes memory _actionArgs\\n    ) private {\\n        address parser = getExternalPositionParserForType(\\n            IExternalPositionProxy(_externalPosition).getExternalPositionType()\\n        );\\n\\n        (\\n            address[] memory assetsToTransfer,\\n            uint256[] memory amountsToTransfer,\\n            address[] memory assetsToReceive\\n        ) = IExternalPositionParser(parser).parseAssetsForAction(\\n            _externalPosition,\\n            _actionId,\\n            _actionArgs\\n        );\\n\\n        bytes memory encodedActionData = abi.encode(_actionId, _actionArgs);\\n\\n        __callOnExternalPosition(\\n            _comptrollerProxy,\\n            abi.encode(\\n                _externalPosition,\\n                encodedActionData,\\n                assetsToTransfer,\\n                amountsToTransfer,\\n                assetsToReceive\\n            )\\n        );\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.PostCallOnExternalPosition,\\n            abi.encode(\\n                _caller,\\n                _externalPosition,\\n                assetsToTransfer,\\n                amountsToTransfer,\\n                assetsToReceive,\\n                encodedActionData\\n            )\\n        );\\n\\n        emit CallOnExternalPositionExecutedForFund(\\n            _caller,\\n            _comptrollerProxy,\\n            _externalPosition,\\n            _actionId,\\n            _actionArgs,\\n            assetsToTransfer,\\n            amountsToTransfer,\\n            assetsToReceive\\n        );\\n    }\\n\\n    /// @dev Removes an external position from the VaultProxy\\n    function __executeRemoveExternalPosition(\\n        address _caller,\\n        address _comptrollerProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        address externalPosition = abi.decode(_callArgs, (address));\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.RemoveExternalPosition,\\n            abi.encode(_caller, externalPosition)\\n        );\\n\\n        __removeExternalPosition(_comptrollerProxy, externalPosition);\\n    }\\n\\n    ///@dev Reactivates an existing externalPosition\\n    function __reactivateExternalPosition(\\n        address _caller,\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        address externalPosition = abi.decode(_callArgs, (address));\\n\\n        require(\\n            ExternalPositionFactory(getExternalPositionFactory()).isExternalPositionProxy(\\n                externalPosition\\n            ),\\n            \\\"__reactivateExternalPosition: Account provided is not a valid external position\\\"\\n        );\\n\\n        require(\\n            IExternalPositionProxy(externalPosition).getVaultProxy() == _vaultProxy,\\n            \\\"__reactivateExternalPosition: External position belongs to a different vault\\\"\\n        );\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.ReactivateExternalPosition,\\n            abi.encode(_caller, externalPosition)\\n        );\\n\\n        __addExternalPosition(_comptrollerProxy, externalPosition);\\n    }\\n\\n    ///////////////////////////////////////////\\n    // EXTERNAL POSITION TYPES INFO REGISTRY //\\n    ///////////////////////////////////////////\\n\\n    /// @notice Updates the libs and parsers for a set of external position type ids\\n    /// @param _typeIds The external position type ids for which to set the libs and parsers\\n    /// @param _libs The libs\\n    /// @param _parsers The parsers\\n    function updateExternalPositionTypesInfo(\\n        uint256[] memory _typeIds,\\n        address[] memory _libs,\\n        address[] memory _parsers\\n    ) external onlyFundDeployerOwner {\\n        require(\\n            _typeIds.length == _parsers.length && _libs.length == _parsers.length,\\n            \\\"updateExternalPositionTypesInfo: Unequal arrays\\\"\\n        );\\n\\n        for (uint256 i; i < _typeIds.length; i++) {\\n            require(\\n                _typeIds[i] <\\n                    ExternalPositionFactory(getExternalPositionFactory()).getPositionTypeCounter(),\\n                \\\"updateExternalPositionTypesInfo: Type does not exist\\\"\\n            );\\n\\n            typeIdToTypeInfo[_typeIds[i]] = ExternalPositionTypeInfo({\\n                lib: _libs[i],\\n                parser: _parsers[i]\\n            });\\n\\n            emit ExternalPositionTypeInfoUpdated(_typeIds[i], _libs[i], _parsers[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `EXTERNAL_POSITION_FACTORY` variable\\n    /// @return externalPositionFactory_ The `EXTERNAL_POSITION_FACTORY` variable value\\n    function getExternalPositionFactory() public view returns (address externalPositionFactory_) {\\n        return EXTERNAL_POSITION_FACTORY;\\n    }\\n\\n    /// @notice Gets the external position library contract for a given type\\n    /// @param _typeId The type for which to get the external position library\\n    /// @return lib_ The external position library\\n    function getExternalPositionLibForType(uint256 _typeId)\\n        public\\n        view\\n        override\\n        returns (address lib_)\\n    {\\n        return typeIdToTypeInfo[_typeId].lib;\\n    }\\n\\n    /// @notice Gets the external position parser contract for a given type\\n    /// @param _typeId The type for which to get the external position's parser\\n    /// @return parser_ The external position parser\\n    function getExternalPositionParserForType(uint256 _typeId)\\n        public\\n        view\\n        returns (address parser_)\\n    {\\n        return typeIdToTypeInfo[_typeId].parser;\\n    }\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() public view returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x5a86d0a90b732b0db5c117cd6050361c6c5576035376a6311db0a4081593886c\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/IExternalPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the ExternalPositionManager\\ninterface IExternalPositionManager {\\n    struct ExternalPositionTypeInfo {\\n        address parser;\\n        address lib;\\n    }\\n    enum ExternalPositionManagerActions {\\n        CreateExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3af3f634e1f99fb97091b7825c0d2e2baaafc124d4e87d56cb0c17ff8554f6c6\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/external-position-manager/external-positions/IExternalPositionParser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionParser Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all external position parsers\\ninterface IExternalPositionParser {\\n    function parseAssetsForAction(\\n        address _externalPosition,\\n        uint256 _actionId,\\n        bytes memory _encodedActionArgs\\n    )\\n        external\\n        returns (\\n            address[] memory assetsToTransfer_,\\n            uint256[] memory amountsToTransfer_,\\n            address[] memory assetsToReceive_\\n        );\\n\\n    function parseInitArgs(address _vaultProxy, bytes memory _initializationData)\\n        external\\n        returns (bytes memory initArgs_);\\n}\\n\",\"keccak256\":\"0x1662fbd65841ee5e9cf8d5329b9d04c264b24ef68ae1e0484e59a8969b0d2c46\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    // When updating PolicyHook, also update these functions in PolicyManager:\\n    // 1. __getAllPolicyHooks()\\n    // 2. __policyHookRestrictsCurrentInvestorActions()\\n    enum PolicyHook {\\n        PostBuyShares,\\n        PostCallOnIntegration,\\n        PreTransferShares,\\n        RedeemSharesForSpecificAssets,\\n        AddTrackedAssets,\\n        RemoveTrackedAssets,\\n        CreateExternalPosition,\\n        PostCallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1ed5fff925cdfa8808a65aa4c1e45813d87c1f462fc6740be670065ed2f6fd32\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\n\\n/// @title ExtensionBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base class for an extension\\nabstract contract ExtensionBase is IExtension, FundDeployerOwnerMixin {\\n    event ValidatedVaultProxySetForFund(\\n        address indexed comptrollerProxy,\\n        address indexed vaultProxy\\n    );\\n\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\n\\n    modifier onlyFundDeployer() {\\n        require(msg.sender == getFundDeployer(), \\\"Only the FundDeployer can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\n\\n    /// @notice Allows extension to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overridden.\\n    function activateForFund(bool) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\n    /// @dev Unimplemented by default, may be overridden.\\n    function deactivateForFund() external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\n    /// and dispatches the appropriate action\\n    /// @dev Unimplemented by default, may be overridden.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\n    }\\n\\n    /// @notice Allows extension to run logic during fund configuration\\n    /// @dev Unimplemented by default, may be overridden.\\n    function setConfigForFund(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override {\\n        return;\\n    }\\n\\n    /// @dev Helper to store the validated ComptrollerProxy-VaultProxy relation\\n    function __setValidatedVaultProxy(address _comptrollerProxy, address _vaultProxy) internal {\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = _vaultProxy;\\n\\n        emit ValidatedVaultProxySetForFund(_comptrollerProxy, _vaultProxy);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return vaultProxy_ The VaultProxy of the fund\\n    function getVaultProxyForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (address vaultProxy_)\\n    {\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0xae68767766f6459bd2cd9dbd39df74f2c2f68f2150885bbce410e4091c807bb1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\n\\n/// @title PermissionedVaultActionMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\nabstract contract PermissionedVaultActionMixin {\\n    /// @notice Adds an external position to active external positions\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The external position to be added\\n    function __addExternalPosition(address _comptrollerProxy, address _externalPosition) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Adds a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to add\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset for which to grant an allowance\\n    /// @param _target The spender of the allowance\\n    /// @param _amount The amount of the allowance\\n    function __approveAssetSpender(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.ApproveAssetSpender,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n\\n    /// @notice Burns fund shares for a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account for which to burn shares\\n    /// @param _amount The amount of shares to burn\\n    function __burnShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.BurnShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Executes a callOnExternalPosition\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _data The encoded data for the call\\n    function __callOnExternalPosition(address _comptrollerProxy, bytes memory _data) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.CallOnExternalPosition,\\n            _data\\n        );\\n    }\\n\\n    /// @notice Mints fund shares to a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account to which to mint shares\\n    /// @param _amount The amount of shares to mint\\n    function __mintShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.MintShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Removes an external position from the vaultProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The ExternalPosition to remove\\n    function __removeExternalPosition(address _comptrollerProxy, address _externalPosition)\\n        internal\\n    {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Removes a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to remove\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Transfers fund shares from one account to another\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _from The account from which to transfer shares\\n    /// @param _to The account to which to transfer shares\\n    /// @param _amount The amount of shares to transfer\\n    function __transferShares(\\n        address _comptrollerProxy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.TransferShares,\\n            abi.encode(_from, _to, _amount)\\n        );\\n    }\\n\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to withdraw\\n    /// @param _target The account to which to withdraw the asset\\n    /// @param _amount The amount of asset to withdraw\\n    function __withdrawAssetTo(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.WithdrawAssetTo,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x77ddb9299d9c5f1538c20ae1543c20ef73db11ad7d9a9b817d26969ab233bb57\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xd415583828581051080d575f058643f4975d7048fda0d1765122b260d9d14934\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516125553803806125558339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c6124b46100a160003980610aa252508061098f52806110e25250806109f25280610a7c52506124b46000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806380d570631161007157806380d5706314610367578063893d20e81461038657806397c0ac871461038e578063bd8e959a14610396578063d44ad6cb1461039e578063f067cc11146103a6576100b4565b80631bee801e146100b9578063467903461461013e5780634c68a8dc14610180578063634ac96d1461032557806375d8bb0e1461032d5780637c65c1141461034a575b600080fd5b61013c600480360360608110156100cf57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460018302840111600160201b8311171561013157600080fd5b50909250905061042d565b005b6101646004803603602081101561015457600080fd5b50356001600160a01b03166106bc565b604080516001600160a01b039092168252519081900360200190f35b61013c6004803603606081101561019657600080fd5b810190602081018135600160201b8111156101b057600080fd5b8201836020820111156101c257600080fd5b803590602001918460208302840111600160201b831117156101e357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561023257600080fd5b82018360208201111561024457600080fd5b803590602001918460208302840111600160201b8311171561026557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460208302840111600160201b831117156102e757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106da945050505050565b61016461098d565b6101646004803603602081101561034357600080fd5b50356109b1565b6101646004803603602081101561036057600080fd5b50356109d0565b61013c6004803603602081101561037d57600080fd5b503515156109eb565b6101646109ee565b610164610a7a565b61013c610a9e565b610164610aa0565b61013c600480360360608110156103bc57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156103ef57600080fd5b82018360208201111561040157600080fd5b803590602001918460018302840111600160201b8311171561042257600080fd5b509092509050610ac4565b336000610439826106bc565b90506001600160a01b0381166104805760405162461bcd60e51b815260040180806020018281038252602d815260200180612423602d913960400191505060405180910390fd5b806001600160a01b031663714ca2d1876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d60208110156104f757600080fd5b50516105345760405162461bcd60e51b815260040180806020018281038252602881526020018061232b6028913960400191505060405180910390fd5b846105805761057b86838387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b2592505050565b6106b4565b60018514156105e85760008060606105cd87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061130e92505050565b9250925092506105e089868585856113ee565b5050506106b4565b60028514156106325761057b868386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cf092505050565b600385141561067d5761057b86838387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1592505050565b60405162461bcd60e51b815260040180806020018281038252602d8152602001806122af602d913960400191505060405180910390fd5b505050505050565b6001600160a01b039081166000908152602081905260409020541690565b6106e26109ee565b6001600160a01b0316336001600160a01b0316146107315760405162461bcd60e51b81526004018080602001828103825260498152602001806122666049913960600191505060405180910390fd5b80518351148015610743575080518251145b61077e5760405162461bcd60e51b815260040180806020018281038252602f815260200180612450602f913960400191505060405180910390fd5b60005b83518110156109875761079261098d565b6001600160a01b0316633825abe86040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ca57600080fd5b505afa1580156107de573d6000803e3d6000fd5b505050506040513d60208110156107f457600080fd5b5051845185908390811061080457fe5b6020026020010151106108485760405162461bcd60e51b81526004018080602001828103825260348152602001806123536034913960400191505060405180910390fd5b604051806040016040528083838151811061085f57fe5b60200260200101516001600160a01b0316815260200184838151811061088157fe5b60200260200101516001600160a01b0316815250600160008684815181106108a557fe5b602090810291909101810151825281810192909252604001600020825181546001600160a01b03199081166001600160a01b039283161783559390920151600190910180549093169116179055835184908290811061090057fe5b60200260200101517f14f0f52379e27a06185de7281205c2496464cf539a6dcc46258cc6cebe89dc3084838151811061093557fe5b602002602001015184848151811061094957fe5b602002602001015160405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390a2600101610781565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b600090815260016020819052604090912001546001600160a01b031690565b6000908152600160205260409020546001600160a01b031690565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d6020811015610a7357600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b565b7f000000000000000000000000000000000000000000000000000000000000000090565b610acc610a7a565b6001600160a01b0316336001600160a01b031614610b1b5760405162461bcd60e51b81526004018080602001828103825260288152602001806123876028913960400191505060405180910390fd5b61098784846120b0565b6000606080838060200190516060811015610b3f57600080fd5b815160208301805160405192949293830192919084600160201b821115610b6557600080fd5b908301906020820185811115610b7a57600080fd5b8251600160201b811182820188101715610b9357600080fd5b82525081516020918201929091019080838360005b83811015610bc0578181015183820152602001610ba8565b50505050905090810190601f168015610bed5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b821115610c0f57600080fd5b908301906020820185811115610c2457600080fd5b8251600160201b811182820188101715610c3d57600080fd5b82525081516020918201929091019080838360005b83811015610c6a578181015183820152602001610c52565b50505050905090810190601f168015610c975780820380516001836020036101000a031916815260200191505b506040525050509250925092506000610caf846109d0565b90506001600160a01b038116610cf65760405162461bcd60e51b81526004018080602001828103825260288152602001806123af6028913960400191505060405180910390fd5b610cfe610aa0565b6001600160a01b0316630442bad58860068b888860405160200180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d67578181015183820152602001610d4f565b50505050905090810190601f168015610d945780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115610dd857fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e16578181015183820152602001610dfe565b50505050905090810190601f168015610e435780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b505050506060816001600160a01b031663db16c72e88866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610eea578181015183820152602001610ed2565b50505050905090810190601f168015610f175780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610f7457600080fd5b8101908080516040519392919084600160201b821115610f9357600080fd5b908301906020820185811115610fa857600080fd5b8251600160201b811182820188101715610fc157600080fd5b82525081516020918201929091019080838360005b83811015610fee578181015183820152602001610fd6565b50505050905090810190601f16801561101b5780820380516001836020036101000a031916815260200191505b5060405250505090506060634ddf47d460e01b826040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561106f578181015183820152602001611057565b50505050905090810190601f16801561109c5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909616959095179094525091925060009150506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f908bc778a89611112816109b1565b866040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561118357818101518382015260200161116b565b50505050905090810190601f1680156111b05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b505050506040513d60208110156111fc57600080fd5b8101908080519060200190929190505050905086896001600160a01b03168b6001600160a01b03167fc3b9bcc16acc2ee56104cb9a5d736ade0f1446a66aa9e217d8fa5b44f946b59e848760405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561129357818101518382015260200161127b565b50505050905090810190601f1680156112c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a46112d88a82612107565b84511561130157600060606112ec8761130e565b92509250506112fe8d8d8585856113ee565b50505b5050505050505050505050565b600080606083806020019051606081101561132857600080fd5b81516020830151604080850180519151939592948301929184600160201b82111561135257600080fd5b90830190602082018581111561136757600080fd5b8251600160201b81118282018810171561138057600080fd5b82525081516020918201929091019080838360005b838110156113ad578181015183820152602001611395565b50505050905090810190601f1680156113da5780820380516001836020036101000a031916815260200191505b506040525050509250925092509193909250565b600061145d846001600160a01b03166312bc0a446040518163ffffffff1660e01b815260040160206040518083038186803b15801561142c57600080fd5b505afa158015611440573d6000803e3d6000fd5b505050506040513d602081101561145657600080fd5b50516109d0565b90506060806060836001600160a01b031663bbd2d6468888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114d75781810151838201526020016114bf565b50505050905090810190601f1680156115045780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561152557600080fd5b505af1158015611539573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561156257600080fd5b8101908080516040519392919084600160201b82111561158157600080fd5b90830190602082018581111561159657600080fd5b82518660208202830111600160201b821117156115b257600080fd5b82525081516020918201928201910280838360005b838110156115df5781810151838201526020016115c7565b5050505090500160405260200180516040519392919084600160201b82111561160757600080fd5b90830190602082018581111561161c57600080fd5b82518660208202830111600160201b8211171561163857600080fd5b82525081516020918201928201910280838360005b8381101561166557818101518382015260200161164d565b5050505090500160405260200180516040519392919084600160201b82111561168d57600080fd5b9083019060208201858111156116a257600080fd5b82518660208202830111600160201b821117156116be57600080fd5b82525081516020918201928201910280838360005b838110156116eb5781810151838201526020016116d3565b50505050905001604052505050925092509250606086866040516020018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611748578181015183820152602001611730565b50505050905090810190601f1680156117755780820380516001836020036101000a031916815260200191505b50935050505060405160208183030381529060405290506118f689898387878760405160200180866001600160a01b0316815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156117f05781810151838201526020016117d8565b50505050905090810190601f16801561181d5780820380516001836020036101000a031916815260200191505b508581038452885181528851602091820191808b01910280838360005b8381101561185257818101518382015260200161183a565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611891578181015183820152602001611879565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156118d05781810151838201526020016118b8565b5050505090500199505050505050505050506040516020818303038152906040526121ed565b6118fe610aa0565b6001600160a01b0316630442bad58a60078d8c8989898960405160200180876001600160a01b03168152602001866001600160a01b0316815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561198257818101518382015260200161196a565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156119c15781810151838201526020016119a9565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611a005781810151838201526020016119e8565b50505050905001858103825286818151815260200191508051906020019080838360005b83811015611a3c578181015183820152602001611a24565b50505050905090810190601f168015611a695780820380516001836020036101000a031916815260200191505b509a50505050505050505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115611ab357fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611af1578181015183820152602001611ad9565b50505050905090810190601f168015611b1e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03168b6001600160a01b03167f62e5ab7686baa8b666d45a227de296ea589ff48f1f215ca0e647ef6417a8657e8a8a8989896040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015611bea578181015183820152602001611bd2565b50505050905090810190601f168015611c175780820380516001836020036101000a031916815260200191505b508581038452885181528851602091820191808b01910280838360005b83811015611c4c578181015183820152602001611c34565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611c8b578181015183820152602001611c73565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611cca578181015183820152602001611cb2565b50505050905001995050505050505050505060405180910390a450505050505050505050565b6000818060200190516020811015611d0757600080fd5b50519050611d13610aa0565b604080516001600160a01b038781166020830152848116828401528251808303840181526060830193849052630442bad560e01b90935286811660648301908152931692630442bad59287926008929060840183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611da5578181015183820152602001611d8d565b50505050905090810190601f168015611dd25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b50505050610987838261221a565b6000818060200190516020811015611e2c57600080fd5b50519050611e3861098d565b6001600160a01b03166371b79dc1826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e8457600080fd5b505afa158015611e98573d6000803e3d6000fd5b505050506040513d6020811015611eae57600080fd5b5051611eeb5760405162461bcd60e51b815260040180806020018281038252604f8152602001806122dc604f913960600191505060405180910390fd5b826001600160a01b0316816001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2e57600080fd5b505afa158015611f42573d6000803e3d6000fd5b505050506040513d6020811015611f5857600080fd5b50516001600160a01b031614611f9f5760405162461bcd60e51b815260040180806020018281038252604c8152602001806123d7604c913960600191505060405180910390fd5b611fa7610aa0565b604080516001600160a01b038881166020830152848116828401528251808303840181526060830193849052630442bad560e01b90935287811660648301908152931692630442bad59288926009929060840183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612039578181015183820152602001612021565b50505050905090810190601f1680156120665780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561208757600080fd5b505af115801561209b573d6000803e3d6000fd5b505050506120a98482612107565b5050505050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517f8852dcaa71340ea616a65ffac013450dfb238607481fb9d78346c667fe256c139190a35050565b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d916008919060440180835b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561218c578181015183820152602001612174565b50505050905090810190601f1680156121b95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156121d957600080fd5b505af11580156106b4573d6000803e3d6000fd5b6040516310acd06d60e01b81526001600160a01b038316906310acd06d906009908490600401808361214e565b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d91600a9190604401808361214e56fe6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e76616c6964205f616374696f6e49645f5f7265616374697661746545787465726e616c506f736974696f6e3a204163636f756e742070726f7669646564206973206e6f7420612076616c69642065787465726e616c20706f736974696f6e7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20556e617574686f72697a656475706461746545787465726e616c506f736974696f6e5479706573496e666f3a205479706520646f6573206e6f742065786973744f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520746869732063616c6c5f5f63726561746545787465726e616c506f736974696f6e3a20496e76616c6964207479706549645f5f7265616374697661746545787465726e616c506f736974696f6e3a2045787465726e616c20706f736974696f6e2062656c6f6e677320746f206120646966666572656e74207661756c747265636569766543616c6c46726f6d436f6d7074726f6c6c65723a2046756e64206973206e6f742076616c696475706461746545787465726e616c506f736974696f6e5479706573496e666f3a20556e657175616c20617272617973a2646970667358221220a5560c677a053a086912849d3e9a5ac02abd1c661035e2c40b44f4088d81bb5764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806380d570631161007157806380d5706314610367578063893d20e81461038657806397c0ac871461038e578063bd8e959a14610396578063d44ad6cb1461039e578063f067cc11146103a6576100b4565b80631bee801e146100b9578063467903461461013e5780634c68a8dc14610180578063634ac96d1461032557806375d8bb0e1461032d5780637c65c1141461034a575b600080fd5b61013c600480360360608110156100cf57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156100fe57600080fd5b82018360208201111561011057600080fd5b803590602001918460018302840111600160201b8311171561013157600080fd5b50909250905061042d565b005b6101646004803603602081101561015457600080fd5b50356001600160a01b03166106bc565b604080516001600160a01b039092168252519081900360200190f35b61013c6004803603606081101561019657600080fd5b810190602081018135600160201b8111156101b057600080fd5b8201836020820111156101c257600080fd5b803590602001918460208302840111600160201b831117156101e357600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b81111561023257600080fd5b82018360208201111561024457600080fd5b803590602001918460208302840111600160201b8311171561026557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295949360208101935035915050600160201b8111156102b457600080fd5b8201836020820111156102c657600080fd5b803590602001918460208302840111600160201b831117156102e757600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506106da945050505050565b61016461098d565b6101646004803603602081101561034357600080fd5b50356109b1565b6101646004803603602081101561036057600080fd5b50356109d0565b61013c6004803603602081101561037d57600080fd5b503515156109eb565b6101646109ee565b610164610a7a565b61013c610a9e565b610164610aa0565b61013c600480360360608110156103bc57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156103ef57600080fd5b82018360208201111561040157600080fd5b803590602001918460018302840111600160201b8311171561042257600080fd5b509092509050610ac4565b336000610439826106bc565b90506001600160a01b0381166104805760405162461bcd60e51b815260040180806020018281038252602d815260200180612423602d913960400191505060405180910390fd5b806001600160a01b031663714ca2d1876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156104cd57600080fd5b505afa1580156104e1573d6000803e3d6000fd5b505050506040513d60208110156104f757600080fd5b50516105345760405162461bcd60e51b815260040180806020018281038252602881526020018061232b6028913960400191505060405180910390fd5b846105805761057b86838387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b2592505050565b6106b4565b60018514156105e85760008060606105cd87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061130e92505050565b9250925092506105e089868585856113ee565b5050506106b4565b60028514156106325761057b868386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cf092505050565b600385141561067d5761057b86838387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e1592505050565b60405162461bcd60e51b815260040180806020018281038252602d8152602001806122af602d913960400191505060405180910390fd5b505050505050565b6001600160a01b039081166000908152602081905260409020541690565b6106e26109ee565b6001600160a01b0316336001600160a01b0316146107315760405162461bcd60e51b81526004018080602001828103825260498152602001806122666049913960600191505060405180910390fd5b80518351148015610743575080518251145b61077e5760405162461bcd60e51b815260040180806020018281038252602f815260200180612450602f913960400191505060405180910390fd5b60005b83518110156109875761079261098d565b6001600160a01b0316633825abe86040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ca57600080fd5b505afa1580156107de573d6000803e3d6000fd5b505050506040513d60208110156107f457600080fd5b5051845185908390811061080457fe5b6020026020010151106108485760405162461bcd60e51b81526004018080602001828103825260348152602001806123536034913960400191505060405180910390fd5b604051806040016040528083838151811061085f57fe5b60200260200101516001600160a01b0316815260200184838151811061088157fe5b60200260200101516001600160a01b0316815250600160008684815181106108a557fe5b602090810291909101810151825281810192909252604001600020825181546001600160a01b03199081166001600160a01b039283161783559390920151600190910180549093169116179055835184908290811061090057fe5b60200260200101517f14f0f52379e27a06185de7281205c2496464cf539a6dcc46258cc6cebe89dc3084838151811061093557fe5b602002602001015184848151811061094957fe5b602002602001015160405180836001600160a01b03168152602001826001600160a01b031681526020019250505060405180910390a2600101610781565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b600090815260016020819052604090912001546001600160a01b031690565b6000908152600160205260409020546001600160a01b031690565b50565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d6020811015610a7357600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b565b7f000000000000000000000000000000000000000000000000000000000000000090565b610acc610a7a565b6001600160a01b0316336001600160a01b031614610b1b5760405162461bcd60e51b81526004018080602001828103825260288152602001806123876028913960400191505060405180910390fd5b61098784846120b0565b6000606080838060200190516060811015610b3f57600080fd5b815160208301805160405192949293830192919084600160201b821115610b6557600080fd5b908301906020820185811115610b7a57600080fd5b8251600160201b811182820188101715610b9357600080fd5b82525081516020918201929091019080838360005b83811015610bc0578181015183820152602001610ba8565b50505050905090810190601f168015610bed5780820380516001836020036101000a031916815260200191505b5060405260200180516040519392919084600160201b821115610c0f57600080fd5b908301906020820185811115610c2457600080fd5b8251600160201b811182820188101715610c3d57600080fd5b82525081516020918201929091019080838360005b83811015610c6a578181015183820152602001610c52565b50505050905090810190601f168015610c975780820380516001836020036101000a031916815260200191505b506040525050509250925092506000610caf846109d0565b90506001600160a01b038116610cf65760405162461bcd60e51b81526004018080602001828103825260288152602001806123af6028913960400191505060405180910390fd5b610cfe610aa0565b6001600160a01b0316630442bad58860068b888860405160200180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d67578181015183820152602001610d4f565b50505050905090810190601f168015610d945780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115610dd857fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e16578181015183820152602001610dfe565b50505050905090810190601f168015610e435780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e6457600080fd5b505af1158015610e78573d6000803e3d6000fd5b505050506060816001600160a01b031663db16c72e88866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610eea578181015183820152602001610ed2565b50505050905090810190601f168015610f175780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b158015610f3757600080fd5b505af1158015610f4b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610f7457600080fd5b8101908080516040519392919084600160201b821115610f9357600080fd5b908301906020820185811115610fa857600080fd5b8251600160201b811182820188101715610fc157600080fd5b82525081516020918201929091019080838360005b83811015610fee578181015183820152602001610fd6565b50505050905090810190601f16801561101b5780820380516001836020036101000a031916815260200191505b5060405250505090506060634ddf47d460e01b826040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561106f578181015183820152602001611057565b50505050905090810190601f16801561109c5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909616959095179094525091925060009150506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f908bc778a89611112816109b1565b866040518563ffffffff1660e01b815260040180856001600160a01b03168152602001848152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561118357818101518382015260200161116b565b50505050905090810190601f1680156111b05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b505050506040513d60208110156111fc57600080fd5b8101908080519060200190929190505050905086896001600160a01b03168b6001600160a01b03167fc3b9bcc16acc2ee56104cb9a5d736ade0f1446a66aa9e217d8fa5b44f946b59e848760405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561129357818101518382015260200161127b565b50505050905090810190601f1680156112c05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a46112d88a82612107565b84511561130157600060606112ec8761130e565b92509250506112fe8d8d8585856113ee565b50505b5050505050505050505050565b600080606083806020019051606081101561132857600080fd5b81516020830151604080850180519151939592948301929184600160201b82111561135257600080fd5b90830190602082018581111561136757600080fd5b8251600160201b81118282018810171561138057600080fd5b82525081516020918201929091019080838360005b838110156113ad578181015183820152602001611395565b50505050905090810190601f1680156113da5780820380516001836020036101000a031916815260200191505b506040525050509250925092509193909250565b600061145d846001600160a01b03166312bc0a446040518163ffffffff1660e01b815260040160206040518083038186803b15801561142c57600080fd5b505afa158015611440573d6000803e3d6000fd5b505050506040513d602081101561145657600080fd5b50516109d0565b90506060806060836001600160a01b031663bbd2d6468888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114d75781810151838201526020016114bf565b50505050905090810190601f1680156115045780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561152557600080fd5b505af1158015611539573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052606081101561156257600080fd5b8101908080516040519392919084600160201b82111561158157600080fd5b90830190602082018581111561159657600080fd5b82518660208202830111600160201b821117156115b257600080fd5b82525081516020918201928201910280838360005b838110156115df5781810151838201526020016115c7565b5050505090500160405260200180516040519392919084600160201b82111561160757600080fd5b90830190602082018581111561161c57600080fd5b82518660208202830111600160201b8211171561163857600080fd5b82525081516020918201928201910280838360005b8381101561166557818101518382015260200161164d565b5050505090500160405260200180516040519392919084600160201b82111561168d57600080fd5b9083019060208201858111156116a257600080fd5b82518660208202830111600160201b821117156116be57600080fd5b82525081516020918201928201910280838360005b838110156116eb5781810151838201526020016116d3565b50505050905001604052505050925092509250606086866040516020018083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611748578181015183820152602001611730565b50505050905090810190601f1680156117755780820380516001836020036101000a031916815260200191505b50935050505060405160208183030381529060405290506118f689898387878760405160200180866001600160a01b0316815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156117f05781810151838201526020016117d8565b50505050905090810190601f16801561181d5780820380516001836020036101000a031916815260200191505b508581038452885181528851602091820191808b01910280838360005b8381101561185257818101518382015260200161183a565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611891578181015183820152602001611879565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156118d05781810151838201526020016118b8565b5050505090500199505050505050505050506040516020818303038152906040526121ed565b6118fe610aa0565b6001600160a01b0316630442bad58a60078d8c8989898960405160200180876001600160a01b03168152602001866001600160a01b0316815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561198257818101518382015260200161196a565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156119c15781810151838201526020016119a9565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611a005781810151838201526020016119e8565b50505050905001858103825286818151815260200191508051906020019080838360005b83811015611a3c578181015183820152602001611a24565b50505050905090810190601f168015611a695780820380516001836020036101000a031916815260200191505b509a50505050505050505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115611ab357fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611af1578181015183820152602001611ad9565b50505050905090810190601f168015611b1e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611b3f57600080fd5b505af1158015611b53573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03168b6001600160a01b03167f62e5ab7686baa8b666d45a227de296ea589ff48f1f215ca0e647ef6417a8657e8a8a8989896040518086815260200180602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b83811015611bea578181015183820152602001611bd2565b50505050905090810190601f168015611c175780820380516001836020036101000a031916815260200191505b508581038452885181528851602091820191808b01910280838360005b83811015611c4c578181015183820152602001611c34565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015611c8b578181015183820152602001611c73565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015611cca578181015183820152602001611cb2565b50505050905001995050505050505050505060405180910390a450505050505050505050565b6000818060200190516020811015611d0757600080fd5b50519050611d13610aa0565b604080516001600160a01b038781166020830152848116828401528251808303840181526060830193849052630442bad560e01b90935286811660648301908152931692630442bad59287926008929060840183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611da5578181015183820152602001611d8d565b50505050905090810190601f168015611dd25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611df357600080fd5b505af1158015611e07573d6000803e3d6000fd5b50505050610987838261221a565b6000818060200190516020811015611e2c57600080fd5b50519050611e3861098d565b6001600160a01b03166371b79dc1826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611e8457600080fd5b505afa158015611e98573d6000803e3d6000fd5b505050506040513d6020811015611eae57600080fd5b5051611eeb5760405162461bcd60e51b815260040180806020018281038252604f8152602001806122dc604f913960600191505060405180910390fd5b826001600160a01b0316816001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b158015611f2e57600080fd5b505afa158015611f42573d6000803e3d6000fd5b505050506040513d6020811015611f5857600080fd5b50516001600160a01b031614611f9f5760405162461bcd60e51b815260040180806020018281038252604c8152602001806123d7604c913960600191505060405180910390fd5b611fa7610aa0565b604080516001600160a01b038881166020830152848116828401528251808303840181526060830193849052630442bad560e01b90935287811660648301908152931692630442bad59288926009929060840183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612039578181015183820152602001612021565b50505050905090810190601f1680156120665780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561208757600080fd5b505af115801561209b573d6000803e3d6000fd5b505050506120a98482612107565b5050505050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517f8852dcaa71340ea616a65ffac013450dfb238607481fb9d78346c667fe256c139190a35050565b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d916008919060440180835b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561218c578181015183820152602001612174565b50505050905090810190601f1680156121b95780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156121d957600080fd5b505af11580156106b4573d6000803e3d6000fd5b6040516310acd06d60e01b81526001600160a01b038316906310acd06d906009908490600401808361214e565b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d91600a9190604401808361214e56fe6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e76616c6964205f616374696f6e49645f5f7265616374697661746545787465726e616c506f736974696f6e3a204163636f756e742070726f7669646564206973206e6f7420612076616c69642065787465726e616c20706f736974696f6e7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20556e617574686f72697a656475706461746545787465726e616c506f736974696f6e5479706573496e666f3a205479706520646f6573206e6f742065786973744f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520746869732063616c6c5f5f63726561746545787465726e616c506f736974696f6e3a20496e76616c6964207479706549645f5f7265616374697661746545787465726e616c506f736974696f6e3a2045787465726e616c20706f736974696f6e2062656c6f6e677320746f206120646966666572656e74207661756c747265636569766543616c6c46726f6d436f6d7074726f6c6c65723a2046756e64206973206e6f742076616c696475706461746545787465726e616c506f736974696f6e5479706573496e666f3a20556e657175616c20617272617973a2646970667358221220a5560c677a053a086912849d3e9a5ac02abd1c661035e2c40b44f4088d81bb5764736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(bool)": {
        "details": "Unimplemented by default, may be overridden."
      },
      "deactivateForFund()": {
        "details": "Unimplemented by default, may be overridden."
      },
      "getExternalPositionFactory()": {
        "returns": {
          "externalPositionFactory_": "The `EXTERNAL_POSITION_FACTORY` variable value"
        }
      },
      "getExternalPositionLibForType(uint256)": {
        "params": {
          "_typeId": "The type for which to get the external position library"
        },
        "returns": {
          "lib_": "The external position library"
        }
      },
      "getExternalPositionParserForType(uint256)": {
        "params": {
          "_typeId": "The type for which to get the external position's parser"
        },
        "returns": {
          "parser_": "The external position parser"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "getVaultProxyForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "vaultProxy_": "The VaultProxy of the fund"
        }
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "params": {
          "_actionId": "An ID representing the desired action",
          "_callArgs": "The encoded args for the action",
          "_caller": "The user who called for this action"
        }
      },
      "setConfigForFund(address,address,bytes)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_vaultProxy": "The VaultProxy of the fund"
        }
      },
      "updateExternalPositionTypesInfo(uint256[],address[],address[])": {
        "params": {
          "_libs": "The libs",
          "_parsers": "The parsers",
          "_typeIds": "The external position type ids for which to set the libs and parsers"
        }
      }
    },
    "title": "ExternalPositionManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(bool)": {
        "notice": "Allows extension to run logic during fund activation"
      },
      "deactivateForFund()": {
        "notice": "Allows extension to run logic during fund deactivation (destruct)"
      },
      "getExternalPositionFactory()": {
        "notice": "Gets the `EXTERNAL_POSITION_FACTORY` variable"
      },
      "getExternalPositionLibForType(uint256)": {
        "notice": "Gets the external position library contract for a given type"
      },
      "getExternalPositionParserForType(uint256)": {
        "notice": "Gets the external position parser contract for a given type"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable"
      },
      "getVaultProxyForFund(address)": {
        "notice": "Gets the verified VaultProxy for a given ComptrollerProxy"
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "notice": "Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy"
      },
      "setConfigForFund(address,address,bytes)": {
        "notice": "Enables the ExternalPositionManager to be used by a fund"
      },
      "updateExternalPositionTypesInfo(uint256[],address[],address[])": {
        "notice": "Updates the libs and parsers for a set of external position type ids"
      }
    },
    "notice": "Extension to handle external position actions for funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41927,
        "contract": "contracts/release/extensions/external-position-manager/ExternalPositionManager.sol:ExternalPositionManager",
        "label": "comptrollerProxyToVaultProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 16133,
        "contract": "contracts/release/extensions/external-position-manager/ExternalPositionManager.sol:ExternalPositionManager",
        "label": "typeIdToTypeInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(ExternalPositionTypeInfo)16797_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(ExternalPositionTypeInfo)16797_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IExternalPositionManager.ExternalPositionTypeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(ExternalPositionTypeInfo)16797_storage"
      },
      "t_struct(ExternalPositionTypeInfo)16797_storage": {
        "encoding": "inplace",
        "label": "struct IExternalPositionManager.ExternalPositionTypeInfo",
        "members": [
          {
            "astId": 16794,
            "contract": "contracts/release/extensions/external-position-manager/ExternalPositionManager.sol:ExternalPositionManager",
            "label": "parser",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16796,
            "contract": "contracts/release/extensions/external-position-manager/ExternalPositionManager.sol:ExternalPositionManager",
            "label": "lib",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}