{
  "address": "0xbf07f33165Cc5d64c299E4567e19575AabB80575",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_valueInterpreter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "integrationData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "incomingAssets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "incomingAssetAmounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "spendAssets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "spendAssetAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "CallOnIntegrationExecutedForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "ValidatedVaultProxySetForFund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValueInterpreter",
      "outputs": [
        {
          "internalType": "address",
          "name": "valueInterpreter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getVaultProxyForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "setConfigForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72b0c247901f7951c59db56aaff9f36fbf4242367aa1dbb9b0240fd919b15da2",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0xbf07f33165Cc5d64c299E4567e19575AabB80575",
    "transactionIndex": 0,
    "gasUsed": "2185406",
    "logsBloom": "0x
    "blockHash": "0xaa93123607488d3d241d64fc392e1f7de0faa2f04bc5831d7e15b30a8c362c26",
    "transactionHash": "0x72b0c247901f7951c59db56aaff9f36fbf4242367aa1dbb9b0240fd919b15da2",
    "logs": [],
    "blockNumber": 11761510,
    "cumulativeGasUsed": "2185406",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f",
    "0x92AF075CCf78588eE15999F4Cbb27f980eB8FEA6",
    "0x2D9caF49489B8Be0E0eF9f01C2d190C3B2e42998"
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valueInterpreter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"integrationData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"incomingAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"incomingAssetAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"spendAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts\",\"type\":\"uint256[]\"}],\"name\":\"CallOnIntegrationExecutedForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"ValidatedVaultProxySetForFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueInterpreter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"valueInterpreter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getVaultProxyForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setConfigForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Any arbitrary adapter is allowed by default, so all participants must be aware of their fund's configuration, especially whether they use a policy that only allows official adapters. Owners and asset managers must also establish trust for any arbitrary adapters that they interact with.\",\"kind\":\"dev\",\"methods\":{\"activateForFund(bool)\":{\"details\":\"Unimplemented by default, may be overridden.\"},\"deactivateForFund()\":{\"details\":\"Unimplemented by default, may be overridden.\"},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"getValueInterpreter()\":{\"returns\":{\"valueInterpreter_\":\"The `VALUE_INTERPRETER` variable value\"}},\"getVaultProxyForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"vaultProxy_\":\"The VaultProxy of the fund\"}},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"params\":{\"_actionId\":\"An ID representing the desired action\",\"_callArgs\":\"The encoded args for the action\",\"_caller\":\"The user who called for this action\"}},\"setConfigForFund(address,address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_vaultProxy\":\"The VaultProxy of the fund\"}}},\"title\":\"IntegrationManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(bool)\":{\"notice\":\"Allows extension to run logic during fund activation\"},\"deactivateForFund()\":{\"notice\":\"Allows extension to run logic during fund deactivation (destruct)\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable\"},\"getValueInterpreter()\":{\"notice\":\"Gets the `VALUE_INTERPRETER` variable\"},\"getVaultProxyForFund(address)\":{\"notice\":\"Gets the verified VaultProxy for a given ComptrollerProxy\"},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"notice\":\"Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\"},\"setConfigForFund(address,address,bytes)\":{\"notice\":\"Enables the IntegrationManager to be used by a fund\"}},\"notice\":\"Extension to handle DeFi integration actions for funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/IntegrationManager.sol\":\"IntegrationManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/vault/interfaces/IExternalPositionVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExternalPositionVault interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// Provides an interface to get the externalPositionLib for a given type from the Vault\\ninterface IExternalPositionVault {\\n    function getExternalPositionLibForType(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c047551a9bab8cb84299c4cf17d0435f1d4d0791ecc1d03e0d55cb3450baad6\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFreelyTransferableSharesVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Provides the interface for determining whether a vault's shares\\n/// are guaranteed to be freely transferable.\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IFreelyTransferableSharesVault {\\n    function sharesAreFreelyTransferable()\\n        external\\n        view\\n        returns (bool sharesAreFreelyTransferable_);\\n}\\n\",\"keccak256\":\"0xe31f063493e6e3a4434eaa5629c0a706b8fa0569aff3f4ef9d62e27a1928cfa0\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/interfaces/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b901b81b3a4ef3d30ef9b4a1fa7fdd6526dfacd66e9971d1f988c2b63334314\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../vault/IVault.sol\\\";\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    function activate(bool) external;\\n\\n    function calcGav() external returns (uint256);\\n\\n    function calcGrossShareValue() external returns (uint256);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function destructActivated(uint256, uint256) external;\\n\\n    function destructUnactivated() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getExternalPositionManager() external view returns (address);\\n\\n    function getFeeManager() external view returns (address);\\n\\n    function getFundDeployer() external view returns (address);\\n\\n    function getGasRelayPaymaster() external view returns (address);\\n\\n    function getIntegrationManager() external view returns (address);\\n\\n    function getPolicyManager() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(IVault.VaultAction, bytes calldata) external;\\n\\n    function preTransferSharesHook(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function preTransferSharesHookFreelyTransferable(address) external view;\\n\\n    function setGasRelayPaymaster(address) external;\\n\\n    function setVaultProxy(address) external;\\n}\\n\",\"keccak256\":\"0x51d4a60ba37b5f9198ef1328e08ff45efe0dee76bc067d71ed98f3a221c3636f\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/vault/interfaces/IExternalPositionVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IFreelyTransferableSharesVault.sol\\\";\\nimport \\\"../../../../persistent/vault/interfaces/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault, IFreelyTransferableSharesVault, IExternalPositionVault {\\n    enum VaultAction {\\n        None,\\n        // Shares management\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        // Asset management\\n        AddTrackedAsset,\\n        ApproveAssetSpender,\\n        RemoveTrackedAsset,\\n        WithdrawAssetTo,\\n        // External position management\\n        AddExternalPosition,\\n        CallOnExternalPosition,\\n        RemoveExternalPosition\\n    }\\n\\n    function addTrackedAsset(address) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function buyBackProtocolFeeShares(\\n        uint256,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function callOnContract(address, bytes calldata) external returns (bytes memory);\\n\\n    function canManageAssets(address) external view returns (bool);\\n\\n    function canRelayCalls(address) external view returns (bool);\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getActiveExternalPositions() external view returns (address[] memory);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isActiveExternalPosition(address) external view returns (bool);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function payProtocolFee() external;\\n\\n    function receiveValidatedVaultAction(VaultAction, bytes calldata) external;\\n\\n    function setAccessorForFundReconfiguration(address) external;\\n\\n    function setSymbol(string calldata) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x988fb29885af5cd96ad8d9f9a8be4689bcbfbcde564bc0b799beb0d1406215ec\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _configData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x59aaa2ddd32c24271bd4a57e9e1f3426570a78cd56d6d11e63786f36c916e94b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer}\\n}\\n\",\"keccak256\":\"0x858506b4374948c01124d37df17fe4d1902631c752fd29afb65f82e36356072a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/IntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\nimport \\\"../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../utils/AssetHelpers.sol\\\";\\nimport \\\"../policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../utils/ExtensionBase.sol\\\";\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\nimport \\\"./integrations/IIntegrationAdapter.sol\\\";\\nimport \\\"./IIntegrationManager.sol\\\";\\n\\n/// @title IntegrationManager\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Extension to handle DeFi integration actions for funds\\n/// @dev Any arbitrary adapter is allowed by default, so all participants must be aware of\\n/// their fund's configuration, especially whether they use a policy that only allows\\n/// official adapters. Owners and asset managers must also establish trust for any\\n/// arbitrary adapters that they interact with.\\ncontract IntegrationManager is\\n    IIntegrationManager,\\n    ExtensionBase,\\n    PermissionedVaultActionMixin,\\n    AssetHelpers\\n{\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n\\n    event CallOnIntegrationExecutedForFund(\\n        address indexed comptrollerProxy,\\n        address caller,\\n        address indexed adapter,\\n        bytes4 indexed selector,\\n        bytes integrationData,\\n        address[] incomingAssets,\\n        uint256[] incomingAssetAmounts,\\n        address[] spendAssets,\\n        uint256[] spendAssetAmounts\\n    );\\n\\n    address private immutable POLICY_MANAGER;\\n    address private immutable VALUE_INTERPRETER;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _policyManager,\\n        address _valueInterpreter\\n    ) public ExtensionBase(_fundDeployer) {\\n        POLICY_MANAGER = _policyManager;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Enables the IntegrationManager to be used by a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _vaultProxy The VaultProxy of the fund\\n    function setConfigForFund(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata\\n    ) external override onlyFundDeployer {\\n        __setValidatedVaultProxy(_comptrollerProxy, _vaultProxy);\\n    }\\n\\n    ///////////////////////////////\\n    // CALL-ON-EXTENSION ACTIONS //\\n    ///////////////////////////////\\n\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\n    /// @param _caller The user who called for this action\\n    /// @param _actionId An ID representing the desired action\\n    /// @param _callArgs The encoded args for the action\\n    function receiveCallFromComptroller(\\n        address _caller,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override {\\n        address comptrollerProxy = msg.sender;\\n\\n        // This validation comes at negligible cost but is not strictly necessary,\\n        // as all actions below call permissioned actions on the VaultProxy,\\n        // which will fail for an invalid ComptrollerProxy\\n        address vaultProxy = getVaultProxyForFund(comptrollerProxy);\\n        require(vaultProxy != address(0), \\\"receiveCallFromComptroller: Fund is not valid\\\");\\n\\n        require(\\n            IVault(vaultProxy).canManageAssets(_caller),\\n            \\\"receiveCallFromComptroller: Unauthorized\\\"\\n        );\\n\\n        // Dispatch the action\\n        if (_actionId == 0) {\\n            __callOnIntegration(_caller, comptrollerProxy, vaultProxy, _callArgs);\\n        } else if (_actionId == 1) {\\n            __addTrackedAssetsToVault(_caller, comptrollerProxy, _callArgs);\\n        } else if (_actionId == 2) {\\n            __removeTrackedAssetsFromVault(_caller, comptrollerProxy, _callArgs);\\n        } else {\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\n        }\\n    }\\n\\n    /// @dev Adds assets as tracked assets of the vault.\\n    /// Does not validate that assets are not already tracked.\\n    function __addTrackedAssetsToVault(\\n        address _caller,\\n        address _comptrollerProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        address[] memory assets = abi.decode(_callArgs, (address[]));\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.AddTrackedAssets,\\n            abi.encode(_caller, assets)\\n        );\\n\\n        for (uint256 i; i < assets.length; i++) {\\n            require(\\n                IValueInterpreter(getValueInterpreter()).isSupportedAsset(assets[i]),\\n                \\\"__addTrackedAssetsToVault: Unsupported asset\\\"\\n            );\\n\\n            __addTrackedAsset(_comptrollerProxy, assets[i]);\\n        }\\n    }\\n\\n    /// @dev Removes assets from the tracked assets of the vault.\\n    /// Does not validate that assets are not already tracked.\\n    function __removeTrackedAssetsFromVault(\\n        address _caller,\\n        address _comptrollerProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        address[] memory assets = abi.decode(_callArgs, (address[]));\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.RemoveTrackedAssets,\\n            abi.encode(_caller, assets)\\n        );\\n\\n        for (uint256 i; i < assets.length; i++) {\\n            __removeTrackedAsset(_comptrollerProxy, assets[i]);\\n        }\\n    }\\n\\n    /////////////////////////\\n    // CALL ON INTEGRATION //\\n    /////////////////////////\\n\\n    /// @notice Universal method for calling third party contract functions through adapters\\n    /// @param _caller The caller of this function via the ComptrollerProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @param _callArgs The encoded args for this function\\n    /// - _adapter Adapter of the integration on which to execute a call\\n    /// - _selector Method selector of the adapter method to execute\\n    /// - _integrationData Encoded arguments specific to the adapter\\n    /// @dev Refer to specific adapter to see how to encode its arguments.\\n    function __callOnIntegration(\\n        address _caller,\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes memory _callArgs\\n    ) private {\\n        // Validating the ComptrollerProxy is the active VaultProxy.accessor()\\n        // protects against corner cases of lingering permissions on adapters issued\\n        // via VaultLib.callOnContract() that could otherwise be called from an\\n        // undestructed ComptrollerProxy\\n        require(\\n            _comptrollerProxy == IVault(_vaultProxy).getAccessor(),\\n            \\\"receiveCallFromComptroller: Fund is not active\\\"\\n        );\\n\\n        (\\n            address adapter,\\n            bytes4 selector,\\n            bytes memory integrationData\\n        ) = __decodeCallOnIntegrationArgs(_callArgs);\\n\\n        (\\n            address[] memory incomingAssets,\\n            uint256[] memory incomingAssetAmounts,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts\\n        ) = __callOnIntegrationInner(\\n            _comptrollerProxy,\\n            _vaultProxy,\\n            adapter,\\n            selector,\\n            integrationData\\n        );\\n\\n        IPolicyManager(getPolicyManager()).validatePolicies(\\n            _comptrollerProxy,\\n            IPolicyManager.PolicyHook.PostCallOnIntegration,\\n            abi.encode(\\n                _caller,\\n                adapter,\\n                selector,\\n                incomingAssets,\\n                incomingAssetAmounts,\\n                spendAssets,\\n                spendAssetAmounts\\n            )\\n        );\\n\\n        emit CallOnIntegrationExecutedForFund(\\n            _comptrollerProxy,\\n            _caller,\\n            adapter,\\n            selector,\\n            integrationData,\\n            incomingAssets,\\n            incomingAssetAmounts,\\n            spendAssets,\\n            spendAssetAmounts\\n        );\\n    }\\n\\n    /// @dev Helper to execute the bulk of logic of callOnIntegration.\\n    /// Avoids the stack-too-deep-error.\\n    function __callOnIntegrationInner(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _adapter,\\n        bytes4 _selector,\\n        bytes memory _integrationData\\n    )\\n        private\\n        returns (\\n            address[] memory incomingAssets_,\\n            uint256[] memory incomingAssetAmounts_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_\\n        )\\n    {\\n        uint256[] memory preCallIncomingAssetBalances;\\n        uint256[] memory minIncomingAssetAmounts;\\n        SpendAssetsHandleType spendAssetsHandleType;\\n        uint256[] memory maxSpendAssetAmounts;\\n        uint256[] memory preCallSpendAssetBalances;\\n\\n        (\\n            incomingAssets_,\\n            preCallIncomingAssetBalances,\\n            minIncomingAssetAmounts,\\n            spendAssetsHandleType,\\n            spendAssets_,\\n            maxSpendAssetAmounts,\\n            preCallSpendAssetBalances\\n        ) = __preProcessCoI(_comptrollerProxy, _vaultProxy, _adapter, _selector, _integrationData);\\n\\n        __executeCoI(\\n            _vaultProxy,\\n            _adapter,\\n            _selector,\\n            _integrationData,\\n            abi.encode(spendAssets_, maxSpendAssetAmounts, incomingAssets_)\\n        );\\n\\n        (incomingAssetAmounts_, spendAssetAmounts_) = __postProcessCoI(\\n            _comptrollerProxy,\\n            _vaultProxy,\\n            _adapter,\\n            incomingAssets_,\\n            preCallIncomingAssetBalances,\\n            minIncomingAssetAmounts,\\n            spendAssetsHandleType,\\n            spendAssets_,\\n            maxSpendAssetAmounts,\\n            preCallSpendAssetBalances\\n        );\\n\\n        return (incomingAssets_, incomingAssetAmounts_, spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    /// @dev Helper to decode CoI args\\n    function __decodeCallOnIntegrationArgs(bytes memory _callArgs)\\n        private\\n        pure\\n        returns (\\n            address adapter_,\\n            bytes4 selector_,\\n            bytes memory integrationData_\\n        )\\n    {\\n        return abi.decode(_callArgs, (address, bytes4, bytes));\\n    }\\n\\n    /// @dev Helper to execute a call to an integration\\n    /// @dev Avoids stack-too-deep error\\n    function __executeCoI(\\n        address _vaultProxy,\\n        address _adapter,\\n        bytes4 _selector,\\n        bytes memory _integrationData,\\n        bytes memory _assetData\\n    ) private {\\n        (bool success, bytes memory returnData) = _adapter.call(\\n            abi.encodeWithSelector(_selector, _vaultProxy, _integrationData, _assetData)\\n        );\\n        require(success, string(returnData));\\n    }\\n\\n    /// @dev Helper to get the vault's balance of a particular asset\\n    function __getVaultAssetBalance(address _vaultProxy, address _asset)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        return ERC20(_asset).balanceOf(_vaultProxy);\\n    }\\n\\n    /// @dev Helper for the internal actions to take prior to executing CoI\\n    function __preProcessCoI(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _adapter,\\n        bytes4 _selector,\\n        bytes memory _integrationData\\n    )\\n        private\\n        returns (\\n            address[] memory incomingAssets_,\\n            uint256[] memory preCallIncomingAssetBalances_,\\n            uint256[] memory minIncomingAssetAmounts_,\\n            SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory maxSpendAssetAmounts_,\\n            uint256[] memory preCallSpendAssetBalances_\\n        )\\n    {\\n        // Note that incoming and spend assets are allowed to overlap\\n        // (e.g., a fee for the incomingAsset charged in a spend asset)\\n        (\\n            spendAssetsHandleType_,\\n            spendAssets_,\\n            maxSpendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        ) = IIntegrationAdapter(_adapter).parseAssetsForAction(\\n            _vaultProxy,\\n            _selector,\\n            _integrationData\\n        );\\n        require(\\n            spendAssets_.length == maxSpendAssetAmounts_.length,\\n            \\\"__preProcessCoI: Spend assets arrays unequal\\\"\\n        );\\n        require(\\n            incomingAssets_.length == minIncomingAssetAmounts_.length,\\n            \\\"__preProcessCoI: Incoming assets arrays unequal\\\"\\n        );\\n        require(spendAssets_.isUniqueSet(), \\\"__preProcessCoI: Duplicate spend asset\\\");\\n        require(incomingAssets_.isUniqueSet(), \\\"__preProcessCoI: Duplicate incoming asset\\\");\\n\\n        // INCOMING ASSETS\\n\\n        // Incoming asset balances must be recorded prior to spend asset balances in case there\\n        // is an overlap (an asset that is both a spend asset and an incoming asset),\\n        // as a spend asset can be immediately transferred after recording its balance\\n        preCallIncomingAssetBalances_ = new uint256[](incomingAssets_.length);\\n        for (uint256 i; i < incomingAssets_.length; i++) {\\n            require(\\n                IValueInterpreter(getValueInterpreter()).isSupportedAsset(incomingAssets_[i]),\\n                \\\"__preProcessCoI: Non-receivable incoming asset\\\"\\n            );\\n\\n            preCallIncomingAssetBalances_[i] = ERC20(incomingAssets_[i]).balanceOf(_vaultProxy);\\n        }\\n\\n        // SPEND ASSETS\\n\\n        preCallSpendAssetBalances_ = new uint256[](spendAssets_.length);\\n        for (uint256 i; i < spendAssets_.length; i++) {\\n            preCallSpendAssetBalances_[i] = ERC20(spendAssets_[i]).balanceOf(_vaultProxy);\\n\\n            // Grant adapter access to the spend assets.\\n            // spendAssets_ is already asserted to be a unique set.\\n            if (spendAssetsHandleType_ == SpendAssetsHandleType.Approve) {\\n                // Use exact approve amount, and reset afterwards\\n                __approveAssetSpender(\\n                    _comptrollerProxy,\\n                    spendAssets_[i],\\n                    _adapter,\\n                    maxSpendAssetAmounts_[i]\\n                );\\n            } else if (spendAssetsHandleType_ == SpendAssetsHandleType.Transfer) {\\n                __withdrawAssetTo(\\n                    _comptrollerProxy,\\n                    spendAssets_[i],\\n                    _adapter,\\n                    maxSpendAssetAmounts_[i]\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @dev Helper to reconcile incoming and spend assets after executing CoI\\n    function __postProcessCoI(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        address _adapter,\\n        address[] memory _incomingAssets,\\n        uint256[] memory _preCallIncomingAssetBalances,\\n        uint256[] memory _minIncomingAssetAmounts,\\n        SpendAssetsHandleType _spendAssetsHandleType,\\n        address[] memory _spendAssets,\\n        uint256[] memory _maxSpendAssetAmounts,\\n        uint256[] memory _preCallSpendAssetBalances\\n    )\\n        private\\n        returns (uint256[] memory incomingAssetAmounts_, uint256[] memory spendAssetAmounts_)\\n    {\\n        // INCOMING ASSETS\\n\\n        incomingAssetAmounts_ = new uint256[](_incomingAssets.length);\\n        for (uint256 i; i < _incomingAssets.length; i++) {\\n            incomingAssetAmounts_[i] = __getVaultAssetBalance(_vaultProxy, _incomingAssets[i]).sub(\\n                _preCallIncomingAssetBalances[i]\\n            );\\n            require(\\n                incomingAssetAmounts_[i] >= _minIncomingAssetAmounts[i],\\n                \\\"__postProcessCoI: Received incoming asset less than expected\\\"\\n            );\\n\\n            // Even if the asset's previous balance was >0, it might not have been tracked\\n            __addTrackedAsset(_comptrollerProxy, _incomingAssets[i]);\\n        }\\n\\n        // SPEND ASSETS\\n\\n        spendAssetAmounts_ = new uint256[](_spendAssets.length);\\n        for (uint256 i; i < _spendAssets.length; i++) {\\n            // Calculate the balance change of spend assets. Ignore if balance increased.\\n            uint256 postCallSpendAssetBalance = __getVaultAssetBalance(\\n                _vaultProxy,\\n                _spendAssets[i]\\n            );\\n            if (postCallSpendAssetBalance < _preCallSpendAssetBalances[i]) {\\n                spendAssetAmounts_[i] = _preCallSpendAssetBalances[i].sub(\\n                    postCallSpendAssetBalance\\n                );\\n            }\\n\\n            // Reset any unused approvals\\n            if (\\n                _spendAssetsHandleType == SpendAssetsHandleType.Approve &&\\n                ERC20(_spendAssets[i]).allowance(_vaultProxy, _adapter) > 0\\n            ) {\\n                __approveAssetSpender(_comptrollerProxy, _spendAssets[i], _adapter, 0);\\n            } else if (_spendAssetsHandleType == SpendAssetsHandleType.None) {\\n                // Only need to validate _maxSpendAssetAmounts if not SpendAssetsHandleType.Approve\\n                // or SpendAssetsHandleType.Transfer, as each of those implicitly validate the max\\n                require(\\n                    spendAssetAmounts_[i] <= _maxSpendAssetAmounts[i],\\n                    \\\"__postProcessCoI: Spent amount greater than expected\\\"\\n                );\\n            }\\n        }\\n\\n        return (incomingAssetAmounts_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() public view returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n\\n    /// @notice Gets the `VALUE_INTERPRETER` variable\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\n    function getValueInterpreter() public view returns (address valueInterpreter_) {\\n        return VALUE_INTERPRETER;\\n    }\\n}\\n\",\"keccak256\":\"0x051192075be1debe9542b098f9b2badc3726095c5c0597daedca3551f718f34a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function parseAssetsForAction(\\n        address _vaultProxy,\\n        bytes4 _selector,\\n        bytes calldata _encodedCallArgs\\n    )\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x14b11777e21aceca340931832874342546731493bb169dbb4de736b16e9a7cc1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    // When updating PolicyHook, also update these functions in PolicyManager:\\n    // 1. __getAllPolicyHooks()\\n    // 2. __policyHookRestrictsCurrentInvestorActions()\\n    enum PolicyHook {\\n        PostBuyShares,\\n        PostCallOnIntegration,\\n        PreTransferShares,\\n        RedeemSharesForSpecificAssets,\\n        AddTrackedAssets,\\n        RemoveTrackedAssets,\\n        CreateExternalPosition,\\n        PostCallOnExternalPosition,\\n        RemoveExternalPosition,\\n        ReactivateExternalPosition\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1ed5fff925cdfa8808a65aa4c1e45813d87c1f462fc6740be670065ed2f6fd32\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../IExtension.sol\\\";\\n\\n/// @title ExtensionBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base class for an extension\\nabstract contract ExtensionBase is IExtension, FundDeployerOwnerMixin {\\n    event ValidatedVaultProxySetForFund(\\n        address indexed comptrollerProxy,\\n        address indexed vaultProxy\\n    );\\n\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\n\\n    modifier onlyFundDeployer() {\\n        require(msg.sender == getFundDeployer(), \\\"Only the FundDeployer can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\n\\n    /// @notice Allows extension to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overridden.\\n    function activateForFund(bool) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\n    /// @dev Unimplemented by default, may be overridden.\\n    function deactivateForFund() external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\n    /// and dispatches the appropriate action\\n    /// @dev Unimplemented by default, may be overridden.\\n    function receiveCallFromComptroller(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\n    }\\n\\n    /// @notice Allows extension to run logic during fund configuration\\n    /// @dev Unimplemented by default, may be overridden.\\n    function setConfigForFund(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override {\\n        return;\\n    }\\n\\n    /// @dev Helper to store the validated ComptrollerProxy-VaultProxy relation\\n    function __setValidatedVaultProxy(address _comptrollerProxy, address _vaultProxy) internal {\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = _vaultProxy;\\n\\n        emit ValidatedVaultProxySetForFund(_comptrollerProxy, _vaultProxy);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return vaultProxy_ The VaultProxy of the fund\\n    function getVaultProxyForFund(address _comptrollerProxy)\\n        public\\n        view\\n        returns (address vaultProxy_)\\n    {\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0xae68767766f6459bd2cd9dbd39df74f2c2f68f2150885bbce410e4091c807bb1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\n\\n/// @title PermissionedVaultActionMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\nabstract contract PermissionedVaultActionMixin {\\n    /// @notice Adds an external position to active external positions\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The external position to be added\\n    function __addExternalPosition(address _comptrollerProxy, address _externalPosition) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Adds a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to add\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.AddTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset for which to grant an allowance\\n    /// @param _target The spender of the allowance\\n    /// @param _amount The amount of the allowance\\n    function __approveAssetSpender(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.ApproveAssetSpender,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n\\n    /// @notice Burns fund shares for a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account for which to burn shares\\n    /// @param _amount The amount of shares to burn\\n    function __burnShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.BurnShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Executes a callOnExternalPosition\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _data The encoded data for the call\\n    function __callOnExternalPosition(address _comptrollerProxy, bytes memory _data) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.CallOnExternalPosition,\\n            _data\\n        );\\n    }\\n\\n    /// @notice Mints fund shares to a particular account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _target The account to which to mint shares\\n    /// @param _amount The amount of shares to mint\\n    function __mintShares(\\n        address _comptrollerProxy,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.MintShares,\\n            abi.encode(_target, _amount)\\n        );\\n    }\\n\\n    /// @notice Removes an external position from the vaultProxy\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _externalPosition The ExternalPosition to remove\\n    function __removeExternalPosition(address _comptrollerProxy, address _externalPosition)\\n        internal\\n    {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveExternalPosition,\\n            abi.encode(_externalPosition)\\n        );\\n    }\\n\\n    /// @notice Removes a tracked asset\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to remove\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.RemoveTrackedAsset,\\n            abi.encode(_asset)\\n        );\\n    }\\n\\n    /// @notice Transfers fund shares from one account to another\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _from The account from which to transfer shares\\n    /// @param _to The account to which to transfer shares\\n    /// @param _amount The amount of shares to transfer\\n    function __transferShares(\\n        address _comptrollerProxy,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.TransferShares,\\n            abi.encode(_from, _to, _amount)\\n        );\\n    }\\n\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _asset The asset to withdraw\\n    /// @param _target The account to which to withdraw the asset\\n    /// @param _amount The amount of asset to withdraw\\n    function __withdrawAssetTo(\\n        address _comptrollerProxy,\\n        address _asset,\\n        address _target,\\n        uint256 _amount\\n    ) internal {\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\n            IVault.VaultAction.WithdrawAssetTo,\\n            abi.encode(_asset, _target, _amount)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x77ddb9299d9c5f1538c20ae1543c20ef73db11ad7d9a9b817d26969ab233bb57\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n\\n    function isSupportedDerivativeAsset(address) external view returns (bool);\\n\\n    function isSupportedPrimitiveAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6838a22b0357f3c5f437c1e54b8f63c7df42b41e3b25d56c5017eb75a857a794\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /////////////\\n    // STORAGE //\\n    /////////////\\n\\n    /// @dev Helper to remove an item from a storage array\\n    function removeStorageItem(address[] storage _self, address _itemToRemove)\\n        internal\\n        returns (bool removed_)\\n    {\\n        uint256 itemCount = _self.length;\\n        for (uint256 i; i < itemCount; i++) {\\n            if (_self[i] == _itemToRemove) {\\n                if (i < itemCount - 1) {\\n                    _self[i] = _self[itemCount - 1];\\n                }\\n                _self.pop();\\n                removed_ = true;\\n                break;\\n            }\\n        }\\n\\n        return removed_;\\n    }\\n\\n    /// @dev Helper to verify if a storage array contains a particular value\\n    function storageArrayContains(address[] storage _self, address _target)\\n        internal\\n        view\\n        returns (bool doesContain_)\\n    {\\n        uint256 arrLength = _self.length;\\n        for (uint256 i; i < arrLength; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ////////////\\n    // MEMORY //\\n    ////////////\\n\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to merge the unique items of a second array.\\n    /// Does not consider uniqueness of either array, only relative uniqueness.\\n    /// Preserves ordering.\\n    function mergeArray(address[] memory _self, address[] memory _arrayToMerge)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        uint256 newUniqueItemCount;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                newUniqueItemCount++;\\n            }\\n        }\\n\\n        if (newUniqueItemCount == 0) {\\n            return _self;\\n        }\\n\\n        nextArray_ = new address[](_self.length + newUniqueItemCount);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        uint256 nextArrayIndex = _self.length;\\n        for (uint256 i; i < _arrayToMerge.length; i++) {\\n            if (!contains(_self, _arrayToMerge[i])) {\\n                nextArray_[nextArrayIndex] = _arrayToMerge[i];\\n                nextArrayIndex++;\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0xd76e220cc754d7c939e54c18d4060f843ca798bccaf9a9dbbd428e38d0f0960f\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to aggregate amounts of the same assets\\n    function __aggregateAssetAmounts(address[] memory _rawAssets, uint256[] memory _rawAmounts)\\n        internal\\n        pure\\n        returns (address[] memory aggregatedAssets_, uint256[] memory aggregatedAmounts_)\\n    {\\n        if (_rawAssets.length == 0) {\\n            return (aggregatedAssets_, aggregatedAmounts_);\\n        }\\n\\n        uint256 aggregatedAssetCount = 1;\\n        for (uint256 i = 1; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < i; j++) {\\n                if (_rawAssets[i] == _rawAssets[j]) {\\n                    contains = true;\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssetCount++;\\n            }\\n        }\\n\\n        aggregatedAssets_ = new address[](aggregatedAssetCount);\\n        aggregatedAmounts_ = new uint256[](aggregatedAssetCount);\\n        uint256 aggregatedAssetIndex;\\n        for (uint256 i; i < _rawAssets.length; i++) {\\n            bool contains;\\n            for (uint256 j; j < aggregatedAssetIndex; j++) {\\n                if (_rawAssets[i] == aggregatedAssets_[j]) {\\n                    contains = true;\\n\\n                    aggregatedAmounts_[j] += _rawAmounts[i];\\n\\n                    break;\\n                }\\n            }\\n            if (!contains) {\\n                aggregatedAssets_[aggregatedAssetIndex] = _rawAssets[i];\\n                aggregatedAmounts_[aggregatedAssetIndex] = _rawAmounts[i];\\n                aggregatedAssetIndex++;\\n            }\\n        }\\n\\n        return (aggregatedAssets_, aggregatedAmounts_);\\n    }\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        uint256 allowance = ERC20(_asset).allowance(address(this), _target);\\n        if (allowance < _neededAmount) {\\n            if (allowance > 0) {\\n                ERC20(_asset).safeApprove(_target, 0);\\n            }\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0x1c845678a4a0185294b9e18a4c3c06707ab9543091029b3b0d4122a1e7648ec3\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xd415583828581051080d575f058643f4975d7048fda0d1765122b260d9d14934\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516127233803806127238339818101604052606081101561003357600080fd5b50805160208201516040909201516001600160601b0319606092831b811660805292821b831660a052901b1660c05260805160601c60a05160601c60c05160601c61268761009c6000398061047952508061054f52508061049f528061052952506126876000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063893d20e811610066578063893d20e81461018657806397c0ac871461018e578063bd8e959a14610196578063d44ad6cb1461019e578063f067cc11146101a657610093565b80631bee801e14610098578063467903461461011d57806380d570631461015f578063875fb4b31461017e575b600080fd5b61011b600480360360608110156100ae57600080fd5b6001600160a01b0382351691602081013591810190606081016040820135600160201b8111156100dd57600080fd5b8201836020820111156100ef57600080fd5b803590602001918460018302840111600160201b8311171561011057600080fd5b50909250905061022d565b005b6101436004803603602081101561013357600080fd5b50356001600160a01b0316610453565b604080516001600160a01b039092168252519081900360200190f35b61011b6004803603602081101561017557600080fd5b50351515610474565b610143610477565b61014361049b565b610143610527565b61011b61054b565b61014361054d565b61011b600480360360608110156101bc57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156101ef57600080fd5b82018360208201111561020157600080fd5b803590602001918460018302840111600160201b8311171561022257600080fd5b509092509050610571565b33600061023982610453565b90506001600160a01b0381166102805760405162461bcd60e51b815260040180806020018281038252602d8152602001806125c2602d913960400191505060405180910390fd5b806001600160a01b031663714ca2d1876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156102cd57600080fd5b505afa1580156102e1573d6000803e3d6000fd5b505050506040513d60208110156102f757600080fd5b50516103345760405162461bcd60e51b81526004018080602001828103825260288152602001806125106028913960400191505060405180910390fd5b846103805761037b86838387878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506105d892505050565b61044b565b84600114156103ca5761037b868386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610aee92505050565b84600214156104145761037b868386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610df192505050565b60405162461bcd60e51b815260040180806020018281038252602d8152602001806124b7602d913960400191505060405180910390fd5b505050505050565b6001600160a01b03808216600090815260208190526040902054165b919050565b50565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f657600080fd5b505afa15801561050a573d6000803e3d6000fd5b505050506040513d602081101561052057600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b565b7f000000000000000000000000000000000000000000000000000000000000000090565b610579610527565b6001600160a01b0316336001600160a01b0316146105c85760405162461bcd60e51b815260040180806020018281038252602881526020018061259a6028913960400191505060405180910390fd5b6105d2848461101f565b50505050565b816001600160a01b0316635a53e3486040518163ffffffff1660e01b815260040160206040518083038186803b15801561061157600080fd5b505afa158015610625573d6000803e3d6000fd5b505050506040513d602081101561063b57600080fd5b50516001600160a01b038481169116146106865760405162461bcd60e51b815260040180806020018281038252602e815260200180612434602e913960400191505060405180910390fd5b600080606061069484611076565b9250925092506060806060806106ad8a8a898989611156565b93509350935093506106bd61054d565b6001600160a01b0316630442bad58b60018e8b8b8a8a8a8a60405160200180886001600160a01b03168152602001876001600160a01b03168152602001866001600160e01b031916815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561075257818101518382015260200161073a565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610791578181015183820152602001610779565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156107d05781810151838201526020016107b8565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561080f5781810151838201526020016107f7565b505050509050019b5050505050505050505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183600981111561086057fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561089e578181015183820152602001610886565b50505050905090810190601f1680156108cb5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b50505050856001600160e01b031916876001600160a01b03168b6001600160a01b03167ff9a77e6aa0d5e80e8c932c9586e789fc0f4efe610f844fc982129c6f385bfffa8e898989898960405180876001600160a01b03168152602001806020018060200180602001806020018060200186810386528b818151815260200191508051906020019080838360005b838110156109a657818101518382015260200161098e565b50505050905090810190601f1680156109d35780820380516001836020036101000a031916815260200191505b5086810385528a5181528a51602091820191808d01910280838360005b83811015610a085781810151838201526020016109f0565b50505050905001868103845289818151815260200191508051906020019060200280838360005b83811015610a47578181015183820152602001610a2f565b50505050905001868103835288818151815260200191508051906020019060200280838360005b83811015610a86578181015183820152602001610a6e565b50505050905001868103825287818151815260200191508051906020019060200280838360005b83811015610ac5578181015183820152602001610aad565b505050509050019b50505050505050505050505060405180910390a45050505050505050505050565b6060818060200190516020811015610b0557600080fd5b8101908080516040519392919084600160201b821115610b2457600080fd5b908301906020820185811115610b3957600080fd5b82518660208202830111600160201b82111715610b5557600080fd5b82525081516020918201928201910280838360005b83811015610b82578181015183820152602001610b6a565b505050509050016040525050509050610b9961054d565b6001600160a01b0316630442bad5846004878560405160200180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610bfe578181015183820152602001610be6565b5050505090500193505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115610c4757fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610c85578181015183820152602001610c6d565b50505050905090810190601f168015610cb25780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610cd357600080fd5b505af1158015610ce7573d6000803e3d6000fd5b5050505060005b8151811015610dea57610cff610477565b6001600160a01b0316639be918e6838381518110610d1957fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d5e57600080fd5b505afa158015610d72573d6000803e3d6000fd5b505050506040513d6020811015610d8857600080fd5b5051610dc55760405162461bcd60e51b815260040180806020018281038252602c81526020018061248b602c913960400191505060405180910390fd5b610de284838381518110610dd557fe5b60200260200101516112ab565b600101610cee565b5050505050565b6060818060200190516020811015610e0857600080fd5b8101908080516040519392919084600160201b821115610e2757600080fd5b908301906020820185811115610e3c57600080fd5b82518660208202830111600160201b82111715610e5857600080fd5b82525081516020918201928201910280838360005b83811015610e85578181015183820152602001610e6d565b505050509050016040525050509050610e9c61054d565b6001600160a01b0316630442bad5846005878560405160200180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610f01578181015183820152602001610ee9565b5050505090500193505050506040516020818303038152906040526040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836009811115610f4a57fe5b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610f88578181015183820152602001610f70565b50505050905090810190601f168015610fb55780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610fd657600080fd5b505af1158015610fea573d6000803e3d6000fd5b5050505060005b8151811015610dea576110178483838151811061100a57fe5b6020026020010151611391565b600101610ff1565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517f8852dcaa71340ea616a65ffac013450dfb238607481fb9d78346c667fe256c139190a35050565b600080606083806020019051606081101561109057600080fd5b81516020830151604080850180519151939592948301929184600160201b8211156110ba57600080fd5b9083019060208201858111156110cf57600080fd5b8251600160201b8111828201881017156110e857600080fd5b82525081516020918201929091019080838360005b838110156111155781810151838201526020016110fd565b50505050905090810190601f1680156111425780820380516001836020036101000a031916815260200191505b506040525050509250925092509193909250565b60608060608060608060006060806111718e8e8e8e8e6113dc565b809750819850829d50839950849a50859b50869f50505050505050506112838d8d8d8d8b878f60405160200180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156111e25781810151838201526020016111ca565b50505050905001848103835286818151815260200191508051906020019060200280838360005b83811015611221578181015183820152602001611209565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015611260578181015183820152602001611248565b505050509050019650505050505050604051602081830303815290604052611b98565b6112958e8e8e8c8989898e8a8a611df3565b9098509550505050505095509550955095915050565b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d916004919060440180835b815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611330578181015183820152602001611318565b50505050905090810190601f16801561135d5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b15801561137d57600080fd5b505af115801561044b573d6000803e3d6000fd5b604080516001600160a01b0383811660208084019190915283518084039091018152828401938490526310acd06d60e01b9093528416916310acd06d916006919060440180836112f2565b606080606060006060806060896001600160a01b031663c54efee58c8b8b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160e01b031916815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561146557818101518382015260200161144d565b50505050905090810190601f1680156114925780820380516001836020036101000a031916815260200191505b5094505050505060006040518083038186803b1580156114b157600080fd5b505afa1580156114c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260a08110156114ee57600080fd5b815160208301805160405192949293830192919084600160201b82111561151457600080fd5b90830190602082018581111561152957600080fd5b82518660208202830111600160201b8211171561154557600080fd5b82525081516020918201928201910280838360005b8381101561157257818101518382015260200161155a565b5050505090500160405260200180516040519392919084600160201b82111561159a57600080fd5b9083019060208201858111156115af57600080fd5b82518660208202830111600160201b821117156115cb57600080fd5b82525081516020918201928201910280838360005b838110156115f85781810151838201526020016115e0565b5050505090500160405260200180516040519392919084600160201b82111561162057600080fd5b90830190602082018581111561163557600080fd5b82518660208202830111600160201b8211171561165157600080fd5b82525081516020918201928201910280838360005b8381101561167e578181015183820152602001611666565b5050505090500160405260200180516040519392919084600160201b8211156116a657600080fd5b9083019060208201858111156116bb57600080fd5b82518660208202830111600160201b821117156116d757600080fd5b82525081516020918201928201910280838360005b838110156117045781810151838201526020016116ec565b5050505091909101604052505084518651949e50929b5095995093975091955014915061176490505760405162461bcd60e51b815260040180806020018281038252602c8152602001806124e4602c913960400191505060405180910390fd5b84518751146117a45760405162461bcd60e51b815260040180806020018281038252602f8152602001806125ef602f913960400191505060405180910390fd5b6117ad83612149565b6117e85760405162461bcd60e51b81526004018080602001828103825260268152602001806125386026913960400191505060405180910390fd5b6117f187612149565b61182c5760405162461bcd60e51b81526004018080602001828103825260298152602001806124626029913960400191505060405180910390fd5b865167ffffffffffffffff8111801561184457600080fd5b5060405190808252806020026020018201604052801561186e578160200160208202803683370190505b50955060005b87518110156119f857611885610477565b6001600160a01b0316639be918e689838151811061189f57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118e457600080fd5b505afa1580156118f8573d6000803e3d6000fd5b505050506040513d602081101561190e57600080fd5b505161194b5760405162461bcd60e51b815260040180806020018281038252602e815260200180612406602e913960400191505060405180910390fd5b87818151811061195757fe5b60200260200101516001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156119ab57600080fd5b505afa1580156119bf573d6000803e3d6000fd5b505050506040513d60208110156119d557600080fd5b505187518890839081106119e557fe5b6020908102919091010152600101611874565b50825167ffffffffffffffff81118015611a1157600080fd5b50604051908082528060200260200182016040528015611a3b578160200160208202803683370190505b50905060005b8351811015611b8857838181518110611a5657fe5b60200260200101516001600160a01b03166370a082318d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611aaa57600080fd5b505afa158015611abe573d6000803e3d6000fd5b505050506040513d6020811015611ad457600080fd5b50518251839083908110611ae457fe5b60209081029190910101526001856002811115611afd57fe5b1415611b3a57611b358d858381518110611b1357fe5b60200260200101518d868581518110611b2857fe5b60200260200101516121dd565b611b80565b6002856002811115611b4857fe5b1415611b8057611b808d858381518110611b5e57fe5b60200260200101518d868581518110611b7357fe5b60200260200101516122cf565b600101611a41565b50959b949a509550955095509550565b60006060856001600160a01b03168588868660405160240180846001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611bfd578181015183820152602001611be5565b50505050905090810190601f168015611c2a5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015611c5d578181015183820152602001611c45565b50505050905090810190601f168015611c8a5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909a16999099178952518151919890975087965094509250829150849050835b60208310611cf25780518252601f199092019160209182019101611cd3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114611d54576040519150601f19603f3d011682016040523d82523d6000602084013e611d59565b606091505b5091509150818190611de95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611dae578181015183820152602001611d96565b50505050905090810190601f168015611ddb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505050505050565b606080885167ffffffffffffffff81118015611e0e57600080fd5b50604051908082528060200260200182016040528015611e38578160200160208202803683370190505b50915060005b8951811015611f1657611e81898281518110611e5657fe5b6020026020010151611e7b8e8d8581518110611e6e57fe5b6020026020010151612326565b906123a8565b838281518110611e8d57fe5b602002602001018181525050878181518110611ea557fe5b6020026020010151838281518110611eb957fe5b60200260200101511015611efe5760405162461bcd60e51b815260040180806020018281038252603c81526020018061255e603c913960400191505060405180910390fd5b611f0e8d8b8381518110610dd557fe5b600101611e3e565b50845167ffffffffffffffff81118015611f2f57600080fd5b50604051908082528060200260200182016040528015611f59578160200160208202803683370190505b50905060005b8551811015612139576000611f7a8d888481518110611e6e57fe5b9050848281518110611f8857fe5b6020026020010151811015611fd657611fbd81868481518110611fa757fe5b60200260200101516123a890919063ffffffff16565b838381518110611fc957fe5b6020026020010181815250505b6001886002811115611fe457fe5b14801561208d57506000878381518110611ffa57fe5b60200260200101516001600160a01b031663dd62ed3e8f8f6040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b15801561205f57600080fd5b505afa158015612073573d6000803e3d6000fd5b505050506040513d602081101561208957600080fd5b5051115b156120b7576120b28e8884815181106120a257fe5b60200260200101518e60006121dd565b612130565b60008860028111156120c557fe5b1415612130578582815181106120d757fe5b60200260200101518383815181106120eb57fe5b602002602001015111156121305760405162461bcd60e51b815260040180806020018281038252603481526020018061261e6034913960400191505060405180910390fd5b50600101611f5f565b509a509a98505050505050505050565b6000600182511161215c5750600161046f565b815160005b818110156121d357600181015b828110156121ca5784818151811061218257fe5b60200260200101516001600160a01b031685838151811061219f57fe5b60200260200101516001600160a01b031614156121c2576000935050505061046f565b60010161216e565b50600101612161565b5060019392505050565b604080516001600160a01b0385811660208301528481168284015260608083018590528351808403909101815260808301938490526310acd06d60e01b9093528616916310acd06d916005919060840180835b815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561226e578181015183820152602001612256565b50505050905090810190601f16801561229b5780820380516001836020036101000a031916815260200191505b509350505050600060405180830381600087803b1580156122bb57600080fd5b505af1158015611de9573d6000803e3d6000fd5b604080516001600160a01b0385811660208301528481168284015260608083018590528351808403909101815260808301938490526310acd06d60e01b9093528616916310acd06d91600791906084018083612230565b6000816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561237557600080fd5b505afa158015612389573d6000803e3d6000fd5b505050506040513d602081101561239f57600080fd5b50519392505050565b6000828211156123ff576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe5f5f70726550726f63657373436f493a204e6f6e2d72656365697661626c6520696e636f6d696e672061737365747265636569766543616c6c46726f6d436f6d7074726f6c6c65723a2046756e64206973206e6f74206163746976655f5f70726550726f63657373436f493a204475706c696361746520696e636f6d696e672061737365745f5f616464547261636b6564417373657473546f5661756c743a20556e737570706f727465642061737365747265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e76616c6964205f616374696f6e49645f5f70726550726f63657373436f493a205370656e64206173736574732061727261797320756e657175616c7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20556e617574686f72697a65645f5f70726550726f63657373436f493a204475706c6963617465207370656e642061737365745f5f706f737450726f63657373436f493a20526563656976656420696e636f6d696e67206173736574206c657373207468616e2065787065637465644f6e6c79207468652046756e644465706c6f7965722063616e206d616b6520746869732063616c6c7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a2046756e64206973206e6f742076616c69645f5f70726550726f63657373436f493a20496e636f6d696e67206173736574732061727261797320756e657175616c5f5f706f737450726f63657373436f493a205370656e7420616d6f756e742067726561746572207468616e206578706563746564a26469706673582212204670673265c56d3ac454e4f4c8246d868caeb6556bf9c14bcb0380534b18b33064736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Any arbitrary adapter is allowed by default, so all participants must be aware of their fund's configuration, especially whether they use a policy that only allows official adapters. Owners and asset managers must also establish trust for any arbitrary adapters that they interact with.",
    "kind": "dev",
    "methods": {
      "activateForFund(bool)": {
        "details": "Unimplemented by default, may be overridden."
      },
      "deactivateForFund()": {
        "details": "Unimplemented by default, may be overridden."
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "getValueInterpreter()": {
        "returns": {
          "valueInterpreter_": "The `VALUE_INTERPRETER` variable value"
        }
      },
      "getVaultProxyForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "vaultProxy_": "The VaultProxy of the fund"
        }
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "params": {
          "_actionId": "An ID representing the desired action",
          "_callArgs": "The encoded args for the action",
          "_caller": "The user who called for this action"
        }
      },
      "setConfigForFund(address,address,bytes)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_vaultProxy": "The VaultProxy of the fund"
        }
      }
    },
    "title": "IntegrationManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(bool)": {
        "notice": "Allows extension to run logic during fund activation"
      },
      "deactivateForFund()": {
        "notice": "Allows extension to run logic during fund deactivation (destruct)"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable"
      },
      "getValueInterpreter()": {
        "notice": "Gets the `VALUE_INTERPRETER` variable"
      },
      "getVaultProxyForFund(address)": {
        "notice": "Gets the verified VaultProxy for a given ComptrollerProxy"
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "notice": "Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy"
      },
      "setConfigForFund(address,address,bytes)": {
        "notice": "Enables the IntegrationManager to be used by a fund"
      }
    },
    "notice": "Extension to handle DeFi integration actions for funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41927,
        "contract": "contracts/release/extensions/integration-manager/IntegrationManager.sol:IntegrationManager",
        "label": "comptrollerProxyToVaultProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}