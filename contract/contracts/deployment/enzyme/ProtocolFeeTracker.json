{
  "address": "0x2ACb827FC329851F798914C5338DE819480b4AD6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextFeeBpsDefault",
          "type": "uint256"
        }
      ],
      "name": "FeeBpsDefaultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextFeeBpsOverride",
          "type": "uint256"
        }
      ],
      "name": "FeeBpsOverrideSetForVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondsPaid",
          "type": "uint256"
        }
      ],
      "name": "FeePaidForVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "InitializedForVault",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTimestamp",
          "type": "uint256"
        }
      ],
      "name": "LastPaidSetForVault",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getFeeBpsDefault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeBpsDefault_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "getFeeBpsForVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeBps_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "getFeeBpsOverrideForVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "feeBpsOverride_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "getLastPaidForVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastPaid_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        }
      ],
      "name": "initializeForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesDue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextFeeBpsDefault",
          "type": "uint256"
        }
      ],
      "name": "setFeeBpsDefault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextFeeBpsOverride",
          "type": "uint256"
        }
      ],
      "name": "setFeeBpsOverrideForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nextTimestamp",
          "type": "uint256"
        }
      ],
      "name": "setLastPaidForVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fd1010f75bf43d5e979da9af0e794e7b68c86d25c1a97776d25e9835a15ba7d",
  "receipt": {
    "to": null,
    "from": "0xA3579C4c2057b58244DBc7DF5411C79d5F63a8A7",
    "contractAddress": "0x2ACb827FC329851F798914C5338DE819480b4AD6",
    "transactionIndex": 1,
    "gasUsed": "672966",
    "logsBloom": "0x
    "blockHash": "0x46cbad3adad3748c5e326fe2a5fa18a59cfb27eb5e67136fa4a5f9ec5b5549a5",
    "transactionHash": "0x3fd1010f75bf43d5e979da9af0e794e7b68c86d25c1a97776d25e9835a15ba7d",
    "logs": [],
    "blockNumber": 11761599,
    "cumulativeGasUsed": "804239",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd590Dc2e92ce061d941A7362F9DD92540679Ef8f"
  ],
  "numDeployments": 1,
  "solcInputHash": "ddc5045fde4ce39a48d0eb052f9d6752",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextFeeBpsDefault\",\"type\":\"uint256\"}],\"name\":\"FeeBpsDefaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextFeeBpsOverride\",\"type\":\"uint256\"}],\"name\":\"FeeBpsOverrideSetForVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondsPaid\",\"type\":\"uint256\"}],\"name\":\"FeePaidForVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"InitializedForVault\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTimestamp\",\"type\":\"uint256\"}],\"name\":\"LastPaidSetForVault\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFeeBpsDefault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBpsDefault_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"getFeeBpsForVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBps_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"getFeeBpsOverrideForVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeBpsOverride_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"getLastPaidForVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastPaid_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"}],\"name\":\"initializeForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesDue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextFeeBpsDefault\",\"type\":\"uint256\"}],\"name\":\"setFeeBpsDefault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextFeeBpsOverride\",\"type\":\"uint256\"}],\"name\":\"setFeeBpsOverrideForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nextTimestamp\",\"type\":\"uint256\"}],\"name\":\"setLastPaidForVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"getFeeBpsDefault()\":{\"returns\":{\"feeBpsDefault_\":\"The `feeBpsDefault` variable value\"}},\"getFeeBpsForVault(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy\"},\"returns\":{\"feeBps_\":\"The protocol fee (in bps)\"}},\"getFeeBpsOverrideForVault(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy\"},\"returns\":{\"feeBpsOverride_\":\"The feeBpsOverride value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getLastPaidForVault(address)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy\"},\"returns\":{\"lastPaid_\":\"The lastPaid value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"initializeForVault(address)\":{\"details\":\"Does not validate whether _vaultProxy is already initialized, as FundDeployer will only do this once\",\"params\":{\"_vaultProxy\":\"The VaultProxy\"}},\"payFee()\":{\"details\":\"This trusts the VaultProxy to mint the correct sharesDue_. There is no need to validate that the VaultProxy is still on this release.\",\"returns\":{\"sharesDue_\":\"The amount of shares to be minted for payment\"}},\"setFeeBpsDefault(uint256)\":{\"params\":{\"_nextFeeBpsDefault\":\"The default protocol fee rate (in bps) to set\"}},\"setFeeBpsOverrideForVault(address,uint256)\":{\"params\":{\"_nextFeeBpsOverride\":\"The protocol fee rate (in bps) to set\",\"_vaultProxy\":\"The VaultProxy\"}},\"setLastPaidForVault(address,uint256)\":{\"params\":{\"_nextTimestamp\":\"The lastPaid timestamp to set\",\"_vaultProxy\":\"The VaultProxy\"}}},\"title\":\"ProtocolFeeTracker Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getFeeBpsDefault()\":{\"notice\":\"Gets the `feeBpsDefault` variable value\"},\"getFeeBpsForVault(address)\":{\"notice\":\"Gets the protocol fee rate (in bps) for a given VaultProxy\"},\"getFeeBpsOverrideForVault(address)\":{\"notice\":\"Gets the feeBpsOverride value for the given VaultProxy\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getLastPaidForVault(address)\":{\"notice\":\"Gets the lastPaid value for the given VaultProxy\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"initializeForVault(address)\":{\"notice\":\"Initializes protocol fee tracking for a given VaultProxy\"},\"payFee()\":{\"notice\":\"Marks the protocol fee as paid for the sender, and gets the amount of shares that should be minted for payment\"},\"setFeeBpsDefault(uint256)\":{\"notice\":\"Sets the default protocol fee rate (in bps)\"},\"setFeeBpsOverrideForVault(address,uint256)\":{\"notice\":\"Sets a specified protocol fee rate (in bps) for a particular VaultProxy\"},\"setLastPaidForVault(address,uint256)\":{\"notice\":\"Sets the lastPaid timestamp for a specified VaultProxy\"}},\"notice\":\"The contract responsible for tracking owed protocol fees\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/protocol-fees/ProtocolFeeTracker.sol\":\"ProtocolFeeTracker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    function getOwner() external view returns (address);\\n\\n    function hasReconfigurationRequest(address) external view returns (bool);\\n\\n    function isAllowedBuySharesOnBehalfCaller(address) external view returns (bool);\\n\\n    function isAllowedVaultCall(\\n        address,\\n        bytes4,\\n        bytes32\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5b901b81b3a4ef3d30ef9b4a1fa7fdd6526dfacd66e9971d1f988c2b63334314\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/protocol-fees/IProtocolFeeTracker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IProtocolFeeTracker Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IProtocolFeeTracker {\\n    function initializeForVault(address) external;\\n\\n    function payFee() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x232b347f83457439064add7369bfe1930c7cb56f15930bb87d640e909c15e447\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/protocol-fees/ProtocolFeeTracker.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"./IProtocolFeeTracker.sol\\\";\\n\\n/// @title ProtocolFeeTracker Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The contract responsible for tracking owed protocol fees\\ncontract ProtocolFeeTracker is IProtocolFeeTracker, FundDeployerOwnerMixin {\\n    using SafeMath for uint256;\\n\\n    event InitializedForVault(address vaultProxy);\\n\\n    event FeeBpsDefaultSet(uint256 nextFeeBpsDefault);\\n\\n    event FeeBpsOverrideSetForVault(address indexed vaultProxy, uint256 nextFeeBpsOverride);\\n\\n    event FeePaidForVault(address indexed vaultProxy, uint256 sharesAmount, uint256 secondsPaid);\\n\\n    event LastPaidSetForVault(\\n        address indexed vaultProxy,\\n        uint256 prevTimestamp,\\n        uint256 nextTimestamp\\n    );\\n\\n    uint256 private constant MAX_BPS = 10000;\\n    uint256 private constant SECONDS_IN_YEAR = 31557600; // 60*60*24*365.25\\n\\n    uint256 private feeBpsDefault;\\n    mapping(address => uint256) private vaultProxyToFeeBpsOverride;\\n    mapping(address => uint256) private vaultProxyToLastPaid;\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {\\n        // Validate constants\\n        require(\\n            SECONDS_IN_YEAR == (60 * 60 * 24 * 36525) / 100,\\n            \\\"constructor: Incorrect SECONDS_IN_YEAR\\\"\\n        );\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Initializes protocol fee tracking for a given VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @dev Does not validate whether _vaultProxy is already initialized,\\n    /// as FundDeployer will only do this once\\n    function initializeForVault(address _vaultProxy) external override {\\n        require(msg.sender == getFundDeployer(), \\\"Only the FundDeployer can call this function\\\");\\n\\n        __setLastPaidForVault(_vaultProxy, block.timestamp);\\n\\n        emit InitializedForVault(_vaultProxy);\\n    }\\n\\n    /// @notice Marks the protocol fee as paid for the sender, and gets the amount of shares that\\n    /// should be minted for payment\\n    /// @return sharesDue_ The amount of shares to be minted for payment\\n    /// @dev This trusts the VaultProxy to mint the correct sharesDue_.\\n    /// There is no need to validate that the VaultProxy is still on this release.\\n    function payFee() external override returns (uint256 sharesDue_) {\\n        address vaultProxy = msg.sender;\\n\\n        // VaultProxy is validated during initialization\\n        uint256 lastPaid = getLastPaidForVault(vaultProxy);\\n        if (lastPaid >= block.timestamp) {\\n            return 0;\\n        }\\n\\n        // Not strictly necessary as we trust the FundDeployer to have already initialized the\\n        // VaultProxy, but inexpensive\\n        require(lastPaid > 0, \\\"payFee: VaultProxy not initialized\\\");\\n\\n        uint256 secondsDue = block.timestamp.sub(lastPaid);\\n        sharesDue_ = __calcSharesDueForVault(vaultProxy, secondsDue);\\n\\n        // Even if sharesDue_ is 0, we update the lastPaid timestamp and emit the event\\n        __setLastPaidForVault(vaultProxy, block.timestamp);\\n\\n        emit FeePaidForVault(vaultProxy, sharesDue_, secondsDue);\\n\\n        return sharesDue_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Gets the protocol fee rate (in bps) for a given VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @return feeBps_ The protocol fee (in bps)\\n    function getFeeBpsForVault(address _vaultProxy) public view returns (uint256 feeBps_) {\\n        feeBps_ = getFeeBpsOverrideForVault(_vaultProxy);\\n\\n        if (feeBps_ == 0) {\\n            feeBps_ = getFeeBpsDefault();\\n        }\\n\\n        return feeBps_;\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to calculate the protocol fee shares due for a given VaultProxy\\n    function __calcSharesDueForVault(address _vaultProxy, uint256 _secondsDue)\\n        private\\n        view\\n        returns (uint256 sharesDue_)\\n    {\\n        uint256 sharesSupply = ERC20(_vaultProxy).totalSupply();\\n\\n        uint256 rawSharesDue = sharesSupply\\n            .mul(getFeeBpsForVault(_vaultProxy))\\n            .mul(_secondsDue)\\n            .div(SECONDS_IN_YEAR)\\n            .div(MAX_BPS);\\n\\n        uint256 supplyNetRawSharesDue = sharesSupply.sub(rawSharesDue);\\n        if (supplyNetRawSharesDue == 0) {\\n            return 0;\\n        }\\n\\n        return rawSharesDue.mul(sharesSupply).div(supplyNetRawSharesDue);\\n    }\\n\\n    /// @dev Helper to set the lastPaid timestamp for a given VaultProxy\\n    function __setLastPaidForVault(address _vaultProxy, uint256 _nextTimestamp) private {\\n        vaultProxyToLastPaid[_vaultProxy] = _nextTimestamp;\\n    }\\n\\n    ////////////////\\n    // ADMIN ONLY //\\n    ////////////////\\n\\n    /// @notice Sets the default protocol fee rate (in bps)\\n    /// @param _nextFeeBpsDefault The default protocol fee rate (in bps) to set\\n    function setFeeBpsDefault(uint256 _nextFeeBpsDefault) external onlyFundDeployerOwner {\\n        require(_nextFeeBpsDefault < MAX_BPS, \\\"setDefaultFeeBps: Exceeds max\\\");\\n\\n        feeBpsDefault = _nextFeeBpsDefault;\\n\\n        emit FeeBpsDefaultSet(_nextFeeBpsDefault);\\n    }\\n\\n    /// @notice Sets a specified protocol fee rate (in bps) for a particular VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @param _nextFeeBpsOverride The protocol fee rate (in bps) to set\\n    function setFeeBpsOverrideForVault(address _vaultProxy, uint256 _nextFeeBpsOverride)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        require(_nextFeeBpsOverride < MAX_BPS, \\\"setFeeBpsOverrideForVault: Exceeds max\\\");\\n\\n        vaultProxyToFeeBpsOverride[_vaultProxy] = _nextFeeBpsOverride;\\n\\n        emit FeeBpsOverrideSetForVault(_vaultProxy, _nextFeeBpsOverride);\\n    }\\n\\n    /// @notice Sets the lastPaid timestamp for a specified VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @param _nextTimestamp The lastPaid timestamp to set\\n    function setLastPaidForVault(address _vaultProxy, uint256 _nextTimestamp)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        uint256 prevTimestamp = getLastPaidForVault(_vaultProxy);\\n        require(prevTimestamp > 0, \\\"setLastPaidForVault: _vaultProxy not initialized\\\");\\n        require(\\n            _nextTimestamp > prevTimestamp || _nextTimestamp > block.timestamp,\\n            \\\"setLastPaidForVault: Can only increase or set a future timestamp\\\"\\n        );\\n\\n        __setLastPaidForVault(_vaultProxy, _nextTimestamp);\\n\\n        emit LastPaidSetForVault(_vaultProxy, prevTimestamp, _nextTimestamp);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `feeBpsDefault` variable value\\n    /// @return feeBpsDefault_ The `feeBpsDefault` variable value\\n    function getFeeBpsDefault() public view returns (uint256 feeBpsDefault_) {\\n        return feeBpsDefault;\\n    }\\n\\n    /// @notice Gets the feeBpsOverride value for the given VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @return feeBpsOverride_ The feeBpsOverride value\\n    function getFeeBpsOverrideForVault(address _vaultProxy)\\n        public\\n        view\\n        returns (uint256 feeBpsOverride_)\\n    {\\n        return vaultProxyToFeeBpsOverride[_vaultProxy];\\n    }\\n\\n    /// @notice Gets the lastPaid value for the given VaultProxy\\n    /// @param _vaultProxy The VaultProxy\\n    /// @return lastPaid_ The lastPaid value\\n    function getLastPaidForVault(address _vaultProxy) public view returns (uint256 lastPaid_) {\\n        return vaultProxyToLastPaid[_vaultProxy];\\n    }\\n}\\n\",\"keccak256\":\"0x57be8ee480bab83f94de3c621463ae8762a1ba11c3fc91bf9d07ffb25fb35cbd\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() public view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xd415583828581051080d575f058643f4975d7048fda0d1765122b260d9d14934\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610b9d380380610b9d8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b0316610b3161006c6000398061055052806105da5250610b316000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806397c0ac871161007157806397c0ac871461015d5780639f17818814610165578063b69f36521461018b578063bcdba20a146101b1578063f033ac56146101b9578063f8fc2961146101e5576100a9565b80630a48e041146100ae578063137e8d9b146100d657806329610252146100f35780637c73c6991461010d578063893d20e814610139575b600080fd5b6100d4600480360360208110156100c457600080fd5b50356001600160a01b031661020b565b005b6100d4600480360360208110156100ec57600080fd5b50356102ab565b6100fb610393565b60408051918252519081900360200190f35b6100d46004803603604081101561012357600080fd5b506001600160a01b038135169060200135610461565b61014161054c565b604080516001600160a01b039092168252519081900360200190f35b6101416105d8565b6100fb6004803603602081101561017b57600080fd5b50356001600160a01b03166105fc565b6100fb600480360360208110156101a157600080fd5b50356001600160a01b031661061b565b6100fb610636565b6100d4600480360360408110156101cf57600080fd5b506001600160a01b03813516906020013561063c565b6100fb600480360360208110156101fb57600080fd5b50356001600160a01b0316610779565b6102136105d8565b6001600160a01b0316336001600160a01b0316146102625760405162461bcd60e51b815260040180806020018281038252602c815260200180610a90602c913960400191505060405180910390fd5b61026c8142610799565b604080516001600160a01b038316815290517fd3ba69979a943b00f5eea9e34dba3f3104dcf0c16890e7d8c693a0d52de074589181900360200190a150565b6102b361054c565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b6127108110610358576040805162461bcd60e51b815260206004820152601d60248201527f73657444656661756c744665654270733a2045786365656473206d6178000000604482015290519081900360640190fd5b60008190556040805182815290517f39c6a3e3a79878fee4b8deeec6702a2c4971f2bdcb4bb41aa2b6cf58c9905e5d9181900360200190a150565b600033816103a08261061b565b90504281106103b45760009250505061045e565b600081116103f35760405162461bcd60e51b81526004018080602001828103825260228152602001806109f76022913960400191505060405180910390fd5b60006103ff42836107b5565b905061040b8382610812565b93506104178342610799565b604080518581526020810183905281516001600160a01b038616927f1e6728e7f6ab409f42c28a298d4691e94f5426e54658999f76770bff70e56eaf928290030190a25050505b90565b61046961054c565b6001600160a01b0316336001600160a01b0316146104b85760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b61271081106104f85760405162461bcd60e51b8152600401808060200182810382526026815260200180610a196026913960400191505060405180910390fd5b6001600160a01b038216600081815260016020908152604091829020849055815184815291517fb1a79d5ffbf14d3dbd6507eb9ea97f172baa93ff87773c8a9613841bcf3632759281900390910190a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d60208110156105d157600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0381166000908152600160205260409020545b919050565b6001600160a01b031660009081526002602052604090205490565b60005490565b61064461054c565b6001600160a01b0316336001600160a01b0316146106935760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b600061069e8361061b565b9050600081116106df5760405162461bcd60e51b8152600401808060200182810382526030815260200180610a3f6030913960400191505060405180910390fd5b808211806106ec57504282115b6107275760405162461bcd60e51b8152600401808060200182810382526040815260200180610abc6040913960400191505060405180910390fd5b6107318383610799565b604080518281526020810184905281516001600160a01b038616927fbcfa0c3d77a6e27e439a116566a0dd57d1f2c68d510dc877c6ac541b5275a9cf928290030190a2505050565b6000610784826105fc565b90508061061657610793610636565b92915050565b6001600160a01b03909116600090815260026020526040902055565b60008282111561080c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d602081101561087857600080fd5b5051905060006108ad6127106108a76301e187e081886108a161089a8c610779565b89906108e6565b906108e6565b90610946565b905060006108bb83836107b5565b9050806108ce5760009350505050610793565b6108dc816108a784866108e6565b9695505050505050565b6000826108f557506000610793565b8282028284828161090257fe5b041461093f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610a6f6021913960400191505060405180910390fd5b9392505050565b600080821161099c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816109a557fe5b04939250505056fe6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e7061794665653a205661756c7450726f7879206e6f7420696e697469616c697a65647365744665654270734f76657272696465466f725661756c743a2045786365656473206d61787365744c61737450616964466f725661756c743a205f7661756c7450726f7879206e6f7420696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f6e6c79207468652046756e644465706c6f7965722063616e2063616c6c20746869732066756e6374696f6e7365744c61737450616964466f725661756c743a2043616e206f6e6c7920696e637265617365206f72207365742061206675747572652074696d657374616d70a2646970667358221220c5af249d575c378a2525025eb403f4be6880c2e9823eb289d190726b0650cb5664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806397c0ac871161007157806397c0ac871461015d5780639f17818814610165578063b69f36521461018b578063bcdba20a146101b1578063f033ac56146101b9578063f8fc2961146101e5576100a9565b80630a48e041146100ae578063137e8d9b146100d657806329610252146100f35780637c73c6991461010d578063893d20e814610139575b600080fd5b6100d4600480360360208110156100c457600080fd5b50356001600160a01b031661020b565b005b6100d4600480360360208110156100ec57600080fd5b50356102ab565b6100fb610393565b60408051918252519081900360200190f35b6100d46004803603604081101561012357600080fd5b506001600160a01b038135169060200135610461565b61014161054c565b604080516001600160a01b039092168252519081900360200190f35b6101416105d8565b6100fb6004803603602081101561017b57600080fd5b50356001600160a01b03166105fc565b6100fb600480360360208110156101a157600080fd5b50356001600160a01b031661061b565b6100fb610636565b6100d4600480360360408110156101cf57600080fd5b506001600160a01b03813516906020013561063c565b6100fb600480360360208110156101fb57600080fd5b50356001600160a01b0316610779565b6102136105d8565b6001600160a01b0316336001600160a01b0316146102625760405162461bcd60e51b815260040180806020018281038252602c815260200180610a90602c913960400191505060405180910390fd5b61026c8142610799565b604080516001600160a01b038316815290517fd3ba69979a943b00f5eea9e34dba3f3104dcf0c16890e7d8c693a0d52de074589181900360200190a150565b6102b361054c565b6001600160a01b0316336001600160a01b0316146103025760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b6127108110610358576040805162461bcd60e51b815260206004820152601d60248201527f73657444656661756c744665654270733a2045786365656473206d6178000000604482015290519081900360640190fd5b60008190556040805182815290517f39c6a3e3a79878fee4b8deeec6702a2c4971f2bdcb4bb41aa2b6cf58c9905e5d9181900360200190a150565b600033816103a08261061b565b90504281106103b45760009250505061045e565b600081116103f35760405162461bcd60e51b81526004018080602001828103825260228152602001806109f76022913960400191505060405180910390fd5b60006103ff42836107b5565b905061040b8382610812565b93506104178342610799565b604080518581526020810183905281516001600160a01b038616927f1e6728e7f6ab409f42c28a298d4691e94f5426e54658999f76770bff70e56eaf928290030190a25050505b90565b61046961054c565b6001600160a01b0316336001600160a01b0316146104b85760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b61271081106104f85760405162461bcd60e51b8152600401808060200182810382526026815260200180610a196026913960400191505060405180910390fd5b6001600160a01b038216600081815260016020908152604091829020849055815184815291517fb1a79d5ffbf14d3dbd6507eb9ea97f172baa93ff87773c8a9613841bcf3632759281900390910190a25050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a757600080fd5b505afa1580156105bb573d6000803e3d6000fd5b505050506040513d60208110156105d157600080fd5b5051905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0381166000908152600160205260409020545b919050565b6001600160a01b031660009081526002602052604090205490565b60005490565b61064461054c565b6001600160a01b0316336001600160a01b0316146106935760405162461bcd60e51b81526004018080602001828103825260498152602001806109ae6049913960600191505060405180910390fd5b600061069e8361061b565b9050600081116106df5760405162461bcd60e51b8152600401808060200182810382526030815260200180610a3f6030913960400191505060405180910390fd5b808211806106ec57504282115b6107275760405162461bcd60e51b8152600401808060200182810382526040815260200180610abc6040913960400191505060405180910390fd5b6107318383610799565b604080518281526020810184905281516001600160a01b038616927fbcfa0c3d77a6e27e439a116566a0dd57d1f2c68d510dc877c6ac541b5275a9cf928290030190a2505050565b6000610784826105fc565b90508061061657610793610636565b92915050565b6001600160a01b03909116600090815260026020526040902055565b60008282111561080c576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600080836001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d602081101561087857600080fd5b5051905060006108ad6127106108a76301e187e081886108a161089a8c610779565b89906108e6565b906108e6565b90610946565b905060006108bb83836107b5565b9050806108ce5760009350505050610793565b6108dc816108a784866108e6565b9695505050505050565b6000826108f557506000610793565b8282028284828161090257fe5b041461093f5760405162461bcd60e51b8152600401808060200182810382526021815260200180610a6f6021913960400191505060405180910390fd5b9392505050565b600080821161099c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816109a557fe5b04939250505056fe6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e7061794665653a205661756c7450726f7879206e6f7420696e697469616c697a65647365744665654270734f76657272696465466f725661756c743a2045786365656473206d61787365744c61737450616964466f725661756c743a205f7661756c7450726f7879206e6f7420696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f6e6c79207468652046756e644465706c6f7965722063616e2063616c6c20746869732066756e6374696f6e7365744c61737450616964466f725661756c743a2043616e206f6e6c7920696e637265617365206f72207365742061206675747572652074696d657374616d70a2646970667358221220c5af249d575c378a2525025eb403f4be6880c2e9823eb289d190726b0650cb5664736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "getFeeBpsDefault()": {
        "returns": {
          "feeBpsDefault_": "The `feeBpsDefault` variable value"
        }
      },
      "getFeeBpsForVault(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy"
        },
        "returns": {
          "feeBps_": "The protocol fee (in bps)"
        }
      },
      "getFeeBpsOverrideForVault(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy"
        },
        "returns": {
          "feeBpsOverride_": "The feeBpsOverride value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getLastPaidForVault(address)": {
        "params": {
          "_vaultProxy": "The VaultProxy"
        },
        "returns": {
          "lastPaid_": "The lastPaid value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "initializeForVault(address)": {
        "details": "Does not validate whether _vaultProxy is already initialized, as FundDeployer will only do this once",
        "params": {
          "_vaultProxy": "The VaultProxy"
        }
      },
      "payFee()": {
        "details": "This trusts the VaultProxy to mint the correct sharesDue_. There is no need to validate that the VaultProxy is still on this release.",
        "returns": {
          "sharesDue_": "The amount of shares to be minted for payment"
        }
      },
      "setFeeBpsDefault(uint256)": {
        "params": {
          "_nextFeeBpsDefault": "The default protocol fee rate (in bps) to set"
        }
      },
      "setFeeBpsOverrideForVault(address,uint256)": {
        "params": {
          "_nextFeeBpsOverride": "The protocol fee rate (in bps) to set",
          "_vaultProxy": "The VaultProxy"
        }
      },
      "setLastPaidForVault(address,uint256)": {
        "params": {
          "_nextTimestamp": "The lastPaid timestamp to set",
          "_vaultProxy": "The VaultProxy"
        }
      }
    },
    "title": "ProtocolFeeTracker Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getFeeBpsDefault()": {
        "notice": "Gets the `feeBpsDefault` variable value"
      },
      "getFeeBpsForVault(address)": {
        "notice": "Gets the protocol fee rate (in bps) for a given VaultProxy"
      },
      "getFeeBpsOverrideForVault(address)": {
        "notice": "Gets the feeBpsOverride value for the given VaultProxy"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getLastPaidForVault(address)": {
        "notice": "Gets the lastPaid value for the given VaultProxy"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "initializeForVault(address)": {
        "notice": "Initializes protocol fee tracking for a given VaultProxy"
      },
      "payFee()": {
        "notice": "Marks the protocol fee as paid for the sender, and gets the amount of shares that should be minted for payment"
      },
      "setFeeBpsDefault(uint256)": {
        "notice": "Sets the default protocol fee rate (in bps)"
      },
      "setFeeBpsOverrideForVault(address,uint256)": {
        "notice": "Sets a specified protocol fee rate (in bps) for a particular VaultProxy"
      },
      "setLastPaidForVault(address,uint256)": {
        "notice": "Sets the lastPaid timestamp for a specified VaultProxy"
      }
    },
    "notice": "The contract responsible for tracking owed protocol fees",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 48054,
        "contract": "contracts/release/infrastructure/protocol-fees/ProtocolFeeTracker.sol:ProtocolFeeTracker",
        "label": "feeBpsDefault",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 48058,
        "contract": "contracts/release/infrastructure/protocol-fees/ProtocolFeeTracker.sol:ProtocolFeeTracker",
        "label": "vaultProxyToFeeBpsOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 48062,
        "contract": "contracts/release/infrastructure/protocol-fees/ProtocolFeeTracker.sol:ProtocolFeeTracker",
        "label": "vaultProxyToLastPaid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}