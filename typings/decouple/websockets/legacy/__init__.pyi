"""
This type stub file was generated by pyright.
"""

import struct
from typing import Any, Awaitable, Callable, Optional, Sequence
from ..exceptions import PayloadTooBig, ProtocolError
from ..frames import Frame as NewFrame, Opcode, parse_close, prepare_ctrl as encode_data, prepare_data, serialize_close
from .. import extensions

"""
:mod:`websockets.legacy.framing` reads and writes WebSocket frames.

It deals with a single frame at a time. Anything that depends on the sequence
of frames is implemented in :mod:`websockets.legacy.protocol`.

See `section 5 of RFC 6455`_.

.. _section 5 of RFC 6455: http://tools.ietf.org/html/rfc6455#section-5

"""
class Frame(NewFrame):
    @classmethod
    async def read(cls, reader: Callable[[int], Awaitable[bytes]], *, mask: bool, max_size: Optional[int] = ..., extensions: Optional[Sequence[extensions.Extension]] = ...) -> Frame:
        """
        Read a WebSocket frame.

        :param reader: coroutine that reads exactly the requested number of
            bytes, unless the end of file is reached
        :param mask: whether the frame should be masked i.e. whether the read
            happens on the server side
        :param max_size: maximum payload size in bytes
        :param extensions: list of classes with a ``decode()`` method that
            transforms the frame and return a new frame; extensions are applied
            in reverse order
        :raises ~websockets.exceptions.PayloadTooBig: if the frame exceeds
            ``max_size``
        :raises ~websockets.exceptions.ProtocolError: if the frame
            contains incorrect values

        """
        ...
    
    def write(self, write: Callable[[bytes], Any], *, mask: bool, extensions: Optional[Sequence[extensions.Extension]] = ...) -> None:
        """
        Write a WebSocket frame.

        :param frame: frame to write
        :param write: function that writes bytes
        :param mask: whether the frame should be masked i.e. whether the write
            happens on the client side
        :param extensions: list of classes with an ``encode()`` method that
            transform the frame and return a new frame; extensions are applied
            in order
        :raises ~websockets.exceptions.ProtocolError: if the frame
            contains incorrect values

        """
        ...
    


