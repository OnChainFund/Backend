"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing import Any, Callable, Dict, Optional, Tuple, Union

RNG = Callable[[int], bytes]
def PBKDF1(password: str, salt: bytes, dkLen: int, count: Optional[int] = ..., hashAlgo: Optional[ModuleType] = ...) -> bytes:
    ...

def PBKDF2(password: str, salt: bytes, dkLen: Optional[int] = ..., count: Optional[int] = ..., prf: Optional[RNG] = ..., hmac_hash_module: Optional[ModuleType] = ...) -> bytes:
    ...

class _S2V:
    def __init__(self, key: bytes, ciphermod: ModuleType, cipher_params: Optional[Dict[Any, Any]] = ...) -> None:
        ...
    
    @staticmethod
    def new(key: bytes, ciphermod: ModuleType) -> None:
        ...
    
    def update(self, item: bytes) -> None:
        ...
    
    def derive(self) -> bytes:
        ...
    


def HKDF(master: bytes, key_len: int, salt: bytes, hashmod: ModuleType, num_keys: Optional[int] = ..., context: Optional[bytes] = ...) -> Union[bytes, Tuple[bytes, ...]]:
    ...

def scrypt(password: str, salt: str, key_len: int, N: int, r: int, p: int, num_keys: Optional[int] = ...) -> Union[bytes, Tuple[bytes, ...]]:
    ...

def bcrypt(password: Union[bytes, str], cost: int, salt: Optional[bytes] = ...) -> bytes:
    ...

def bcrypt_check(password: Union[bytes, str], bcrypt_hash: Union[bytes, bytearray, str]) -> None:
    ...

