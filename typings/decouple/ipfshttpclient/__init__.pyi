"""
This type stub file was generated by pyright.
"""

import socket
import urllib.parse
import requests
import requests.adapters
import urllib3
import urllib3.connection
import urllib3.exceptions
import urllib3.poolmanager
import urllib3.util.connection
from requests import ConnectTimeout, ConnectionError, FileModeWarning, HTTPError, PreparedRequest, ReadTimeout, Request, RequestException, Response, Timeout, TooManyRedirects, URLRequired, __author__, __author_email__, __build__, __cake__, __copyright__, __description__, __license__, __title__, __url__, __version__, codes, exceptions, packages, utils

"""Exposes the full ``requests`` HTTP library API, while adding an extra
``family`` parameter to all HTTP request operations that may be used to restrict
the address family used when resolving a domain-name to an IP address.
"""
AF2NAME = ...
if hasattr(socket, "AF_UNIX"):
	...
NAME2AF = ...
def create_connection(address, timeout=..., source_address=..., socket_options=..., family=...):
	...

class ConnectionOverrideMixin:
	...


class HTTPConnection(ConnectionOverrideMixin, urllib3.connection.HTTPConnection):
	def __init__(self, *args, **kw) -> None:
		...
	


class HTTPSConnection(ConnectionOverrideMixin, urllib3.connection.HTTPSConnection):
	def __init__(self, *args, **kw) -> None:
		...
	


class HTTPConnectionPool(urllib3.HTTPConnectionPool):
	ConnectionCls = HTTPConnection


class HTTPSConnectionPool(urllib3.HTTPSConnectionPool):
	ConnectionCls = HTTPSConnection


class PoolManager(urllib3.PoolManager):
	def __init__(self, *args, **kwargs) -> None:
		...
	
	def connection_from_pool_key(self, pool_key, request_context=...): # -> Any:
		...
	


class HTTPAdapter(requests.adapters.HTTPAdapter):
	def init_poolmanager(self, connections, maxsize, block=..., **pool_kwargs): # -> None:
		...
	


class Session(requests.Session):
	def __init__(self, *args, **kwargs) -> None:
		...
	
	def request(self, method, url, *args, **kwargs): # -> Response:
		...
	


session = Session
def request(method, url, **kwargs): # -> Response:
	...

def get(url, params=..., **kwargs): # -> Response:
	...

def options(url, **kwargs): # -> Response:
	...

def head(url, **kwargs): # -> Response:
	...

def post(url, data=..., json=..., **kwargs): # -> Response:
	...

def put(url, data=..., **kwargs): # -> Response:
	...

def patch(url, data=..., **kwargs): # -> Response:
	...

def delete(url, **kwargs): # -> Response:
	...

