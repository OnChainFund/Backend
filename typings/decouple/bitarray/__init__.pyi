"""
This type stub file was generated by pyright.
"""

import os
import sys
import unittest
from string import hexdigits
from random import choice, randint
from bitarray import bitarray, bits2bytes, frozenbitarray
from bitarray.test_bitarray import Util
from bitarray.util import ba2hex, ba2int, count_and, count_n, count_or, count_xor, hex2ba, huffman_code, int2ba, rindex, strip, subset, zeros

"""
Tests for bitarray.util module
"""
if sys.version_info[0] == 3:
    unicode = str
tests = ...
class TestsZeros(unittest.TestCase):
    def test_init(self): # -> None:
        ...
    
    def test_endian(self): # -> None:
        ...
    


class TestsHelpers(unittest.TestCase, Util):
    def test_rindex(self): # -> None:
        ...
    
    def test_rindex2(self): # -> None:
        ...
    
    def test_rindex3(self): # -> None:
        ...
    
    def test_rindex4(self): # -> None:
        ...
    
    def test_strip1(self): # -> None:
        ...
    
    def test_strip2(self): # -> None:
        ...
    
    def test_strip_both(self): # -> None:
        ...
    
    def check_result(self, a, n, i): # -> None:
        ...
    
    def test_count_n1(self): # -> None:
        ...
    
    def test_count_n1_frozen(self): # -> None:
        ...
    
    def test_count_n2(self): # -> None:
        ...
    
    def test_count_n3(self): # -> None:
        ...
    
    def test_count_n4(self): # -> None:
        ...
    


class TestsBitwiseCount(unittest.TestCase, Util):
    def test_bit_count1(self): # -> None:
        ...
    
    def test_bit_count_frozen(self): # -> None:
        ...
    
    def test_bit_count2(self): # -> None:
        ...
    


class TestsSubset(unittest.TestCase, Util):
    def test_subset(self): # -> None:
        ...
    
    def subset_simple(self, a, b):
        ...
    
    def test_subset_True(self): # -> None:
        ...
    
    def test_subset_False(self): # -> None:
        ...
    
    def test_many(self): # -> None:
        ...
    


class TestsHexlify(unittest.TestCase, Util):
    def test_ba2hex(self): # -> None:
        ...
    
    def test_hex2ba(self): # -> None:
        ...
    
    def test_explicit(self): # -> None:
        ...
    
    def test_round_trip(self): # -> None:
        ...
    
    def test_round_trip2(self): # -> None:
        ...
    


class TestsIntegerization(unittest.TestCase, Util):
    def test_ba2int(self): # -> None:
        ...
    
    def test_int2ba(self): # -> None:
        ...
    
    def test_int2ba_length(self): # -> None:
        ...
    
    def test_explicit(self): # -> None:
        ...
    
    def check_round_trip(self, i): # -> None:
        ...
    
    def test_many(self): # -> None:
        ...
    


class TestsHuffman(unittest.TestCase):
    def test_simple(self): # -> None:
        ...
    
    def test_tiny(self): # -> None:
        ...
    
    def test_endianness(self): # -> None:
        ...
    
    def test_wrong_arg(self): # -> None:
        ...
    
    def test_balanced(self): # -> None:
        ...
    
    def test_unbalanced(self): # -> None:
        ...
    
    if sys.version_info[: 2] >= (2, 7):
        def test_counter(self): # -> None:
            ...
        
        def test_rand_list(self): # -> None:
            ...
        


def run(verbosity=...): # -> TestResult:
    ...

if __name__ == '__main__':
    ...
